(()=>{"use strict";var e={178:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=s(774);const n=[21,47,48,52,55,56,59,60,61,63,121];let O=0,i=null,a=0;function o(e,t){return t==a&&e==i?O:(i=e,a=t,O=function(e,t){for(let s=0;;t++){let r=e.get(t);if(32==r)s++;else{if(9!=r)return 10==r||13==r||35==r?-1:s;s+=8-s%8}}}(e,t))}const $=new r.ExternalTokenizer(((e,t,s)=>{let r=e.get(t.start);r<0?t.accept(167,t.start):10!=r&&13!=r||(null!=s.startOf(n)?t.accept(165,t.start+1):o(e,t.start+1)<0?t.accept(166,t.start+1):t.accept(164,t.start+1))}),{contextual:!0,fallback:!0}),l=new r.ExternalTokenizer(((e,t,s)=>{let r,O=e.get(t.start-1);(10==O||13==O)&&(r=o(e,t.start))>=0&&r!=s.context.depth&&null==s.startOf(n)&&t.accept(r<s.context.depth?163:162,t.start)}));function p(e,t){this.parent=e,this.depth=t,this.hash=(e?e.hash+e.hash<<8:0)+t+(t<<4)}const h=new p(null,0),u=new r.ContextTracker({start:h,shift:(e,t,s,r)=>162==t?new p(e,o(s,r.pos)):163==t?e.parent:e,hash:e=>e.hash}),c=new r.ExternalTokenizer(((e,t)=>{let s=t.start;for(let t="print",r=0;r<t.length;r++,s++)if(e.get(s)!=t.charCodeAt(r))return;let r=s;if(!/\w/.test(String.fromCharCode(e.get(s))))for(;;s++){let n=e.get(s);if(32!=n&&9!=n)return void(40!=n&&46!=n&&10!=n&&13!=n&&35!=n&&t.accept(1,r))}})),f={__proto__:null,await:40,or:48,and:50,in:54,not:56,is:58,if:64,else:66,lambda:70,yield:88,from:90,async:98,for:100,None:152,True:154,False:154,del:168,pass:172,break:176,continue:180,return:184,raise:192,import:196,as:198,global:202,nonlocal:204,assert:208,elif:218,while:222,try:228,except:230,finally:232,with:236,def:240,class:250},g=r.Parser.deserialize({version:13,states:"!?|O`Q$IXOOO%cQ$I[O'#GaOOQ$IS'#Cm'#CmOOQ$IS'#Cn'#CnO'RQ$IWO'#ClO(tQ$I[O'#G`OOQ$IS'#Ga'#GaOOQ$IS'#DR'#DROOQ$IS'#G`'#G`O)bQ$IWO'#CqO)rQ$IWO'#DbO*SQ$IWO'#DfOOQ$IS'#Ds'#DsO*gO`O'#DsO*oOpO'#DsO*wO!bO'#DtO+SO#tO'#DtO+_O&jO'#DtO+jO,UO'#DtO-lQ$I[O'#GQOOQ$IS'#GQ'#GQO'RQ$IWO'#GPO/OQ$I[O'#GPOOQ$IS'#E]'#E]O/gQ$IWO'#E^OOQ$IS'#GO'#GOO/qQ$IWO'#F}OOQ$IV'#F}'#F}O/|Q$IWO'#FPOOQ$IS'#Fr'#FrO0RQ$IWO'#FOOOQ$IV'#HZ'#HZOOQ$IV'#F|'#F|OOQ$IT'#FR'#FRQ`Q$IXOOO'RQ$IWO'#CoO0aQ$IWO'#CzO0hQ$IWO'#DOO0vQ$IWO'#GeO1WQ$I[O'#EQO'RQ$IWO'#EROOQ$IS'#ET'#ETOOQ$IS'#EV'#EVOOQ$IS'#EX'#EXO1lQ$IWO'#EZO2SQ$IWO'#E_O/|Q$IWO'#EaO2gQ$I[O'#EaO/|Q$IWO'#EdO/gQ$IWO'#EgO/gQ$IWO'#EkO/gQ$IWO'#EnO2rQ$IWO'#EpO2yQ$IWO'#EuO3UQ$IWO'#EqO/gQ$IWO'#EuO/|Q$IWO'#EwO/|Q$IWO'#E|OOQ$IS'#Cc'#CcOOQ$IS'#Cd'#CdOOQ$IS'#Ce'#CeOOQ$IS'#Cf'#CfOOQ$IS'#Cg'#CgOOQ$IS'#Ch'#ChOOQ$IS'#Cj'#CjO'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O3ZQ$IWO'#DmOOQ$IS,5:W,5:WO3nQ$IWO,5:ZO3{Q%1`O,5:ZO4QQ$I[O,59WO0aQ$IWO,59_O0aQ$IWO,59_O0aQ$IWO,59_O6pQ$IWO,59_O6uQ$IWO,59_O6|Q$IWO,59gO7TQ$IWO'#G`O8ZQ$IWO'#G_OOQ$IS'#G_'#G_OOQ$IS'#DX'#DXO8rQ$IWO,59]O'RQ$IWO,59]O9QQ$IWO,59]O9VQ$IWO,5:PO'RQ$IWO,5:POOQ$IS,59|,59|O9eQ$IWO,59|O9jQ$IWO,5:VO'RQ$IWO,5:VO'RQ$IWO,5:TOOQ$IS,5:Q,5:QO9{Q$IWO,5:QO:QQ$IWO,5:UOOOO'#FZ'#FZO:VO`O,5:_OOQ$IS,5:_,5:_OOOO'#F['#F[O:_OpO,5:_O:gQ$IWO'#DuOOOO'#F]'#F]O:wO!bO,5:`OOQ$IS,5:`,5:`OOOO'#F`'#F`O;SO#tO,5:`OOOO'#Fa'#FaO;_O&jO,5:`OOOO'#Fb'#FbO;jO,UO,5:`OOQ$IS'#Fc'#FcO;uQ$I[O,5:dO>gQ$I[O,5<kO?QQ%GlO,5<kO?qQ$I[O,5<kOOQ$IS,5:x,5:xO@YQ$IXO'#FkOAiQ$IWO,5;TOOQ$IV,5<i,5<iOAtQ$I[O'#HWOB]Q$IWO,5;kOOQ$IS-E9p-E9pOOQ$IV,5;j,5;jO3PQ$IWO'#EwOOQ$IT-E9P-E9POBeQ$I[O,59ZODlQ$I[O,59fOEVQ$IWO'#GbOEbQ$IWO'#GbO/|Q$IWO'#GbOEmQ$IWO'#DQOEuQ$IWO,59jOEzQ$IWO'#GfO'RQ$IWO'#GfO/gQ$IWO,5=POOQ$IS,5=P,5=PO/gQ$IWO'#D|OOQ$IS'#D}'#D}OFiQ$IWO'#FeOFyQ$IWO,58zOGXQ$IWO,58zO)eQ$IWO,5:jOG^Q$I[O'#GhOOQ$IS,5:m,5:mOOQ$IS,5:u,5:uOGqQ$IWO,5:yOHSQ$IWO,5:{OOQ$IS'#Fh'#FhOHbQ$I[O,5:{OHpQ$IWO,5:{OHuQ$IWO'#HYOOQ$IS,5;O,5;OOITQ$IWO'#HVOOQ$IS,5;R,5;RO3UQ$IWO,5;VO3UQ$IWO,5;YOIfQ$I[O'#H[O'RQ$IWO'#H[OIpQ$IWO,5;[O2rQ$IWO,5;[O/gQ$IWO,5;aO/|Q$IWO,5;cOIuQ$IXO'#ElOKOQ$IZO,5;]ONaQ$IWO'#H]O3UQ$IWO,5;aONlQ$IWO,5;cONqQ$IWO,5;hO!#fQ$I[O1G.hO!#mQ$I[O1G.hO!&^Q$I[O1G.hO!&hQ$I[O1G.hO!)RQ$I[O1G.hO!)fQ$I[O1G.hO!)yQ$IWO'#GnO!*XQ$I[O'#GQO/gQ$IWO'#GnO!*cQ$IWO'#GmOOQ$IS,5:X,5:XO!*kQ$IWO,5:XO!*pQ$IWO'#GoO!*{Q$IWO'#GoO!+`Q$IWO1G/uOOQ$IS'#Dq'#DqOOQ$IS1G/u1G/uOOQ$IS1G.y1G.yO!,`Q$I[O1G.yO!,gQ$I[O1G.yO0aQ$IWO1G.yO!-SQ$IWO1G/ROOQ$IS'#DW'#DWO/gQ$IWO,59qOOQ$IS1G.w1G.wO!-ZQ$IWO1G/cO!-kQ$IWO1G/cO!-sQ$IWO1G/dO'RQ$IWO'#GgO!-xQ$IWO'#GgO!-}Q$I[O1G.wO!._Q$IWO,59fO!/eQ$IWO,5=VO!/uQ$IWO,5=VO!/}Q$IWO1G/kO!0SQ$I[O1G/kOOQ$IS1G/h1G/hO!0dQ$IWO,5=QO!1ZQ$IWO,5=QO/gQ$IWO1G/oO!1xQ$IWO1G/qO!1}Q$I[O1G/qO!2_Q$I[O1G/oOOQ$IS1G/l1G/lOOQ$IS1G/p1G/pOOOO-E9X-E9XOOQ$IS1G/y1G/yOOOO-E9Y-E9YO!2oQ$IWO'#GzO/gQ$IWO'#GzO!2}Q$IWO,5:aOOOO-E9Z-E9ZOOQ$IS1G/z1G/zOOOO-E9^-E9^OOOO-E9_-E9_OOOO-E9`-E9`OOQ$IS-E9a-E9aO!3YQ%GlO1G2VO!3yQ$I[O1G2VO'RQ$IWO,5<OOOQ$IS,5<O,5<OOOQ$IS-E9b-E9bOOQ$IS,5<V,5<VOOQ$IS-E9i-E9iOOQ$IV1G0o1G0oO/|Q$IWO'#FgO!4bQ$I[O,5=rOOQ$IS1G1V1G1VO!4yQ$IWO1G1VOOQ$IS'#DS'#DSO/gQ$IWO,5<|OOQ$IS,5<|,5<|O!5OQ$IWO'#FSO!5ZQ$IWO,59lO!5cQ$IWO1G/UO!5mQ$I[O,5=QOOQ$IS1G2k1G2kOOQ$IS,5:h,5:hO!6^Q$IWO'#GPOOQ$IS,5<P,5<POOQ$IS-E9c-E9cO!6oQ$IWO1G.fOOQ$IS1G0U1G0UO!6}Q$IWO,5=SO!7_Q$IWO,5=SO/gQ$IWO1G0eO/gQ$IWO1G0eO/|Q$IWO1G0gOOQ$IS-E9f-E9fO!7pQ$IWO1G0gO!7{Q$IWO1G0gO!8QQ$IWO,5=tO!8`Q$IWO,5=tO!8nQ$IWO,5=qO!9UQ$IWO,5=qO!9gQ$IZO1G0qO!<uQ$IZO1G0tO!@QQ$IWO,5=vO!@[Q$IWO,5=vO!@dQ$I[O,5=vO/gQ$IWO1G0vO!@nQ$IWO1G0vO3UQ$IWO1G0{ONlQ$IWO1G0}OOQ$IV,5;W,5;WO!@sQ$IYO,5;WO!@xQ$IZO1G0wO!DZQ$IWO'#FoO3UQ$IWO1G0wO3UQ$IWO1G0wO!DhQ$IWO,5=wO!DuQ$IWO,5=wO/|Q$IWO,5=wOOQ$IV1G0{1G0{O!D}Q$IWO'#EyO!E`Q%1`O1G0}OOQ$IV1G1S1G1SO3UQ$IWO1G1SOOQ$IS,5=Y,5=YOOQ$IS'#Dn'#DnO/gQ$IWO,5=YO!EhQ$IWO,5=XO!E{Q$IWO,5=XOOQ$IS1G/s1G/sO!FTQ$IWO,5=ZO!FeQ$IWO,5=ZO!FmQ$IWO,5=ZO!GQQ$IWO,5=ZO!GbQ$IWO,5=ZOOQ$IS7+%a7+%aOOQ$IS7+$e7+$eO!5cQ$IWO7+$mO!ITQ$IWO1G.yO!I[Q$IWO1G.yOOQ$IS1G/]1G/]OOQ$IS,5;p,5;pO'RQ$IWO,5;pOOQ$IS7+$}7+$}O!IcQ$IWO7+$}OOQ$IS-E9S-E9SOOQ$IS7+%O7+%OO!IsQ$IWO,5=RO'RQ$IWO,5=ROOQ$IS7+$c7+$cO!IxQ$IWO7+$}O!JQQ$IWO7+%OO!JVQ$IWO1G2qOOQ$IS7+%V7+%VO!JgQ$IWO1G2qO!JoQ$IWO7+%VOOQ$IS,5;o,5;oO'RQ$IWO,5;oO!JtQ$IWO1G2lOOQ$IS-E9R-E9RO!KkQ$IWO7+%ZOOQ$IS7+%]7+%]O!KyQ$IWO1G2lO!LhQ$IWO7+%]O!LmQ$IWO1G2rO!L}Q$IWO1G2rO!MVQ$IWO7+%ZO!M[Q$IWO,5=fO!MrQ$IWO,5=fO!MrQ$IWO,5=fO!NQO!LQO'#DwO!N]OSO'#G{OOOO1G/{1G/{O!NbQ$IWO1G/{O!NjQ%GlO7+'qO# ZQ$I[O1G1jP# tQ$IWO'#FdOOQ$IS,5<R,5<ROOQ$IS-E9e-E9eOOQ$IS7+&q7+&qOOQ$IS1G2h1G2hOOQ$IS,5;n,5;nOOQ$IS-E9Q-E9QOOQ$IS7+$p7+$pO#!RQ$IWO,5<kO#!lQ$IWO,5<kO#!}Q$I[O,5;qO##bQ$IWO1G2nOOQ$IS-E9T-E9TOOQ$IS7+&P7+&PO##rQ$IWO7+&POOQ$IS7+&R7+&RO#$QQ$IWO'#HXO/|Q$IWO7+&RO#$fQ$IWO7+&ROOQ$IS,5<U,5<UO#$qQ$IWO1G3`OOQ$IS-E9h-E9hOOQ$IS,5<Q,5<QO#%PQ$IWO1G3]OOQ$IS-E9d-E9dO#%gQ$IZO7+&]O!DZQ$IWO'#FmO3UQ$IWO7+&]O3UQ$IWO7+&`O#(uQ$I[O,5<YO'RQ$IWO,5<YO#)PQ$IWO1G3bOOQ$IS-E9l-E9lO#)ZQ$IWO1G3bO3UQ$IWO7+&bO/gQ$IWO7+&bOOQ$IV7+&g7+&gO!E`Q%1`O7+&iO#)cQ$IXO1G0rOOQ$IV-E9m-E9mO3UQ$IWO7+&cO3UQ$IWO7+&cOOQ$IV,5<Z,5<ZO#+UQ$IWO,5<ZOOQ$IV7+&c7+&cO#+aQ$IZO7+&cO#.lQ$IWO,5<[O#.wQ$IWO1G3cOOQ$IS-E9n-E9nO#/UQ$IWO1G3cO#/^Q$IWO'#H_O#/lQ$IWO'#H_O/|Q$IWO'#H_OOQ$IS'#H_'#H_O#/wQ$IWO'#H^OOQ$IS,5;e,5;eO#0PQ$IWO,5;eO/gQ$IWO'#E{OOQ$IV7+&i7+&iO3UQ$IWO7+&iOOQ$IV7+&n7+&nOOQ$IS1G2t1G2tOOQ$IS,5;s,5;sO#0UQ$IWO1G2sOOQ$IS-E9V-E9VO#0iQ$IWO,5;tO#0tQ$IWO,5;tO#1XQ$IWO1G2uOOQ$IS-E9W-E9WO#1iQ$IWO1G2uO#1qQ$IWO1G2uO#2RQ$IWO1G2uO#1iQ$IWO1G2uOOQ$IS<<HX<<HXO#2^Q$I[O1G1[OOQ$IS<<Hi<<HiP#2kQ$IWO'#FUO6|Q$IWO1G2mO#2xQ$IWO1G2mO#2}Q$IWO<<HiOOQ$IS<<Hj<<HjO#3_Q$IWO7+(]OOQ$IS<<Hq<<HqO#3oQ$I[O1G1ZP#4`Q$IWO'#FTO#4mQ$IWO7+(^O#4}Q$IWO7+(^O#5VQ$IWO<<HuO#5[Q$IWO7+(WOOQ$IS<<Hw<<HwO#6RQ$IWO,5;rO'RQ$IWO,5;rOOQ$IS-E9U-E9UOOQ$IS<<Hu<<HuOOQ$IS,5;x,5;xO/gQ$IWO,5;xO#6WQ$IWO1G3QOOQ$IS-E9[-E9[O#6nQ$IWO1G3QOOOO'#F_'#F_O#6|O!LQO,5:cOOOO,5=g,5=gOOOO7+%g7+%gO#7XQ$IWO1G2VO#7rQ$IWO1G2VP'RQ$IWO'#FVO/gQ$IWO<<IkO#8TQ$IWO,5=sO#8fQ$IWO,5=sO/|Q$IWO,5=sO#8wQ$IWO<<ImOOQ$IS<<Im<<ImO/|Q$IWO<<ImP/|Q$IWO'#FjP/gQ$IWO'#FfOOQ$IV-E9k-E9kO3UQ$IWO<<IwOOQ$IV,5<X,5<XO3UQ$IWO,5<XOOQ$IV<<Iw<<IwOOQ$IV<<Iz<<IzO#8|Q$I[O1G1tP#9WQ$IWO'#FnO#9_Q$IWO7+(|O#9iQ$IZO<<I|O3UQ$IWO<<I|OOQ$IV<<JT<<JTO3UQ$IWO<<JTOOQ$IV'#Fl'#FlO#<tQ$IZO7+&^OOQ$IV<<I}<<I}O#>mQ$IZO<<I}OOQ$IV1G1u1G1uO/|Q$IWO1G1uO3UQ$IWO<<I}O/|Q$IWO1G1vP/gQ$IWO'#FpO#AxQ$IWO7+(}O#BVQ$IWO7+(}OOQ$IS'#Ez'#EzO/gQ$IWO,5=yO#B_Q$IWO,5=yOOQ$IS,5=y,5=yO#BjQ$IWO,5=xO#B{Q$IWO,5=xOOQ$IS1G1P1G1POOQ$IS,5;g,5;gP#CTQ$IWO'#FXO#CeQ$IWO1G1`O#CxQ$IWO1G1`O#DYQ$IWO1G1`P#DeQ$IWO'#FYO#DrQ$IWO7+(aO#ESQ$IWO7+(aO#ESQ$IWO7+(aO#E[Q$IWO7+(aO#ElQ$IWO7+(XO6|Q$IWO7+(XOOQ$ISAN>TAN>TO#FVQ$IWO<<KxOOQ$ISAN>aAN>aO/gQ$IWO1G1^O#FgQ$I[O1G1^P#FqQ$IWO'#FWOOQ$IS1G1d1G1dP#GOQ$IWO'#F^O#G]Q$IWO7+(lOOOO-E9]-E9]O#GsQ$IWO7+'qOOQ$ISAN?VAN?VO#H^Q$IWO,5<TO#HrQ$IWO1G3_OOQ$IS-E9g-E9gO#ITQ$IWO1G3_OOQ$ISAN?XAN?XO#IfQ$IWOAN?XOOQ$IVAN?cAN?cOOQ$IV1G1s1G1sO3UQ$IWOAN?hO#IkQ$IZOAN?hOOQ$IVAN?oAN?oOOQ$IV-E9j-E9jOOQ$IV<<Ix<<IxO3UQ$IWOAN?iO3UQ$IWO7+'aOOQ$IVAN?iAN?iOOQ$IS7+'b7+'bO#LvQ$IWO<<LiOOQ$IS1G3e1G3eO/gQ$IWO1G3eOOQ$IS,5<],5<]O#MTQ$IWO1G3dOOQ$IS-E9o-E9oO#MfQ$IWO7+&zO#MvQ$IWO7+&zOOQ$IS7+&z7+&zO#NRQ$IWO<<K{O#NcQ$IWO<<K{O#NcQ$IWO<<K{O#NkQ$IWO'#GiOOQ$IS<<Ks<<KsO#NuQ$IWO<<KsOOQ$IS7+&x7+&xO/|Q$IWO1G1oP/|Q$IWO'#FiO$ `Q$IWO7+(yO$ qQ$IWO7+(yOOQ$ISG24sG24sOOQ$IVG25SG25SO3UQ$IWOG25SOOQ$IVG25TG25TOOQ$IV<<J{<<J{OOQ$IS7+)P7+)PP$!SQ$IWO'#FqOOQ$IS<<Jf<<JfO$!bQ$IWO<<JfO$!rQ$IWOANAgO$#SQ$IWOANAgO$#[Q$IWO'#GjOOQ$IS'#Gj'#GjO0hQ$IWO'#DaO$#uQ$IWO,5=TOOQ$ISANA_ANA_OOQ$IS7+'Z7+'ZO$$^Q$IWO<<LeOOQ$IVLD*nLD*nOOQ$ISAN@QAN@QO$$oQ$IWOG27RO$%PQ$IWO,59{OOQ$IS1G2o1G2oO#NkQ$IWO1G/gOOQ$IS7+%R7+%RO6|Q$IWO'#CzO6|Q$IWO,59_O6|Q$IWO,59_O6|Q$IWO,59_O$%UQ$I[O,5<kO6|Q$IWO1G.yO/gQ$IWO1G/UO/gQ$IWO7+$mP$%iQ$IWO'#FdO'RQ$IWO'#GPO$%vQ$IWO,59_O$%{Q$IWO,59_O$&SQ$IWO,59jO$&XQ$IWO1G/RO0hQ$IWO'#DOO6|Q$IWO,59g",stateData:"$&o~O$oOS$lOS$kOSQOS~OPhOTeOdsOfXOltOp!SOsuO|vO}!PO!R!VO!S!UO!VYO!ZZO!fdO!mdO!ndO!odO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$jqO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$u![O$v!]O$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aO~Oh%TXi%TXj%TXk%TXl%TXm%TXp%TXw%TXx%TX!s%TX#^%TX$j%TX$m%TX%V%TX!O%TX!R%TX!S%TX%W%TX!W%TX![%TX}%TX#V%TXq%TX!j%TX~P$_OdsOfXO!VYO!ZZO!fdO!mdO!ndO!odO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~Ow%SXx%SX#^%SX$j%SX$m%SX%V%SX~Oh!oOi!pOj!nOk!nOl!qOm!rOp!sO!s%SX~P(`OT!yOl-fOs-tO|vO~P'ROT!|Ol-fOs-tO!W!}O~P'ROT#QO_#ROl-fOs-tO![#SO~P'RO%g#VO%h#XO~O%j#YO%k#XO~O!Z#[O%m#]O%q#_O~O!Z#[O%s#`O%t#_O~O!Z#[O%h#_O%v#bO~O!Z#[O%k#_O%x#dO~OT$tX]$tX_$tXf$tXh$tXi$tXj$tXk$tXl$tXm$tXp$tXw$tX!V$tX!d$tX$u$tX$v$tX$w$tX$x$tX$y$tX$z$tX${$tX$|$tX$}$tX%O$tX!O$tX!R$tX!S$tX~O%e[O%f]O%i^O%l_O%r`O%uaO%wbOx$tX!s$tX#^$tX$j$tX$m$tX%V$tX%W$tX!W$tX![$tX}$tX#V$tXq$tX!j$tX~P+uOw#iOx$sX!s$sX#^$sX$j$sX$m$sX%V$sX~Ol-fOs-tO~P'RO#^#lO$j#nO$m#nO~O%QVO~O!R#sO#l!YO#q!ZO#tlO~OltO~P'ROT#xO_#yO%QVOxtP~OT#}Ol-fOs-tO}$OO~P'ROx$QO!s$VO%V$RO#^!tX$j!tX$m!tX~OT#}Ol-fOs-tO#^!}X$j!}X$m!}X~P'ROl-fOs-tO#^#RX$j#RX$m#RX~P'RO!d$]O!m$]O%QVO~OT$gO~P'RO!S$iO#j$jO#l$kO~Ox$lO~OT$zO_$zOl-fOs-tO!O$|O~P'ROl-fOs-tOx%PO~P'RO%d%RO~O_!bOf!iO!V!kO!d!lOT`a]`ah`ai`aj`ak`al`am`ap`aw`ax`a!s`a#^`a$j`a$m`a$u`a$v`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%V`a!O`a!R`a!S`a%W`a!W`a![`a}`a#V`aq`a!j`a~Ok%WO~Ol%WO~P'ROl-fO~P'ROh-hOi-iOj-gOk-gOl-pOm-qOp-uO!O%SX!R%SX!S%SX%W%SX!W%SX![%SX}%SX#V%SX!j%SX~P(`O%W%YOw%RX!O%RX!R%RX!S%RX!W%RXx%RX~Ow%]O!O%[O!R%aO!S%`O~O!O%[O~Ow%dO!R%aO!S%`O!W%_X~O!W%hO~Ow%iOx%kO!R%aO!S%`O![%YX~O![%oO~O![%pO~O%g#VO%h%rO~O%j#YO%k%rO~OT%uOl-fOs-tO|vO~P'RO!Z#[O%m#]O%q%xO~O!Z#[O%s#`O%t%xO~O!Z#[O%h%xO%v#bO~O!Z#[O%k%xO%x#dO~OT!la]!la_!laf!lah!lai!laj!lak!lal!lam!lap!law!lax!la!V!la!d!la!s!la#^!la$j!la$m!la$u!la$v!la$w!la$x!la$y!la$z!la${!la$|!la$}!la%O!la%V!la!O!la!R!la!S!la%W!la!W!la![!la}!la#V!laq!la!j!la~P#vOw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P$_OT&POltOsuOx$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P'ROw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#^$_X$j$_X$m$_X~P'RO#^#lO$j&UO$m&UO~O!d&VOf%zX$j%zX#V%zX#^%zX$m%zX#U%zX~Of!iO$j&XO~Ohcaicajcakcalcamcapcawcaxca!sca#^ca$jca$mca%Vca!Oca!Rca!Sca%Wca!Wca![ca}ca#Vcaqca!jca~P$_Opnawnaxna#^na$jna$mna%Vna~Oh!oOi!pOj!nOk!nOl!qOm!rO!sna~PDTO%V&ZOw%UXx%UX~O%QVOw%UXx%UX~Ow&^OxtX~Ox&`O~Ow%iO#^%YX$j%YX$m%YX!O%YXx%YX![%YX!j%YX%V%YX~OT-oOl-fOs-tO|vO~P'RO%V$RO#^Sa$jSa$mSa~O%V$RO~Ow&iO#^%[X$j%[X$m%[Xk%[X~P$_Ow&lO}&kO#^#Ra$j#Ra$m#Ra~O#V&mO#^#Ta$j#Ta$m#Ta~O!d$]O!m$]O#U&oO%QVO~O#U&oO~Ow&qO#^%|X$j%|X$m%|X~Ow&sO#^%yX$j%yX$m%yXx%yX~Ow&wOk&OX~P$_Ok&zO~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO$j'PO~P'ROq'TO#g'RO#h'SOP#eaT#ead#eaf#eal#eap#eas#ea|#ea}#ea!R#ea!S#ea!V#ea!Z#ea!f#ea!m#ea!n#ea!o#ea!v#ea!x#ea!z#ea!|#ea#O#ea#S#ea#U#ea#X#ea#Y#ea#[#ea#c#ea#f#ea#j#ea#l#ea#q#ea#t#ea$g#ea$j#ea$z#ea${#ea%P#ea%Q#ea%e#ea%f#ea%i#ea%l#ea%r#ea%u#ea%w#ea$i#ea$m#ea~Ow'UO#V'WOx&PX~Of'YO~Of!iOx$lO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$v!]O~PNyO$vUi~PNyOT!aO]!aO_!bOf!iO!V!kO!d!lO$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$x!_O$y!_O~P!#tO$xUi$yUi~P!#tO_!bOf!iO!V!kO!d!lOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi$xUi$yUi$zUi${Ui%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~OT!aO]!aO$|!aO$}!aO%O!aO~P!&rOTUi]Ui$|Ui$}Ui%OUi~P!&rO!R%aO!S%`Ow%bX!O%bX~O%V'_O%W'_O~P+uOw'aO!O%aX~O!O'cO~Ow'dOx'fO!W%cX~Ol-fOs-tOw'dOx'gO!W%cX~P'RO!W'iO~Oj!nOk!nOl!qOm!rOhgipgiwgixgi!sgi#^gi$jgi$mgi%Vgi~Oi!pO~P!+eOigi~P!+eOh-hOi-iOj-gOk-gOl-pOm-qO~Oq'kO~P!,nOT'pOl-fOs-tO!O'qO~P'ROw'rO!O'qO~O!O'tO~O!S'vO~Ow'rO!O'wO!R%aO!S%`O~P$_Oh-hOi-iOj-gOk-gOl-pOm-qO!Ona!Rna!Sna%Wna!Wna![na}na#Vnaqna!jna~PDTOT'pOl-fOs-tO!W%_a~P'ROw'zO!W%_a~O!W'{O~Ow'zO!R%aO!S%`O!W%_a~P$_OT(POl-fOs-tO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~P'ROw(QO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~O![(TO~Ow(QO!R%aO!S%`O![%Ya~P$_Ow(WO!R%aO!S%`O![%`a~P$_Ow(ZOx%nX![%nX!j%nX~Ox(^O![(`O!j(aO~OT&POltOsuOx$si!s$si#^$si$j$si$m$si%V$si~P'ROw(bOx$si!s$si#^$si$j$si$m$si%V$si~O!d&VOf%za$j%za#V%za#^%za$m%za#U%za~O$j(gO~OT#xO_#yO%QVO~Ow&^Oxta~OltOsuO~P'ROw(QO#^%Ya$j%Ya$m%Ya!O%Yax%Ya![%Ya!j%Ya%V%Ya~P$_Ow(lO#^$sX$j$sX$m$sX%V$sX~O%V$RO#^Si$jSi$mSi~O#^%[a$j%[a$m%[ak%[a~P'ROw(oO#^%[a$j%[a$m%[ak%[a~OT(sOf(uO%QVO~O#U(vO~O%QVO#^%|a$j%|a$m%|a~Ow(xO#^%|a$j%|a$m%|a~Ol-fOs-tO#^%ya$j%ya$m%yax%ya~P'ROw({O#^%ya$j%ya$m%yax%ya~Oq)PO#a)OOP#_iT#_id#_if#_il#_ip#_is#_i|#_i}#_i!R#_i!S#_i!V#_i!Z#_i!f#_i!m#_i!n#_i!o#_i!v#_i!x#_i!z#_i!|#_i#O#_i#S#_i#U#_i#X#_i#Y#_i#[#_i#c#_i#f#_i#j#_i#l#_i#q#_i#t#_i$g#_i$j#_i$z#_i${#_i%P#_i%Q#_i%e#_i%f#_i%i#_i%l#_i%r#_i%u#_i%w#_i$i#_i$m#_i~Oq)QOP#biT#bid#bif#bil#bip#bis#bi|#bi}#bi!R#bi!S#bi!V#bi!Z#bi!f#bi!m#bi!n#bi!o#bi!v#bi!x#bi!z#bi!|#bi#O#bi#S#bi#U#bi#X#bi#Y#bi#[#bi#c#bi#f#bi#j#bi#l#bi#q#bi#t#bi$g#bi$j#bi$z#bi${#bi%P#bi%Q#bi%e#bi%f#bi%i#bi%l#bi%r#bi%u#bi%w#bi$i#bi$m#bi~OT)SOk&Oa~P'ROw)TOk&Oa~Ow)TOk&Oa~P$_Ok)XO~O$h)[O~Oq)_O#g'RO#h)^OP#eiT#eid#eif#eil#eip#eis#ei|#ei}#ei!R#ei!S#ei!V#ei!Z#ei!f#ei!m#ei!n#ei!o#ei!v#ei!x#ei!z#ei!|#ei#O#ei#S#ei#U#ei#X#ei#Y#ei#[#ei#c#ei#f#ei#j#ei#l#ei#q#ei#t#ei$g#ei$j#ei$z#ei${#ei%P#ei%Q#ei%e#ei%f#ei%i#ei%l#ei%r#ei%u#ei%w#ei$i#ei$m#ei~Ol-fOs-tOx$lO~P'ROl-fOs-tOx&Pa~P'ROw)eOx&Pa~OT)iO_)jO!O)mO$|)kO%QVO~Ox$lO&S)oO~OT$zO_$zOl-fOs-tO!O%aa~P'ROw)uO!O%aa~Ol-fOs-tOx)xO!W%ca~P'ROw)yO!W%ca~Ol-fOs-tOw)yOx)|O!W%ca~P'ROl-fOs-tOw)yO!W%ca~P'ROw)yOx)|O!W%ca~Oj-gOk-gOl-pOm-qOhgipgiwgi!Ogi!Rgi!Sgi%Wgi!Wgixgi![gi#^gi$jgi$mgi}gi#Vgiqgi!jgi%Vgi~Oi-iO~P!GmOigi~P!GmOT'pOl-fOs-tO!O*RO~P'ROk*TO~Ow*VO!O*RO~O!O*WO~OT'pOl-fOs-tO!W%_i~P'ROw*XO!W%_i~O!W*YO~OT(POl-fOs-tO![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~P'ROw*]O!R%aO!S%`O![%`i~Ow*`O![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~O![*aO~O_*cOl-fOs-tO![%`i~P'ROw*]O![%`i~O![*eO~OT*gOl-fOs-tOx%na![%na!j%na~P'ROw*hOx%na![%na!j%na~O!Z#[O%p*kO![!kX~O![*mO~Ox(^O![*nO~OT&POltOsuOx$sq!s$sq#^$sq$j$sq$m$sq%V$sq~P'ROw$Wix$Wi!s$Wi#^$Wi$j$Wi$m$Wi%V$Wi~P$_OT&POltOsuO~P'ROT&POl-fOs-tO#^$sa$j$sa$m$sa%V$sa~P'ROw*oO#^$sa$j$sa$m$sa%V$sa~Ow#ya#^#ya$j#ya$m#yak#ya~P$_O#^%[i$j%[i$m%[ik%[i~P'ROw*rO#^#Rq$j#Rq$m#Rq~Ow*sO#V*uO#^%{X$j%{X$m%{X!O%{X~OT*wOf*xO%QVO~O%QVO#^%|i$j%|i$m%|i~Ol-fOs-tO#^%yi$j%yi$m%yix%yi~P'ROq*|O#a)OOP#_qT#_qd#_qf#_ql#_qp#_qs#_q|#_q}#_q!R#_q!S#_q!V#_q!Z#_q!f#_q!m#_q!n#_q!o#_q!v#_q!x#_q!z#_q!|#_q#O#_q#S#_q#U#_q#X#_q#Y#_q#[#_q#c#_q#f#_q#j#_q#l#_q#q#_q#t#_q$g#_q$j#_q$z#_q${#_q%P#_q%Q#_q%e#_q%f#_q%i#_q%l#_q%r#_q%u#_q%w#_q$i#_q$m#_q~Ok$baw$ba~P$_OT)SOk&Oi~P'ROw+TOk&Oi~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO~P'ROw+_Ox$lO#V+_O~O#h+`OP#eqT#eqd#eqf#eql#eqp#eqs#eq|#eq}#eq!R#eq!S#eq!V#eq!Z#eq!f#eq!m#eq!n#eq!o#eq!v#eq!x#eq!z#eq!|#eq#O#eq#S#eq#U#eq#X#eq#Y#eq#[#eq#c#eq#f#eq#j#eq#l#eq#q#eq#t#eq$g#eq$j#eq$z#eq${#eq%P#eq%Q#eq%e#eq%f#eq%i#eq%l#eq%r#eq%u#eq%w#eq$i#eq$m#eq~O#V+aOw$dax$da~Ol-fOs-tOx&Pi~P'ROw+cOx&Pi~Ox$QO%V+eOw&RX!O&RX~O%QVOw&RX!O&RX~Ow+iO!O&QX~O!O+kO~OT$zO_$zOl-fOs-tO!O%ai~P'ROx+nOw#|a!W#|a~Ol-fOs-tOx+oOw#|a!W#|a~P'ROl-fOs-tOx)xO!W%ci~P'ROw+rO!W%ci~Ol-fOs-tOw+rO!W%ci~P'ROw+rOx+uO!W%ci~Ow#xi!O#xi!W#xi~P$_OT'pOl-fOs-tO~P'ROk+wO~OT'pOl-fOs-tO!O+xO~P'ROT'pOl-fOs-tO!W%_q~P'ROw#wi![#wi#^#wi$j#wi$m#wi!O#wix#wi!j#wi%V#wi~P$_OT(POl-fOs-tO~P'RO_*cOl-fOs-tO![%`q~P'ROw+yO![%`q~O![+zO~OT(POl-fOs-tO![%Yq#^%Yq$j%Yq$m%Yq!O%Yqx%Yq!j%Yq%V%Yq~P'ROx+{O~OT*gOl-fOs-tOx%ni![%ni!j%ni~P'ROw,QOx%ni![%ni!j%ni~O!Z#[O%p*kO![!ka~OT&POl-fOs-tO#^$si$j$si$m$si%V$si~P'ROw,SO#^$si$j$si$m$si%V$si~O%QVO#^%{a$j%{a$m%{a!O%{a~Ow,VO#^%{a$j%{a$m%{a!O%{a~O!O,YO~Ok$biw$bi~P$_OT)SO~P'ROT)SOk&Oq~P'ROq,^OP#dyT#dyd#dyf#dyl#dyp#dys#dy|#dy}#dy!R#dy!S#dy!V#dy!Z#dy!f#dy!m#dy!n#dy!o#dy!v#dy!x#dy!z#dy!|#dy#O#dy#S#dy#U#dy#X#dy#Y#dy#[#dy#c#dy#f#dy#j#dy#l#dy#q#dy#t#dy$g#dy$j#dy$z#dy${#dy%P#dy%Q#dy%e#dy%f#dy%i#dy%l#dy%r#dy%u#dy%w#dy$i#dy$m#dy~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$i,bO$m,bO~P'RO#h,cOP#eyT#eyd#eyf#eyl#eyp#eys#ey|#ey}#ey!R#ey!S#ey!V#ey!Z#ey!f#ey!m#ey!n#ey!o#ey!v#ey!x#ey!z#ey!|#ey#O#ey#S#ey#U#ey#X#ey#Y#ey#[#ey#c#ey#f#ey#j#ey#l#ey#q#ey#t#ey$g#ey$j#ey$z#ey${#ey%P#ey%Q#ey%e#ey%f#ey%i#ey%l#ey%r#ey%u#ey%w#ey$i#ey$m#ey~Ol-fOs-tOx&Pq~P'ROw,gOx&Pq~O%V+eOw&Ra!O&Ra~OT)iO_)jO$|)kO%QVO!O&Qa~Ow,kO!O&Qa~OT$zO_$zOl-fOs-tO~P'ROl-fOs-tOx,mOw#|i!W#|i~P'ROl-fOs-tOw#|i!W#|i~P'ROx,mOw#|i!W#|i~Ol-fOs-tOx)xO~P'ROl-fOs-tOx)xO!W%cq~P'ROw,pO!W%cq~Ol-fOs-tOw,pO!W%cq~P'ROp,sO!R%aO!S%`O!O%Zq!W%Zq![%Zqw%Zq~P!,nO_*cOl-fOs-tO![%`y~P'ROw#zi![#zi~P$_O_*cOl-fOs-tO~P'ROT*gOl-fOs-tO~P'ROT*gOl-fOs-tOx%nq![%nq!j%nq~P'ROT&POl-fOs-tO#^$sq$j$sq$m$sq%V$sq~P'RO#V,wOw$]a#^$]a$j$]a$m$]a!O$]a~O%QVO#^%{i$j%{i$m%{i!O%{i~Ow,yO#^%{i$j%{i$m%{i!O%{i~O!O,{O~Oq,}OP#d!RT#d!Rd#d!Rf#d!Rl#d!Rp#d!Rs#d!R|#d!R}#d!R!R#d!R!S#d!R!V#d!R!Z#d!R!f#d!R!m#d!R!n#d!R!o#d!R!v#d!R!x#d!R!z#d!R!|#d!R#O#d!R#S#d!R#U#d!R#X#d!R#Y#d!R#[#d!R#c#d!R#f#d!R#j#d!R#l#d!R#q#d!R#t#d!R$g#d!R$j#d!R$z#d!R${#d!R%P#d!R%Q#d!R%e#d!R%f#d!R%i#d!R%l#d!R%r#d!R%u#d!R%w#d!R$i#d!R$m#d!R~Ol-fOs-tOx&Py~P'ROT)iO_)jO$|)kO%QVO!O&Qi~Ol-fOs-tOw#|q!W#|q~P'ROx-TOw#|q!W#|q~Ol-fOs-tOx)xO!W%cy~P'ROw-UO!W%cy~Ol-fOs-YO~P'ROp,sO!R%aO!S%`O!O%Zy!W%Zy![%Zyw%Zy~P!,nO%QVO#^%{q$j%{q$m%{q!O%{q~Ow-^O#^%{q$j%{q$m%{q!O%{q~OT)iO_)jO$|)kO%QVO~Ol-fOs-tOw#|y!W#|y~P'ROl-fOs-tOx)xO!W%c!R~P'ROw-aO!W%c!R~Op%^X!O%^X!R%^X!S%^X!W%^X![%^Xw%^X~P!,nOp,sO!R%aO!S%`O!O%]a!W%]a![%]aw%]a~O%QVO#^%{y$j%{y$m%{y!O%{y~Ol-fOs-tOx)xO!W%c!Z~P'ROx-dO~Ow*oO#^$sa$j$sa$m$sa%V$sa~P$_OT&POl-fOs-tO~P'ROk-kO~Ol-kO~P'ROx-lO~Oq-mO~P!,nO%f%i%u%w%e!Z%m%s%v%x%l%r%l%Q~",goto:"!,u&SPPPP&TP&])n*T*k+S+l,VP,qP&]-_-_&]P&]P0pPPPPPP0p3`PP3`P5l5u:yPP:|;[;_PPP&]&]PP;k&]PP&]&]PP&]&]&]&];o<c&]P<fP<i<i@OP@d&]PPP@h@n&TP&T&TP&TP&TP&TP&TP&T&T&TP&TPP&TPP&TP@tP@{ARP@{P@{@{PPP@{PBzPCTCZCaBzP@{CgPCnCtCzDWDjDpDzEQEnEtEzFQF[FbFhFnFtFzG^GhGnGtGzHUH[HbHhHnHxIOIYI`PPPPPPPPPIiIqIzJUJaPPPPPPPPPPPPNv! `!%n!(zPP!)S!)b!)k!*a!*W!*j!*p!*s!*v!*y!+RPPPPPPPPPP!+U!+XPPPPPPPPP!+_!+k!+w!,T!,W!,^!,d!,j!,m]iOr#l$l)[+Z'odOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uw!cP#h#u$W$f%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jy!dP#h#u$W$f$r%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j{!eP#h#u$W$f$r$s%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j}!fP#h#u$W$f$r$s$t%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!P!gP#h#u$W$f$r$s$t$u%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!R!hP#h#u$W$f$r$s$t$u$v%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!V!hP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j'oSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-u&ZUOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-u%eWOXYZhrv|}!R!S!T!X!i!k#[#i#l$O$Q$S$V$j$l$z%P%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#{uQ-b-YR-r-t'fdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'d'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uW#ol!O!P$^W#wu&^-Y-tQ$`!QQ$p!YQ$q!ZW$y!i'a)u+mS&]#x#yQ&}$kQ(e&VQ(s&mW(t&o(u(v*xU(w&q(x*yQ)g'WW)h'Y+i,k-RS+h)i)jY,U*s,V,x,y-^Q,X*uQ,d+_Q,f+aR-],wR&[#wi!vXY!S!T%]%d'r'z)O*S*V*XR%Z!uQ!zXQ%v#[Q&e$SR&h$VT-X,s-d!U!jP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jQ&Y#pR']$qR'`$yR%S!l'ncOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uT#fc#gS#]_#^S#``#aS#ba#cS#db#eT*k(^*lT(_%v(aQ$UwR+g)hX$Sw$T$U&gZkOr$l)[+ZXoOr)[+ZQ$m!WQ&u$dQ&v$eQ'X$oQ'[$qQ)Y&|Q)`'RQ)b'SQ)c'TQ)p'ZQ)r']Q*})OQ+P)PQ+Q)QQ+U)WS+W)Z)qQ+[)^Q+])_Q+^)aQ,[*|Q,]+OQ,_+VQ,`+XQ,e+`Q,|,^Q-O,cQ-P,dR-_,}WoOr)[+ZR#rnQ'Z$pR)Z&}Q+f)hR,i+gQ)q'ZR+X)ZZmOnr)[+ZQrOR#trQ&_#zR(j&_S%j#P#|S(R%j(UT(U%m&aQ%^!xQ%e!{W's%^%e'x'|Q'x%bR'|%gQ&j$WR(p&jQ(X%nQ*^(ST*d(X*^Q'b${R)v'bS'e%O%PY)z'e){+s,q-VU){'f'g'hU+s)|)}*OS,q+t+uR-V,rQ#W]R%q#WQ#Z^R%s#ZQ#^_R%w#^Q([%tS*i([*jR*j(]Q*l(^R,R*lQ#a`R%y#aQ#caR%z#cQ#ebR%{#eQ#gcR%|#gQ#jfQ&O#hW&R#j&O(m*pQ(m&dR*p-jQ$TwS&f$T&gR&g$UQ&t$bR(|&tQ&W#oR(f&WQ$^!PR&n$^Q*t(tS,W*t,zR,z,XQ&r$`R(y&rQ#mjR&T#mQ+Z)[R,a+ZQ(}&uR*{(}Q&x$fS)U&x)VR)V&yQ'Q$mR)]'QQ'V$nS)f'V+dR+d)gQ+j)lR,l+jWnOr)[+ZR#qnSqOrT+Y)[+ZWpOr)[+ZR'O$lYjOr$l)[+ZR&S#l[wOr#l$l)[+ZR&e$S&YPOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-uQ!mSQ#heQ#usU$Wx%`'vS$f!U$iQ$r!cQ$s!dQ$t!eQ$u!fQ$v!gQ$w!hQ%b!yQ%g!|Q%m#QQ%n#RQ&a#}Q&y$gQ(c&PU(n&i(o*qW)R&w)T+S+TQ*Q'pQ*Z(PQ+R)SQ+|*cR-j-oQ!xXQ!{YQ$d!SQ$e!T^'o%]%d'r'z*S*V*XR+O)O[fOr#l$l)[+Zh!uXY!S!T%]%d'r'z)O*S*V*XQ#PZQ#khS#|v|Q$Z}W$b!R$V&z)XS$n!X$jW$x!i'a)u+mQ%O!kQ%t#[`&Q#i%}(b(d(l*o,S-nQ&b$OQ&c$QQ&d$SQ'^$zQ'h%PQ'n%ZW(O%i(Q*[*`Q(S%kQ(]%uQ(h&[S(k&`-lQ(q&kQ(r&lU(z&s({*zQ)a'RY)d'U)e+b+c,gQ)s'`^)w'd)y+q+r,p-U-aQ)}'fQ*O'gS*P'k-mW*b(W*]+y+}W*f(Z*h,P,QQ+l)oQ+p)xQ+t)|Q,O*gQ,T*rQ,h+fQ,n+nQ,o+oQ,r+uQ,v+{Q-Q,iQ-S,mR-`-ThTOr#i#l$l%}&`'k(b(d)[+Z$z!tXYZhv|}!R!S!T!X!i!k#[$O$Q$S$V$j$z%P%Z%]%d%i%k%u&[&k&l&s&z'R'U'`'a'd'f'g'r'z(Q(W(Z(l({)O)X)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#vtW%T!n!r-g-qQ%U!oQ%V!pQ%X!sQ%c-fS'j%W-kQ'l-hQ'm-iQ+v*TQ,u+wS-W,s-dR-s-uU#zu-Y-tR(i&^[gOr#l$l)[+ZX!wX#[$S$VQ#UZQ$PvR$Y|Q%_!xQ%f!{Q%l#PQ'^$xQ'y%bQ'}%gQ(V%mQ(Y%nQ*_(SQ,t+vQ-[,uR-c-ZQ$XxQ'u%`R*U'vQ-Z,sR-e-dR#OYR#TZR$}!iQ${!iV)t'a)u+mR%Q!kR%v#[Q(`%vR*n(aQ$c!RQ&h$VQ)W&zR+V)XQ#plQ$[!OQ$_!PR&p$^Q(s&oQ*v(uQ*w(vR,Z*xR$a!QXpOr)[+ZQ$h!UR&{$iQ$o!XR&|$jR)n'YQ)l'YV,j+i,k-R",nodeNames:"⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ParenthesizedExpression ( BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from ) TupleExpression ComprehensionExpression async for LambdaExpression ArrayExpression [ ] ArrayComprehensionExpression DictionaryExpression { } DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",maxTerm:234,context:u,nodeProps:[[r.NodeProp.group,-14,4,80,82,83,85,87,89,91,93,94,95,97,100,103,"Statement Statement",-22,6,16,19,21,37,47,48,52,55,56,59,60,61,62,65,68,69,70,74,75,76,77,"Expression",-9,105,107,110,112,113,117,119,124,126,"Statement"]],skippedNodes:[0,2],repeatNodeCount:32,tokenData:"&AaMgR!^OX$}XY!#xY[$}[]!#x]p$}pq!#xqr!&Srs!)yst!C{tu$}uv$+}vw$.awx$/mxy$Lgyz$Mmz{$Ns{|%#c|}%$o}!O%%u!O!P%([!P!Q%3b!Q!R%6Q!R![%:S![!]%EO!]!^%Gb!^!_%Hh!_!`%KW!`!a%Ld!a!b$}!b!c& P!c!d&!_!d!e&$P!e!h&!_!h!i&.R!i!t&!_!t!u&7g!u!w&!_!w!x&,a!x!}&!_!}#O&9q#O#P!%b#P#Q&:w#Q#R&;}#R#S&!_#S#T$}#T#U&!_#U#V&$P#V#Y&!_#Y#Z&.R#Z#f&!_#f#g&7g#g#i&!_#i#j&,a#j#o&!_#o#p&=Z#p#q&>P#q#r&?]#r#s&@Z#s$g$}$g~&!_<r%`Z%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}9[&^Z%p7[%gS%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9['^Z%p7[%gS%jW%m`%v!bOr'Prs&Rsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P8z(WZ%p7[%jWOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z)UZ%p7[%gS%jW%v!bOr(yrs)wsw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*QZ%p7[%gS%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*|Z%p7[%gS%v!bOr(yrs+osw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8r+xX%p7[%gS%v!bOw+owx,ex#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r,jX%p7[Ow+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r-[X%p7[Ow+owx-wx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o7[-|R%p7[O#o-w#p#q-w#r~-w8r.[T%p7[O#o+o#o#p.k#p#q+o#q#r.k#r~+o!f.rV%gS%v!bOw.kwx/Xx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/[VOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/tUOw.kx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f0ZPO~.k!f0cV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#p.k#p~0xS0}T%gSOw0xwx1^x#O0x#O#P2P#P~0xS1aTOw0xwx1px#O0x#O#P2P#P~0xS1sSOw0xx#O0x#O#P2P#P~0xS2SPO~0x8z2[T%p7[O#o(y#o#p2k#p#q(y#q#r2k#r~(y!n2tX%gS%jW%v!bOr2krs3asw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n3hX%gS%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4[X%gS%v!bOr2krs.ksw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4|X%jWOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k!n5nX%jWOr2krs3asw2kwx6Zx#O2k#O#P7h#P#o2k#o#p7n#p~2kW6`T%jWOr6Zrs6os#O6Z#O#P7b#P~6ZW6rTOr6Zrs7Rs#O6Z#O#P7b#P~6ZW7USOr6Zs#O6Z#O#P7b#P~6ZW7ePO~6Z!n7kPO~2k!n7uX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p2k#p~8b[8iV%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P~8b[9TV%gSOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b[9oV%gSOr8brs0xsw8bwx:Ux#O8b#O#P;[#P~8b[:ZV%jWOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b[:uV%jWOr8brs9Osw8bwx6Zx#O8b#O#P;[#P~8b[;_PO~8b8z;iZ%p7[%jWOr(yrs)wsw(ywx<[x#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y7d<cX%p7[%jWOr<[rs=Os#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=TX%p7[Or<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=uX%p7[Or<[rs-ws#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d>gT%p7[O#o<[#o#p6Z#p#q<[#q#r6Z#r~<[9[>{T%p7[O#o'P#o#p?[#p#q'P#q#r?[#r~'P#O?gX%gS%jW%m`%v!bOr?[rs@Ssw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#O@]X%gS%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#OARX%gS%m`%v!bOr?[rsAnsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[!vAwV%gS%m`%v!bOwAnwx/Xx#OAn#O#PB^#P#oAn#o#pBd#p~An!vBaPO~An!vBiV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#pAn#p~0x#OCRPO~?[#OC]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p?[#p~8b9[DTZ%p7[%gS%m`%v!bOr'PrsDvsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9SERX%p7[%gS%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~Dv9SEsT%p7[O#oDv#o#pAn#p#qDv#q#rAn#r~Dv<bF_Z%p7[%jW%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bGaZ%p7[%gS%jW%sp%v!b%x#tOrGQrs)wswGQwxFSx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bHXT%p7[O#oGQ#o#pHh#p#qGQ#q#rHh#r~GQ&UHuX%gS%jW%sp%v!b%x#tOrHhrs3aswHhwxIbx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UIkX%jW%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UJaX%jW%sp%x#tOrHhrs3aswHhwxJ|x#OHh#O#PLd#P#oHh#o#pLj#p~Hh$nKVX%jW%sp%x#tOrJ|rs6oswJ|wxJ|x#OJ|#O#PKr#P#oJ|#o#pKx#p~J|$nKuPO~J|$nK}V%jWOr6Zrs6os#O6Z#O#P7b#P#o6Z#o#pJ|#p~6Z&ULgPO~Hh&ULqX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#pHh#p~8b<bMiZ%p7[%jW%sp%x#tOrGQrs)wswGQwxN[x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ:zNgZ%p7[%jW%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[:z! _T%p7[O#oN[#o#pJ|#p#qN[#q#rJ|#r~N[<r! sT%p7[O#o$}#o#p!!S#p#q$}#q#r!!S#r~$}&f!!cX%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!S&f!#RPO~!!S&f!#]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bMg!$]a%p7[%gS%jW$o1s%m`%sp%v!b%x#tOX$}XY!#xY[$}[]!#x]p$}pq!#xqr$}rs&Rsw$}wxFSx#O$}#O#P!%b#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg!%gX%p7[OY$}YZ!#xZ]$}]^!#x^#o$}#o#p!!S#p#q$}#q#r!!S#r~$}<u!&eb%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#T$}#T#U!(s#U#f$}#f#g!(s#g#h!(s#h#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!(QZjR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!)WZ!jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{!*Y_%tp%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!BPsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!+h_%p7[%gS%jW%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!,gsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!,tZ%p7[%gS%e,X%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDT!-p_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!;Rx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!.|_%p7[%gS%jW%e,X%v!bOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!-gx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!0WZ%p7[%gS%e,X%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT!1OT%p7[O#o!.o#o#p!1_#p#q!.o#q#r!1_#r~!.o-w!1j]%gS%jW%e,X%v!bOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!3Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!2lX%gS%e,X%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k-w!3`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!4Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!4`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!5Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_,a!5`X%jW%e,XOY!5XYZ6ZZ]!5X]^6Z^r!5Xrs!5{s#O!5X#O#P!6a#P~!5X,a!6QT%e,XOr6Zrs7Rs#O6Z#O#P7b#P~6Z,a!6dPO~!5X-w!6jPO~!1_-w!6v]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!1_#p~!7o,e!7xZ%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P~!7o,e!8rV%gS%e,XOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b,e!9`Z%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!:Rx#O!7o#O#P!:{#P~!7o,e!:YZ%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!5Xx#O!7o#O#P!:{#P~!7o,e!;OPO~!7oDT!;[_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!<Zx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oBm!<d]%p7[%jW%e,XOY!<ZYZ<[Z]!<Z]^<[^r!<Zrs!=]s#O!<Z#O#P!>P#P#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZBm!=dX%p7[%e,XOr<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[Bm!>UT%p7[O#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZDe!>jT%p7[O#o!+X#o#p!>y#p#q!+X#q#r!>y#r~!+X.X!?W]%gS%jW%e,X%m`%v!bOY!>yYZ?[Z]!>y]^?[^r!>yrs!@Psw!>ywx!3Xx#O!>y#O#P!@w#P#o!>y#o#p!@}#p~!>y.X!@[X%gS%e,X%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[.X!@zPO~!>y.X!AW]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!>y#p~!7oGZ!B^Z%p7[%gS%e,X%m`%v!bOr'Prs!CPsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PGZ!C`X%k#|%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvMg!D`_Q1s%p7[%gS%jW%m`%sp%v!b%x#tOY!C{YZ$}Z]!C{]^$}^r!C{rs!E_sw!C{wx#Hqx#O!C{#O#P$(i#P#o!C{#o#p$*{#p#q!C{#q#r$)]#r~!C{JP!El_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Eksw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkJP!Fz_Q1s%p7[%gS%jW%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs!E_sw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIo!HS_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#8wx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!I`_Q1s%p7[%gS%jW%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Jj_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Kisw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Kt_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Lssw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIg!MO]Q1s%p7[%gS%v!bOY!LsYZ+oZ]!Ls]^+o^w!Lswx!Mwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg!NO]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx!Nwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg# O]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx# wx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsHP#!OXQ1s%p7[OY# wYZ-wZ]# w]^-w^#o# w#o#p#!k#p#q# w#q#r#!k#r~# w1s#!pRQ1sOY#!kZ]#!k^~#!kIg##QXQ1s%p7[OY!LsYZ+oZ]!Ls]^+o^#o!Ls#o#p##m#p#q!Ls#q#r##m#r~!Ls3Z##vZQ1s%gS%v!bOY##mYZ.kZ]##m]^.k^w##mwx#$ix#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#$nZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#%ax#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#%fZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#!kx#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#&^TQ1sOY##mYZ.kZ]##m]^.k^~##m3Z#&tZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p##m#p~#'g1w#'nXQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P~#'g1w#(`XQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#({x#O#'g#O#P#)m#P~#'g1w#)QXQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#!kx#O#'g#O#P#)m#P~#'g1w#)rTQ1sOY#'gYZ0xZ]#'g]^0x^~#'gIo#*YXQ1s%p7[OY!IRYZ(yZ]!IR]^(y^#o!IR#o#p#*u#p#q!IR#q#r#*u#r~!IR3c#+Q]Q1s%gS%jW%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#,S]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#,{sw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#-U]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs##msw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#.U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#.}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#/U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#/}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u1{#0UXQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P~#/}1{#0vXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#1cs#O#/}#O#P#2T#P~#/}1{#1hXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#!ks#O#/}#O#P#2T#P~#/}1{#2YTQ1sOY#/}YZ6ZZ]#/}]^6Z^~#/}3c#2nTQ1sOY#*uYZ2kZ]#*u]^2k^~#*u3c#3W]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#*u#p~#4P2P#4YZQ1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5SZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#5usw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5|ZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#'gsw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#6vZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#7ix#O#4P#O#P#8c#P~#4P2P#7pZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#/}x#O#4P#O#P#8c#P~#4P2P#8hTQ1sOY#4PYZ8bZ]#4P]^8b^~#4PIo#9Q_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#:Px#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRHX#:Y]Q1s%p7[%jWOY#:PYZ<[Z]#:P]^<[^r#:Prs#;Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#;Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs#<Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#<Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs# ws#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#=YXQ1s%p7[OY#:PYZ<[Z]#:P]^<[^#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PJP#=|XQ1s%p7[OY!FkYZ'PZ]!Fk]^'P^#o!Fk#o#p#>i#p#q!Fk#q#r#>i#r~!Fk3s#>v]Q1s%gS%jW%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#?osw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#?z]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#@ssw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#AO]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#Awsw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3k#BSZQ1s%gS%m`%v!bOY#AwYZAnZ]#Aw]^An^w#Awwx#$ix#O#Aw#O#P#Bu#P#o#Aw#o#p#CZ#p~#Aw3k#BzTQ1sOY#AwYZAnZ]#Aw]^An^~#Aw3k#CbZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p#Aw#p~#'g3s#DYTQ1sOY#>iYZ?[Z]#>i]^?[^~#>i3s#Dr]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#>i#p~#4PJP#Ex_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Fwsw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIw#GU]Q1s%p7[%gS%m`%v!bOY#FwYZDvZ]#Fw]^Dv^w#Fwwx!Mwx#O#Fw#O#P#G}#P#o#Fw#o#p#CZ#p#q#Fw#q#r#Aw#r~#FwIw#HUXQ1s%p7[OY#FwYZDvZ]#Fw]^Dv^#o#Fw#o#p#Aw#p#q#Fw#q#r#Aw#r~#FwMV#IO_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$%]x#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#J`_Q1s%p7[%gS%jW%sp%v!b%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx#Hqx#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#KfXQ1s%p7[OY#I}YZGQZ]#I}]^GQ^#o#I}#o#p#LR#p#q#I}#q#r#LR#r~#I}6y#Lb]Q1s%gS%jW%sp%v!b%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#MZx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Mf]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#N_x#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Nj]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx$ cx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR5c$ n]Q1s%jW%sp%x#tOY$ cYZJ|Z]$ c]^J|^r$ crs#0qsw$ cwx$ cx#O$ c#O#P$!g#P#o$ c#o#p$!{#p~$ c5c$!lTQ1sOY$ cYZJ|Z]$ c]^J|^~$ c5c$#SZQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P#o#/}#o#p$ c#p~#/}6y$#zTQ1sOY#LRYZHhZ]#LR]^Hh^~#LR6y$$d]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#LR#p~#4PMV$%j_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$&ix#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}Ko$&v_Q1s%p7[%jW%sp%x#tOY$&iYZN[Z]$&i]^N[^r$&irs#;Rsw$&iwx$&ix#O$&i#O#P$'u#P#o$&i#o#p$!{#p#q$&i#q#r$ c#r~$&iKo$'|XQ1s%p7[OY$&iYZN[Z]$&i]^N[^#o$&i#o#p$ c#p#q$&i#q#r$ c#r~$&iMg$(pXQ1s%p7[OY!C{YZ$}Z]!C{]^$}^#o!C{#o#p$)]#p#q!C{#q#r$)]#r~!C{7Z$)n]Q1s%gS%jW%m`%sp%v!b%x#tOY$)]YZ!!SZ]$)]]^!!S^r$)]rs#?osw$)]wx#MZx#O$)]#O#P$*g#P#o$)]#o#p$*{#p~$)]7Z$*lTQ1sOY$)]YZ!!SZ]$)]]^!!S^~$)]7Z$+U]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p$)]#p~#4PGz$,b]$}Q%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$-nZ!s,W%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$.t]$wQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{$/|_%q`%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Jex#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk$1^_%p7[%gS%jW%e,X%sp%v!b%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Ewx#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{DT$2h_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Basw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$3t_%p7[%gS%jW%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$2]sw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$4|Z%p7[%jW%e,XOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT$5tT%p7[O#o$3g#o#p$6T#p#q$3g#q#r$6T#r~$3g-w$6`]%gS%jW%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$7Xsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$7b]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$8Zsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$8d]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$9]sw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-o$9fZ%gS%e,X%v!bOY$9]YZ.kZ]$9]]^.k^w$9]wx$:Xx#O$9]#O#P$:s#P#o$9]#o#p$:y#p~$9]-o$:^V%e,XOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k-o$:vPO~$9]-o$;QZ%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P#o$;s#o#p$9]#p~$;s,]$;zX%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P~$;s,]$<lT%e,XOw0xwx1px#O0x#O#P2P#P~0x,]$=OPO~$;s-w$=YX%jW%e,XOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k-w$=xPO~$6T-w$>U]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$6T#p~$>},e$?WZ%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@QZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$@ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@zZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$;ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$AtV%jW%e,XOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b,e$B^PO~$>}DT$Bl_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Cksw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gC{$Cv]%p7[%gS%e,X%v!bOY$CkYZ+oZ]$Ck]^+o^w$Ckwx$Dox#O$Ck#O#P$Ec#P#o$Ck#o#p$:y#p#q$Ck#q#r$9]#r~$CkC{$DvX%p7[%e,XOw+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+oC{$EhT%p7[O#o$Ck#o#p$9]#p#q$Ck#q#r$9]#r~$CkGk$FUZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$F|T%p7[O#o$0{#o#p$G]#p#q$0{#q#r$G]#r~$0{1_$Gl]%gS%jW%e,X%sp%v!b%x#tOY$G]YZHhZ]$G]]^Hh^r$G]rs$7Xsw$G]wx$Hex#O$G]#O#P$I]#P#o$G]#o#p$Ic#p~$G]1_$HpX%jW%e,X%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh1_$I`PO~$G]1_$Il]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$G]#p~$>}Gk$JrZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx$Kex#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$KtZ%h!f%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[G{$LzZf,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u$NQZ!OR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{% W_T,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSxz$}z{%!V{!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%!j]_R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%#v]$z,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%%SZwR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%&Y^${,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`!a%'U!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}B^%'iZ&S&j%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%(o_!dQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%)n!P!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%*P]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%*x!P#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%+]Z!m,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%,cg!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%,O#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%.]a%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx{$}{|%/b|}$}}!O%/b!O!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%/s]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%1Pc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%0l#S#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%2oZ!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%3u_$|R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!P$}!P!Q%4t!Q!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%5X]%OQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%6eu!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!d$}!d!e%<U!e!g$}!g!h%-z!h!l$}!l!m%2[!m!q$}!q!r%?O!r!z$}!z!{%Ar!{#O$}#O#P! n#P#R$}#R#S%:S#S#U$}#U#V%<U#V#X$}#X#Y%-z#Y#^$}#^#_%2[#_#c$}#c#d%?O#d#l$}#l#m%Ar#m#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%9Z]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%:gi!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%:S#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%<g`%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%=|`!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%?a_%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%@s_!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%BTc%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%Csc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%Ec]x1s%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`%F[!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%FoZ%WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%GuZ#^,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%H{_jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!^$}!^!_%Iz!_!`!'m!`!a!'m!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%J_]$xQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Kk]%V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Lw^jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`!a%Ms!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%NW]$yQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{& f]]Q#tP%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg&!tc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&Rsw$}wxFSx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&$fg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&,a#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&&[_%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs&'Zsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe&'hZ%p7[%gS%e,X%m`%v!bOr'Prs&(Zsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&(hX%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&)b_%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx&*ax#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk&*nZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx&+ax#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&+nZ%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&,vc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&.hg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&5u!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&5u#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&0^Z%p7[%gS%m`%v!b%r,XOr'Prs&1Psw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDe&1[Z%p7[%gS%m`%v!bOr'Prs&1}sw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&2[X%p7[%gS%w,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&3UZ%p7[%jW%sp%x#t%l,XOrGQrs)wswGQwx&3wx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk&4SZ%p7[%jW%sp%x#tOrGQrs)wswGQwx&4ux#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&5SZ%p7[%jW%u,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&6[c%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&7|k%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!h&!_!h!i&5u!i!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#U&!_#U#V&,a#V#Y&!_#Y#Z&5u#Z#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_G{&:UZ!V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&;[Z!WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz&<b]$vQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy&=dX%gS%jW!ZGmOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bGz&>d]$uQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&?nX![7_%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!SGy&@nZ%P,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}",tokenizers:[c,l,0,1,2,3,4,5,6,7,8,9,10,$],topRules:{Script:[0,3]},specialized:[{term:186,get:e=>f[e]||-1}],tokenPrec:6594});t.parser=g},925:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=1024;let r=0;const n=new WeakMap;class O{constructor({deserialize:e}={}){this.id=r++,this.deserialize=e||(()=>{throw new Error("This node type doesn't define a deserialize function")})}static string(){return new O({deserialize:e=>e})}static number(){return new O({deserialize:Number})}static flag(){return new O({deserialize:()=>!0})}set(e,t){return e[this.id]=t,e}add(e){return"function"!=typeof e&&(e=a.match(e)),t=>{let s=e(t);return void 0===s?null:[this,s]}}}O.closedBy=new O({deserialize:e=>e.split(" ")}),O.openedBy=new O({deserialize:e=>e.split(" ")}),O.group=new O({deserialize:e=>e.split(" ")});const i=Object.create(null);class a{constructor(e,t,s,r=0){this.name=e,this.props=t,this.id=s,this.flags=r}static define(e){let t=e.props&&e.props.length?Object.create(null):i,s=(e.top?1:0)|(e.skipped?2:0)|(e.error?4:0)|(null==e.name?8:0),r=new a(e.name||"",t,e.id,s);if(e.props)for(let s of e.props)Array.isArray(s)||(s=s(r)),s&&s[0].set(t,s[1]);return r}prop(e){return this.props[e.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(e){if("string"==typeof e){if(this.name==e)return!0;let t=this.prop(O.group);return!!t&&t.indexOf(e)>-1}return this.id==e}static match(e){let t=Object.create(null);for(let s in e)for(let r of s.split(" "))t[r]=e[s];return e=>{for(let s=e.prop(O.group),r=-1;r<(s?s.length:0);r++){let n=t[r<0?e.name:s[r]];if(n)return n}}}}a.none=new a("",Object.create(null),0,8);class o{constructor(e){this.types=e;for(let t=0;t<e.length;t++)if(e[t].id!=t)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...e){let t=[];for(let s of this.types){let r=null;for(let t of e){let e=t(s);e&&(r||(r=Object.assign({},s.props)),e[0].set(r,e[1]))}t.push(r?new a(s.name,r,s.id,s.flags):s)}return new o(t)}}class ${constructor(e,t,s,r){this.type=e,this.children=t,this.positions=s,this.length=r}toString(){let e=this.children.map((e=>e.toString())).join();return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(e.length?"("+e+")":""):e}cursor(e,t=0){let s=null!=e&&n.get(this)||this.topNode,r=new g(s);return null!=e&&(r.moveTo(e,t),n.set(this,r._tree)),r}fullCursor(){return new g(this.topNode,!0)}get topNode(){return new h(this,0,0,null)}resolve(e,t=0){return this.cursor(e,t).node}iterate(e){let{enter:t,leave:s,from:r=0,to:n=this.length}=e;for(let e=this.cursor();;){let O=!1;if(e.from<=n&&e.to>=r&&(e.type.isAnonymous||!1!==t(e.type,e.from,e.to))){if(e.firstChild())continue;e.type.isAnonymous||(O=!0)}for(;O&&s&&s(e.type,e.from,e.to),O=e.type.isAnonymous,!e.nextSibling();){if(!e.parent())return;O=!0}}}balance(e=s){return this.children.length<=x?this:m(this.type,a.none,this.children,this.positions,0,this.children.length,0,e,this.length,0)}static build(e){return function(e){var t;let{buffer:r,nodeSet:n,topID:O=0,maxBufferLength:i=s,reused:o=[],minRepeatType:h=n.types.length}=e,u=Array.isArray(r)?new P(r,r.length):r,c=n.types,f=0;function g(e,t,s,r,O){let{id:P,start:Q,end:w,size:S}=u,b=Q-e;if(S<0)return-1==S?(s.push(o[P]),r.push(b)):f=P,void u.next();let I,y,W=c[P];if(w-Q<=i&&(y=function(e,t){let s=u.fork(),r=0,n=0,O=0,a=s.end-i,o={size:0,start:0,skip:0};e:for(let i=s.pos-e;s.pos>i;){if(s.id==t){o.size=r,o.start=n,o.skip=O,O+=4,r+=4,s.next();continue}let e=s.size,$=s.pos-e;if(e<0||$<i||s.start<a)break;let l=s.id>=h?4:0,p=s.start;for(s.next();s.pos>$;){if(s.size<0)break e;s.id>=h&&(l+=4),s.next()}n=p,r+=e,O+=l}return(t<0||r==e)&&(o.size=r,o.start=n,o.skip=O),o.size>4?o:void 0}(u.pos-t,O))){let t=new Uint16Array(y.size-y.skip),s=u.pos-y.size,r=t.length;for(;u.pos>s;)r=d(y.start,t,r,O);I=new p(t,w-y.start,n,O<0?a.none:c[O]),b=y.start-e}else{let e=u.pos-S;u.next();let t=[],s=[],r=P>=h?P:-1;for(;u.pos>e;)u.id==r?u.next():g(Q,e,t,s,r);t.reverse(),s.reverse(),I=r>-1&&t.length>x?m(W,W,t,s,0,t.length,0,i,w-Q,f):l(new $(W,t,s,w-Q),f)}s.push(I),r.push(b)}function d(e,t,s,r){let{id:n,start:O,end:i,size:a}=u;if(u.next(),n==r)return s;let o=s;if(a>4){let n=u.pos-(a-4);for(;u.pos>n;)s=d(e,t,s,r)}return n<h&&(t[--s]=o,t[--s]=i-e,t[--s]=O-e,t[--s]=n),s}let Q=[],w=[];for(;u.pos>0;)g(e.start||0,0,Q,w,-1);let S=null!==(t=e.length)&&void 0!==t?t:Q.length?w[0]+Q[0].length:0;return new $(c[O],Q.reverse(),w.reverse(),S)}(e)}}function l(e,t){return t&&(e.contextHash=t),e}$.empty=new $(a.none,[],[],0);class p{constructor(e,t,s,r=a.none){this.buffer=e,this.length=t,this.set=s,this.type=r}toString(){let e=[];for(let t=0;t<this.buffer.length;)e.push(this.childString(t)),t=this.buffer[t+3];return e.join(",")}childString(e){let t=this.buffer[e],s=this.buffer[e+3],r=this.set.types[t],n=r.name;if(/\W/.test(n)&&!r.isError&&(n=JSON.stringify(n)),s==(e+=4))return n;let O=[];for(;e<s;)O.push(this.childString(e)),e=this.buffer[e+3];return n+"("+O.join(",")+")"}findChild(e,t,s,r){let{buffer:n}=this,O=-1;for(let i=e;i!=t;i=n[i+3])if(-1e8!=r){let e=n[i+1],t=n[i+2];if(s>0){if(t>r&&(O=i),t>r)break}else if(e<r&&(O=i),t>=r)break}else if(O=i,s>0)break;return O}}class h{constructor(e,t,s,r){this.node=e,this.from=t,this.index=s,this._parent=r}get type(){return this.node.type}get name(){return this.node.type.name}get to(){return this.from+this.node.length}nextChild(e,t,s,r=!1){for(let n=this;;){for(let{children:O,positions:i}=n.node,a=t>0?O.length:-1;e!=a;e+=t){let a=O[e],o=i[e]+n.from;if(-1e8==s||!(t<0?o>=s:o+a.length<=s))if(a instanceof p){let r=a.findChild(0,a.buffer.length,t,-1e8==s?-1e8:s-o);if(r>-1)return new f(new c(n,a,e,o),null,r)}else if(r||!a.type.isAnonymous||d(a)){let O=new h(a,o,e,n);return r||!O.type.isAnonymous?O:O.nextChild(t<0?a.children.length-1:0,t,s)}}if(r||!n.type.isAnonymous)return null;if(e=n.index+t,n=n._parent,!n)return null}}get firstChild(){return this.nextChild(0,1,-1e8)}get lastChild(){return this.nextChild(this.node.children.length-1,-1,-1e8)}childAfter(e){return this.nextChild(0,1,e)}childBefore(e){return this.nextChild(this.node.children.length-1,-1,e)}nextSignificantParent(){let e=this;for(;e.type.isAnonymous&&e._parent;)e=e._parent;return e}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent?this._parent.nextChild(this.index+1,1,-1):null}get prevSibling(){return this._parent?this._parent.nextChild(this.index-1,-1,-1):null}get cursor(){return new g(this)}resolve(e,t=0){return this.cursor.moveTo(e,t).node}getChild(e,t=null,s=null){let r=u(this,e,t,s);return r.length?r[0]:null}getChildren(e,t=null,s=null){return u(this,e,t,s)}toString(){return this.node.toString()}}function u(e,t,s,r){let n=e.cursor,O=[];if(!n.firstChild())return O;if(null!=s)for(;!n.type.is(s);)if(!n.nextSibling())return O;for(;;){if(null!=r&&n.type.is(r))return O;if(n.type.is(t)&&O.push(n.node),!n.nextSibling())return null==r?O:[]}}class c{constructor(e,t,s,r){this.parent=e,this.buffer=t,this.index=s,this.start=r}}class f{constructor(e,t,s){this.context=e,this._parent=t,this.index=s,this.type=e.buffer.set.types[e.buffer.buffer[s]]}get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}child(e,t){let{buffer:s}=this.context,r=s.findChild(this.index+4,s.buffer[this.index+3],e,-1e8==t?-1e8:t-this.context.start);return r<0?null:new f(this.context,this,r)}get firstChild(){return this.child(1,-1e8)}get lastChild(){return this.child(-1,-1e8)}childAfter(e){return this.child(1,e)}childBefore(e){return this.child(-1,e)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(e){return this._parent?null:this.context.parent.nextChild(this.context.index+e,e,-1)}get nextSibling(){let{buffer:e}=this.context,t=e.buffer[this.index+3];return t<(this._parent?e.buffer[this._parent.index+3]:e.buffer.length)?new f(this.context,this._parent,t):this.externalSibling(1)}get prevSibling(){let{buffer:e}=this.context,t=this._parent?this._parent.index+4:0;return this.index==t?this.externalSibling(-1):new f(this.context,this._parent,e.findChild(t,this.index,-1,-1e8))}get cursor(){return new g(this)}resolve(e,t=0){return this.cursor.moveTo(e,t).node}toString(){return this.context.buffer.childString(this.index)}getChild(e,t=null,s=null){let r=u(this,e,t,s);return r.length?r[0]:null}getChildren(e,t=null,s=null){return u(this,e,t,s)}}class g{constructor(e,t=!1){if(this.full=t,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,e instanceof h)this.yieldNode(e);else{this._tree=e.context.parent,this.buffer=e.context;for(let t=e._parent;t;t=t._parent)this.stack.unshift(t.index);this.bufferNode=e,this.yieldBuf(e.index)}}get name(){return this.type.name}yieldNode(e){return!!e&&(this._tree=e,this.type=e.type,this.from=e.from,this.to=e.to,!0)}yieldBuf(e,t){this.index=e;let{start:s,buffer:r}=this.buffer;return this.type=t||r.set.types[r.buffer[e]],this.from=s+r.buffer[e+1],this.to=s+r.buffer[e+2],!0}yield(e){return!!e&&(e instanceof h?(this.buffer=null,this.yieldNode(e)):(this.buffer=e.context,this.yieldBuf(e.index,e.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enter(e,t){if(!this.buffer)return this.yield(this._tree.nextChild(e<0?this._tree.node.children.length-1:0,e,t,this.full));let{buffer:s}=this.buffer,r=s.findChild(this.index+4,s.buffer[this.index+3],e,-1e8==t?-1e8:t-this.buffer.start);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enter(1,-1e8)}lastChild(){return this.enter(-1,-1e8)}childAfter(e){return this.enter(1,e)}childBefore(e){return this.enter(-1,e)}parent(){if(!this.buffer)return this.yieldNode(this.full?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let e=this.full?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(e)}sibling(e){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree._parent.nextChild(this._tree.index+e,e,-1e8,this.full));let{buffer:t}=this.buffer,s=this.stack.length-1;if(e<0){let e=s<0?0:this.stack[s]+4;if(this.index!=e)return this.yieldBuf(t.findChild(e,this.index,-1,-1e8))}else{let e=t.buffer[this.index+3];if(e<(s<0?t.buffer.length:t.buffer[this.stack[s]+3]))return this.yieldBuf(e)}return s<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+e,e,-1e8,this.full))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(e){let t,s,{buffer:r}=this;if(r){if(e>0){if(this.index<r.buffer.buffer.length)return!1}else for(let e=0;e<this.index;e++)if(r.buffer.buffer[e+3]<this.index)return!1;({index:t,parent:s}=r)}else({index:t,_parent:s}=this._tree);for(;s;({index:t,_parent:s}=s))for(let r=t+e,n=e<0?-1:s.node.children.length;r!=n;r+=e){let e=s.node.children[r];if(this.full||!e.type.isAnonymous||e instanceof p||d(e))return!1}return!0}move(e){if(this.enter(e,-1e8))return!0;for(;;){if(this.sibling(e))return!0;if(this.atLastNode(e)||!this.parent())return!1}}next(){return this.move(1)}prev(){return this.move(-1)}moveTo(e,t=0){for(;(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e))&&this.parent(););for(;t<0?this.childBefore(e):this.childAfter(e);)if(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e)){this.parent();break}return this}get node(){if(!this.buffer)return this._tree;let e=this.bufferNode,t=null,s=0;if(e&&e.context==this.buffer)e:for(let r=this.index,n=this.stack.length;n>=0;){for(let O=e;O;O=O._parent)if(O.index==r){if(r==this.index)return O;t=O,s=n+1;break e}r=this.stack[--n]}for(let e=s;e<this.stack.length;e++)t=new f(this.buffer,t,this.stack[e]);return this.bufferNode=new f(this.buffer,t,this.index)}get tree(){return this.buffer?null:this._tree.node}}function d(e){return e.children.some((e=>!e.type.isAnonymous||e instanceof p||d(e)))}class P{constructor(e,t){this.buffer=e,this.index=t}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new P(this.buffer,this.index)}}const x=8;function m(e,t,s,r,n,O,i,o,p,h){let u=[],c=[];if(p<=o)for(let e=n;e<O;e++)u.push(s[e]),c.push(r[e]-i);else{let e=Math.max(o,Math.ceil(1.5*p/x));for(let p=n;p<O;){let n=p,f=r[p];for(p++;p<O&&!(r[p]+s[p].length-f>e);p++);if(p==n+1){let r=s[n];if(r instanceof $&&r.type==t&&r.length>e<<1){for(let e=0;e<r.children.length;e++)u.push(r.children[e]),c.push(r.positions[e]+f-i);continue}u.push(r)}else if(p==n+1)u.push(s[n]);else{let e=m(t,t,s,r,n,p,f,o,r[p-1]+s[p-1].length-f,h);t==a.none||Q(e.children,t)||(e=l(new $(a.none,e.children,e.positions,e.length),h)),u.push(e)}c.push(f-i)}}return l(new $(e,u,c,p),h)}function Q(e,t){for(let s of e)if(s.type==t)return!0;return!1}class w{constructor(e,t,s,r,n){this.from=e,this.to=t,this.tree=s,this.offset=r,this.open=n}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static applyChanges(e,t,s=128){if(!t.length)return e;let r=[],n=1,O=e.length?e[0]:null,i=0,a=0,o=0;for(;;){let $=i<t.length?t[i++]:null,l=$?$.fromA:1e9;if(l-a>=s)for(;O&&O.from<l;){let t=O;if(a>=t.from||l<=t.to||o){let e=Math.max(t.from,a)-o,s=Math.min(t.to,l)-o;t=e>=s?null:new w(e,s,t.tree,t.offset+o,(i>0?1:0)|($?2:0))}if(t&&r.push(t),O.to>l)break;O=n<e.length?e[n++]:null}if(!$)break;a=$.toA,o=$.toA-$.toB}return r}static addTree(e,t=[],s=!1){let r=[new w(0,e.length,e,0,s?2:0)];for(let s of t)s.to>e.length&&r.push(s);return r}}class S{constructor(e,t=e.length){this.string=e,this.length=t}get(e){return e<0||e>=this.length?-1:this.string.charCodeAt(e)}lineAfter(e){if(e<0)return"";let t=this.string.indexOf("\n",e);return this.string.slice(e,t<0?this.length:Math.min(t,this.length))}read(e,t){return this.string.slice(e,Math.min(this.length,t))}clip(e){return new S(this.string,e)}}t.DefaultBufferLength=s,t.NodeProp=O,t.NodeSet=o,t.NodeType=a,t.Tree=$,t.TreeBuffer=p,t.TreeCursor=g,t.TreeFragment=w,t.stringInput=function(e){return new S(e)}},774:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});var r,n=s(925);class O{constructor(e,t,s,r,n,O,i,a,o,$){this.p=e,this.stack=t,this.state=s,this.reducePos=r,this.pos=n,this.score=O,this.buffer=i,this.bufferBase=a,this.curContext=o,this.parent=$}toString(){return`[${this.stack.filter(((e,t)=>t%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(e,t,s=0){let r=e.parser.context;return new O(e,[],t,s,s,0,[],0,r?new i(r,r.start):null,null)}get context(){return this.curContext?this.curContext.context:null}pushState(e,t){this.stack.push(this.state,t,this.bufferBase+this.buffer.length),this.state=e}reduce(e){let t=e>>19,s=65535&e,{parser:r}=this.p,n=r.dynamicPrecedence(s);if(n&&(this.score+=n),0==t)return s<r.minRepeatTerm&&this.storeNode(s,this.reducePos,this.reducePos,4,!0),this.pushState(r.getGoto(this.state,s,!0),this.reducePos),void this.reduceContext(s);let O=this.stack.length-3*(t-1)-(262144&e?6:0),i=this.stack[O-2],a=this.stack[O-1],o=this.bufferBase+this.buffer.length-a;if(s<r.minRepeatTerm||131072&e){let e=r.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(s,i,e,o+4,!0)}if(262144&e)this.state=this.stack[O];else{let e=this.stack[O-3];this.state=r.getGoto(e,s,!0)}for(;this.stack.length>O;)this.stack.pop();this.reduceContext(s)}storeNode(e,t,s,r=4,n=!1){if(0==e){let e=this,r=this.buffer.length;if(0==r&&e.parent&&(r=e.bufferBase-e.parent.bufferBase,e=e.parent),r>0&&0==e.buffer[r-4]&&e.buffer[r-1]>-1){if(t==s)return;if(e.buffer[r-2]>=t)return void(e.buffer[r-2]=s)}}if(n&&this.pos!=s){let n=this.buffer.length;if(n>0&&0!=this.buffer[n-4])for(;n>0&&this.buffer[n-2]>s;)this.buffer[n]=this.buffer[n-4],this.buffer[n+1]=this.buffer[n-3],this.buffer[n+2]=this.buffer[n-2],this.buffer[n+3]=this.buffer[n-1],n-=4,r>4&&(r-=4);this.buffer[n]=e,this.buffer[n+1]=t,this.buffer[n+2]=s,this.buffer[n+3]=r}else this.buffer.push(e,t,s,r)}shift(e,t,s){if(131072&e)this.pushState(65535&e,this.pos);else if(0==(262144&e)){let r=this.pos,n=e,{parser:O}=this.p;(s>this.pos||t<=O.maxNode)&&(this.pos=s,O.stateFlag(n,1)||(this.reducePos=s)),this.pushState(n,r),t<=O.maxNode&&this.buffer.push(t,r,s,4),this.shiftContext(t)}else t<=this.p.parser.maxNode&&this.buffer.push(t,this.pos,s,4),this.pos=s}apply(e,t,s){65536&e?this.reduce(e):this.shift(e,t,s)}useNode(e,t){let s=this.p.reused.length-1;(s<0||this.p.reused[s]!=e)&&(this.p.reused.push(e),s++);let r=this.pos;this.reducePos=this.pos=r+e.length,this.pushState(t,r),this.buffer.push(s,r,this.reducePos,-1),this.curContext&&this.updateContext(this.curContext.tracker.reuse(this.curContext.context,e,this.p.input,this))}split(){let e=this,t=e.buffer.length;for(;t>0&&e.buffer[t-2]>e.reducePos;)t-=4;let s=e.buffer.slice(t),r=e.bufferBase+t;for(;e&&r==e.bufferBase;)e=e.parent;return new O(this.p,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,s,r,this.curContext,e)}recoverByDelete(e,t){let s=e<=this.p.parser.maxNode;s&&this.storeNode(e,this.pos,t),this.storeNode(0,this.pos,t,s?8:4),this.pos=this.reducePos=t,this.score-=200}canShift(e){for(let t=new a(this);;){let s=this.p.parser.stateSlot(t.top,4)||this.p.parser.hasAction(t.top,e);if(0==(65536&s))return!0;if(0==s)return!1;t.reduce(s)}}get ruleStart(){for(let e=this.state,t=this.stack.length;;){let s=this.p.parser.stateSlot(e,5);if(!(65536&s))return 0;if(t-=3*(s>>19),(65535&s)<this.p.parser.minRepeatTerm)return this.stack[t+1];e=this.stack[t]}}startOf(e,t){let s=this.state,r=this.stack.length,{parser:n}=this.p;for(;;){let O=n.stateSlot(s,5),i=O>>19,a=65535&O;if(e.indexOf(a)>-1){let e=r-3*(O>>19),s=this.stack[e+1];if(null==t||t>s)return s}if(0==r)return null;0==i?(r-=3,s=this.stack[r]):(r-=3*(i-1),s=n.getGoto(this.stack[r-3],a,!0))}}recoverByInsert(e){if(this.stack.length>=300)return[];let t=this.p.parser.nextStates(this.state);if(t.length>8||this.stack.length>=120){let s=[];for(let r,n=0;n<t.length;n+=2)(r=t[n+1])!=this.state&&this.p.parser.hasAction(r,e)&&s.push(t[n],r);if(this.stack.length<120)for(let e=0;s.length<8&&e<t.length;e+=2){let r=t[e+1];s.some(((e,t)=>1&t&&e==r))||s.push(t[e],r)}t=s}let s=[];for(let e=0;e<t.length&&s.length<4;e+=2){let r=t[e+1];if(r==this.state)continue;let n=this.split();n.storeNode(0,n.pos,n.pos,4,!0),n.pushState(r,this.pos),n.shiftContext(t[e]),n.score-=200,s.push(n)}return s}forceReduce(){let e=this.p.parser.stateSlot(this.state,5);return 0!=(65536&e)&&(this.p.parser.validAction(this.state,e)||(this.storeNode(0,this.reducePos,this.reducePos,4,!0),this.score-=100),this.reduce(e),!0)}forceAll(){for(;!this.p.parser.stateFlag(this.state,2)&&this.forceReduce(););return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:e}=this.p;return 65535==e.data[e.stateSlot(this.state,1)]&&!e.stateSlot(this.state,4)}restart(){this.state=this.stack[0],this.stack.length=0}sameState(e){if(this.state!=e.state||this.stack.length!=e.stack.length)return!1;for(let t=0;t<this.stack.length;t+=3)if(this.stack[t]!=e.stack[t])return!1;return!0}get parser(){return this.p.parser}dialectEnabled(e){return this.p.parser.dialect.flags[e]}shiftContext(e){this.curContext&&this.updateContext(this.curContext.tracker.shift(this.curContext.context,e,this.p.input,this))}reduceContext(e){this.curContext&&this.updateContext(this.curContext.tracker.reduce(this.curContext.context,e,this.p.input,this))}emitContext(){let e=this.curContext;if(!e.tracker.strict)return;let t=this.buffer.length-1;(t<0||-2!=this.buffer[t])&&this.buffer.push(e.hash,this.reducePos,this.reducePos,-2)}updateContext(e){if(e!=this.curContext.context){let t=new i(this.curContext.tracker,e);t.hash!=this.curContext.hash&&this.emitContext(),this.curContext=t}}}class i{constructor(e,t){this.tracker=e,this.context=t,this.hash=e.hash(t)}}!function(e){e[e.Token=200]="Token",e[e.Reduce=100]="Reduce",e[e.MaxNext=4]="MaxNext",e[e.MaxInsertStackDepth=300]="MaxInsertStackDepth",e[e.DampenInsertStackDepth=120]="DampenInsertStackDepth"}(r||(r={}));class a{constructor(e){this.stack=e,this.top=e.state,this.rest=e.stack,this.offset=this.rest.length}reduce(e){let t=65535&e,s=e>>19;0==s?(this.rest==this.stack.stack&&(this.rest=this.rest.slice()),this.rest.push(this.top,0,0),this.offset+=3):this.offset-=3*(s-1);let r=this.stack.p.parser.getGoto(this.rest[this.offset-3],t,!0);this.top=r}}class o{constructor(e,t,s){this.stack=e,this.pos=t,this.index=s,this.buffer=e.buffer,0==this.index&&this.maybeNext()}static create(e){return new o(e,e.bufferBase+e.buffer.length,e.buffer.length)}maybeNext(){let e=this.stack.parent;null!=e&&(this.index=this.stack.bufferBase-e.bufferBase,this.stack=e,this.buffer=e.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new o(this.stack,this.pos,this.index)}}class ${constructor(){this.start=-1,this.value=-1,this.end=-1}accept(e,t){this.value=e,this.end=t}}class l{constructor(e,t){this.data=e,this.id=t}token(e,t,s){!function(e,t,s,r,n){let O=0,i=1<<n,a=r.p.parser.dialect;e:for(let n=s.start;0!=(i&e[O]);){let o=e[O+1];for(let t=O+3;t<o;t+=2)if((e[t+1]&i)>0){let O=e[t];if(a.allows(O)&&(-1==s.value||s.value==O||r.p.parser.overrides(O,s.value))){s.accept(O,n);break}}let $=t.get(n++);for(let t=0,s=e[O+2];t<s;){let r=t+s>>1,n=o+r+(r<<1),i=e[n],a=e[n+1];if($<i)s=r;else{if(!($>=a)){O=e[n+2];continue e}t=r+1}}break}}(this.data,e,t,s,this.id)}}function p(e,t=Uint16Array){if("string"!=typeof e)return e;let s=null;for(let r=0,n=0;r<e.length;){let O=0;for(;;){let t=e.charCodeAt(r++),s=!1;if(126==t){O=65535;break}t>=92&&t--,t>=34&&t--;let n=t-32;if(n>=46&&(n-=46,s=!0),O+=n,s)break;O*=46}s?s[n++]=O:s=new t(O)}return s}l.prototype.contextual=l.prototype.fallback=l.prototype.extend=!1;const h="undefined"!=typeof process&&/\bparse\b/.test(process.env.LOG);let u=null;function c(e,t,s){let r=e.cursor(t);for(;;)if(!(s<0?r.childBefore(t):r.childAfter(t)))for(;;){if((s<0?r.to<t:r.from>t)&&!r.type.isError)return s<0?Math.max(0,Math.min(r.to-1,t-5)):Math.min(e.length,Math.max(r.from+1,t+5));if(s<0?r.prevSibling():r.nextSibling())break;if(!r.parent())return s<0?0:e.length}}class f{constructor(e){this.fragments=e,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let e=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(e){for(this.safeFrom=e.openStart?c(e.tree,e.from+e.offset,1)-e.offset:e.from,this.safeTo=e.openEnd?c(e.tree,e.to+e.offset,-1)-e.offset:e.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(e.tree),this.start.push(-e.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(e){if(e<this.nextStart)return null;for(;this.fragment&&this.safeTo<=e;)this.nextFragment();if(!this.fragment)return null;for(;;){let t=this.trees.length-1;if(t<0)return this.nextFragment(),null;let s=this.trees[t],r=this.index[t];if(r==s.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let O=s.children[r],i=this.start[t]+s.positions[r];if(i>e)return this.nextStart=i,null;if(i==e&&i+O.length<=this.safeTo)return i==e&&i>=this.safeFrom?O:null;O instanceof n.TreeBuffer?(this.index[t]++,this.nextStart=i+O.length):(this.index[t]++,i+O.length>=e&&(this.trees.push(O),this.start.push(i),this.index.push(0)))}}}class g extends ${constructor(){super(...arguments),this.extended=-1,this.mask=0,this.context=0}clear(e){this.start=e,this.value=this.extended=-1}}const d=new $;class P{constructor(e){this.tokens=[],this.mainToken=d,this.actions=[],this.tokens=e.tokenizers.map((e=>new g))}getActions(e,t){let s=0,r=null,{parser:n}=e.p,{tokenizers:O}=n,i=n.stateSlot(e.state,3),a=e.curContext?e.curContext.hash:0;for(let n=0;n<O.length;n++){if(0==(1<<n&i))continue;let o=O[n],$=this.tokens[n];if((!r||o.fallback)&&((o.contextual||$.start!=e.pos||$.mask!=i||$.context!=a)&&(this.updateCachedToken($,o,e,t),$.mask=i,$.context=a),0!=$.value)){let t=s;if($.extended>-1&&(s=this.addActions(e,$.extended,$.end,s)),s=this.addActions(e,$.value,$.end,s),!o.extend&&(r=$,s>t))break}}for(;this.actions.length>s;)this.actions.pop();return r||(r=d,r.start=e.pos,e.pos==t.length?r.accept(e.p.parser.eofTerm,e.pos):r.accept(0,e.pos+1)),this.mainToken=r,this.actions}updateCachedToken(e,t,s,r){if(e.clear(s.pos),t.token(r,e,s),e.value>-1){let{parser:t}=s.p;for(let n=0;n<t.specialized.length;n++)if(t.specialized[n]==e.value){let O=t.specializers[n](r.read(e.start,e.end),s);if(O>=0&&s.p.parser.dialect.allows(O>>1)){0==(1&O)?e.value=O>>1:e.extended=O>>1;break}}}else s.pos==r.length?e.accept(s.p.parser.eofTerm,s.pos):e.accept(0,s.pos+1)}putAction(e,t,s,r){for(let t=0;t<r;t+=3)if(this.actions[t]==e)return r;return this.actions[r++]=e,this.actions[r++]=t,this.actions[r++]=s,r}addActions(e,t,s,r){let{state:n}=e,{parser:O}=e.p,{data:i}=O;for(let e=0;e<2;e++)for(let a=O.stateSlot(n,e?2:1);;a+=3){if(65535==i[a]){if(1!=i[a+1]){0==r&&2==i[a+1]&&(r=this.putAction(I(i,a+1),t,s,r));break}a=I(i,a+2)}i[a]==t&&(r=this.putAction(I(i,a+1),t,s,r))}return r}}var x;!function(e){e[e.Distance=5]="Distance",e[e.MaxRemainingPerStep=3]="MaxRemainingPerStep",e[e.MinBufferLengthPrune=200]="MinBufferLengthPrune",e[e.ForceReduceLimit=10]="ForceReduceLimit"}(x||(x={}));class m{constructor(e,t,s,r){this.parser=e,this.input=t,this.startPos=s,this.context=r,this.pos=0,this.recovering=0,this.nextStackID=9812,this.nested=null,this.nestEnd=0,this.nestWrap=null,this.reused=[],this.tokens=new P(e),this.topTerm=e.top[1],this.stacks=[O.start(this,e.top[0],this.startPos)];let n=null==r?void 0:r.fragments;this.fragments=n&&n.length?new f(n):null}advance(){if(this.nested){let e=this.nested.advance();return this.pos=this.nested.pos,e&&(this.finishNested(this.stacks[0],e),this.nested=null),null}let e,t,s,r=this.stacks,n=this.pos,O=this.stacks=[];for(let i=0;i<r.length;i++){let a,o=r[i];for(;;){if(o.pos>n)O.push(o);else if(a=this.checkNest(o))(!s||s.stack.score<o.score)&&(s=a);else{if(this.advanceStack(o,O,r))continue;{e||(e=[],t=[]),e.push(o);let s=this.tokens.mainToken;t.push(s.value,s.end)}}break}}if(s)return this.startNested(s),null;if(!O.length){let t=e&&function(e){let t=null;for(let s of e)s.pos==s.p.input.length&&s.p.parser.stateFlag(s.state,2)&&(!t||t.score<s.score)&&(t=s);return t}(e);if(t)return this.stackToTree(t);if(this.parser.strict)throw h&&e&&console.log("Stuck with token "+this.parser.getName(this.tokens.mainToken.value)),new SyntaxError("No parse at "+n);this.recovering||(this.recovering=5)}if(this.recovering&&e){let s=this.runRecovery(e,t,O);if(s)return this.stackToTree(s.forceAll())}if(this.recovering){let e=1==this.recovering?1:3*this.recovering;if(O.length>e)for(O.sort(((e,t)=>t.score-e.score));O.length>e;)O.pop();O.some((e=>e.reducePos>n))&&this.recovering--}else if(O.length>1)e:for(let e=0;e<O.length-1;e++){let t=O[e];for(let s=e+1;s<O.length;s++){let r=O[s];if(t.sameState(r)||t.buffer.length>200&&r.buffer.length>200){if(!((t.score-r.score||t.buffer.length-r.buffer.length)>0)){O.splice(e--,1);continue e}O.splice(s--,1)}}}this.pos=O[0].pos;for(let e=1;e<O.length;e++)O[e].pos<this.pos&&(this.pos=O[e].pos);return null}advanceStack(e,t,s){let r=e.pos,{input:O,parser:i}=this,a=h?this.stackID(e)+" -> ":"";if(this.fragments){let t=e.curContext&&e.curContext.tracker.strict,s=t?e.curContext.hash:0;for(let O=this.fragments.nodeAt(r);O;){let r=this.parser.nodeSet.types[O.type.id]==O.type?i.getGoto(e.state,O.type.id):-1;if(r>-1&&O.length&&(!t||(O.contextHash||0)==s))return e.useNode(O,r),h&&console.log(a+this.stackID(e)+` (via reuse of ${i.getName(O.type.id)})`),!0;if(!(O instanceof n.Tree)||0==O.children.length||O.positions[0]>0)break;let o=O.children[0];if(!(o instanceof n.Tree))break;O=o}}let o=i.stateSlot(e.state,4);if(o>0)return e.reduce(o),h&&console.log(a+this.stackID(e)+` (via always-reduce ${i.getName(65535&o)})`),!0;let $=this.tokens.getActions(e,O);for(let n=0;n<$.length;){let O=$[n++],o=$[n++],l=$[n++],p=n==$.length||!s,u=p?e:e.split();if(u.apply(O,o,l),h&&console.log(a+this.stackID(u)+` (via ${0==(65536&O)?"shift":`reduce of ${i.getName(65535&O)}`} for ${i.getName(o)} @ ${r}${u==e?"":", split"})`),p)return!0;u.pos>r?t.push(u):s.push(u)}return!1}advanceFully(e,t){let s=e.pos;for(;;){let r=this.checkNest(e);if(r)return r;if(!this.advanceStack(e,null,null))return!1;if(e.pos>s)return Q(e,t),!0}}runRecovery(e,t,s){let r,n=null,O=!1;for(let i=0;i<e.length;i++){let a=e[i],o=t[i<<1],$=t[1+(i<<1)],l=h?this.stackID(a)+" -> ":"";if(a.deadEnd){if(O)continue;O=!0,a.restart(),h&&console.log(l+this.stackID(a)+" (restarted)");let e=this.advanceFully(a,s);if(e){!0!==e&&(r=e);continue}}let p=a.split(),u=l;for(let e=0;p.forceReduce()&&e<10;e++){h&&console.log(u+this.stackID(p)+" (via force-reduce)");let e=this.advanceFully(p,s);if(e){!0!==e&&(r=e);break}h&&(u=this.stackID(p)+" -> ")}for(let e of a.recoverByInsert(o))h&&console.log(l+this.stackID(e)+" (via recover-insert)"),this.advanceFully(e,s);this.input.length>a.pos?($==a.pos&&($++,o=0),a.recoverByDelete(o,$),h&&console.log(l+this.stackID(a)+` (via recover-delete ${this.parser.getName(o)})`),Q(a,s)):(!n||n.score<a.score)&&(n=a)}if(n)return n;if(r)for(let e of this.stacks)if(e.score>r.stack.score){r=void 0;break}return r&&this.startNested(r),null}forceFinish(){let e=this.stacks[0].split();return this.nested&&this.finishNested(e,this.nested.forceFinish()),this.stackToTree(e.forceAll())}stackToTree(e,t=e.pos){return this.parser.context&&e.emitContext(),n.Tree.build({buffer:o.create(e),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.startPos,length:t-this.startPos,minRepeatType:this.parser.minRepeatTerm})}checkNest(e){let t=this.parser.findNested(e.state);if(!t)return null;let s=t.value;return"function"==typeof s&&(s=s(this.input,e)),s?{stack:e,info:t,spec:s}:null}startNested(e){let{stack:t,info:s,spec:r}=e;this.stacks=[t],this.nestEnd=this.scanForNestEnd(t,s.end,r.filterEnd),this.nestWrap="number"==typeof r.wrapType?this.parser.nodeSet.types[r.wrapType]:r.wrapType||null,r.startParse?this.nested=r.startParse(this.input.clip(this.nestEnd),t.pos,this.context):this.finishNested(t)}scanForNestEnd(e,t,s){for(let r=e.pos;r<this.input.length;r++)if(d.start=r,d.value=-1,t.token(this.input,d,e),d.value>-1&&(!s||s(this.input.read(r,d.end))))return r;return this.input.length}finishNested(e,t){this.nestWrap?t=new n.Tree(this.nestWrap,t?[t]:[],t?[0]:[],this.nestEnd-e.pos):t||(t=new n.Tree(n.NodeType.none,[],[],this.nestEnd-e.pos));let s=this.parser.findNested(e.state);e.useNode(t,this.parser.getGoto(e.state,s.placeholder,!0)),h&&console.log(this.stackID(e)+" (via unnest)")}stackID(e){let t=(u||(u=new WeakMap)).get(e);return t||u.set(e,t=String.fromCodePoint(this.nextStackID++)),t+e}}function Q(e,t){for(let s=0;s<t.length;s++){let r=t[s];if(r.pos==e.pos&&r.sameState(e))return void(t[s].score<e.score&&(t[s]=e))}t.push(e)}class w{constructor(e,t,s){this.source=e,this.flags=t,this.disabled=s}allows(e){return!this.disabled||0==this.disabled[e]}}const S=e=>e;class b{constructor(e){if(this.bufferLength=n.DefaultBufferLength,this.strict=!1,this.cachedDialect=null,13!=e.version)throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (13)`);let t=p(e.tokenData),s=e.nodeNames.split(" ");this.minRepeatTerm=s.length,this.context=e.context;for(let t=0;t<e.repeatNodeCount;t++)s.push("");let r=[];for(let e=0;e<s.length;e++)r.push([]);function O(e,t,s){r[e].push([t,t.deserialize(String(s))])}if(e.nodeProps)for(let t of e.nodeProps){let e=t[0];for(let s=1;s<t.length;){let r=t[s++];if(r>=0)O(r,e,t[s++]);else{let n=t[s+-r];for(let i=-r;i>0;i--)O(t[s++],e,n);s++}}}if(this.specialized=new Uint16Array(e.specialized?e.specialized.length:0),this.specializers=[],e.specialized)for(let t=0;t<e.specialized.length;t++)this.specialized[t]=e.specialized[t].term,this.specializers[t]=e.specialized[t].get;this.states=p(e.states,Uint32Array),this.data=p(e.stateData),this.goto=p(e.goto);let i=Object.keys(e.topRules).map((t=>e.topRules[t][1]));this.nodeSet=new n.NodeSet(s.map(((t,s)=>n.NodeType.define({name:s>=this.minRepeatTerm?void 0:t,id:s,props:r[s],top:i.indexOf(s)>-1,error:0==s,skipped:e.skippedNodes&&e.skippedNodes.indexOf(s)>-1})))),this.maxTerm=e.maxTerm,this.tokenizers=e.tokenizers.map((e=>"number"==typeof e?new l(t,e):e)),this.topRules=e.topRules,this.nested=(e.nested||[]).map((([e,t,s,r])=>({name:e,value:t,end:new l(p(s),0),placeholder:r}))),this.dialects=e.dialects||{},this.dynamicPrecedences=e.dynamicPrecedences||null,this.tokenPrecTable=e.tokenPrec,this.termNames=e.termNames||null,this.maxNode=this.nodeSet.types.length-1,this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}parse(e,t=0,s={}){"string"==typeof e&&(e=n.stringInput(e));let r=new m(this,e,t,s);for(;;){let e=r.advance();if(e)return e}}startParse(e,t=0,s={}){return"string"==typeof e&&(e=n.stringInput(e)),new m(this,e,t,s)}getGoto(e,t,s=!1){let r=this.goto;if(t>=r[0])return-1;for(let n=r[t+1];;){let t=r[n++],O=1&t,i=r[n++];if(O&&s)return i;for(let s=n+(t>>1);n<s;n++)if(r[n]==e)return i;if(O)return-1}}hasAction(e,t){let s=this.data;for(let r=0;r<2;r++)for(let n,O=this.stateSlot(e,r?2:1);;O+=3){if(65535==(n=s[O])){if(1!=s[O+1]){if(2==s[O+1])return I(s,O+2);break}n=s[O=I(s,O+2)]}if(n==t||0==n)return I(s,O+1)}return 0}stateSlot(e,t){return this.states[6*e+t]}stateFlag(e,t){return(this.stateSlot(e,0)&t)>0}findNested(e){let t=this.stateSlot(e,0);return 4&t?this.nested[t>>10]:null}validAction(e,t){if(t==this.stateSlot(e,4))return!0;for(let s=this.stateSlot(e,1);;s+=3){if(65535==this.data[s]){if(1!=this.data[s+1])return!1;s=I(this.data,s+2)}if(t==I(this.data,s+1))return!0}}nextStates(e){let t=[];for(let s=this.stateSlot(e,1);;s+=3){if(65535==this.data[s]){if(1!=this.data[s+1])break;s=I(this.data,s+2)}if(0==(1&this.data[s+2])){let e=this.data[s+1];t.some(((t,s)=>1&s&&t==e))||t.push(this.data[s],e)}}return t}overrides(e,t){let s=y(this.data,this.tokenPrecTable,t);return s<0||y(this.data,this.tokenPrecTable,e)<s}configure(e){let t=Object.assign(Object.create(b.prototype),this);if(e.props&&(t.nodeSet=this.nodeSet.extend(...e.props)),e.top){let s=this.topRules[e.top];if(!s)throw new RangeError(`Invalid top rule name ${e.top}`);t.top=s}return e.tokenizers&&(t.tokenizers=this.tokenizers.map((t=>{let s=e.tokenizers.find((e=>e.from==t));return s?s.to:t}))),e.dialect&&(t.dialect=this.parseDialect(e.dialect)),e.nested&&(t.nested=this.nested.map((t=>Object.prototype.hasOwnProperty.call(e.nested,t.name)?{name:t.name,value:e.nested[t.name],end:t.end,placeholder:t.placeholder}:t))),null!=e.strict&&(t.strict=e.strict),null!=e.bufferLength&&(t.bufferLength=e.bufferLength),t}getName(e){return this.termNames?this.termNames[e]:String(e<=this.maxNode&&this.nodeSet.types[e].name||e)}get eofTerm(){return this.maxNode+1}get hasNested(){return this.nested.length>0}get topNode(){return this.nodeSet.types[this.top[1]]}dynamicPrecedence(e){let t=this.dynamicPrecedences;return null==t?0:t[e]||0}parseDialect(e){if(this.cachedDialect&&this.cachedDialect.source==e)return this.cachedDialect;let t=Object.keys(this.dialects),s=t.map((()=>!1));if(e)for(let r of e.split(" ")){let e=t.indexOf(r);e>=0&&(s[e]=!0)}let r=null;for(let e=0;e<t.length;e++)if(!s[e])for(let s,n=this.dialects[t[e]];65535!=(s=this.data[n++]);)(r||(r=new Uint8Array(this.maxTerm+1)))[s]=1;return this.cachedDialect=new w(e,s,r)}static deserialize(e){return new b(e)}}function I(e,t){return e[t]|e[t+1]<<16}function y(e,t,s){for(let r,n=t;65535!=(r=e[n]);n++)if(r==s)return n-t;return-1}t.NodeProp=n.NodeProp,t.NodeSet=n.NodeSet,t.NodeType=n.NodeType,t.Tree=n.Tree,t.TreeCursor=n.TreeCursor,t.ContextTracker=class{constructor(e){this.start=e.start,this.shift=e.shift||S,this.reduce=e.reduce||S,this.reuse=e.reuse||S,this.hash=e.hash,this.strict=!1!==e.strict}},t.ExternalTokenizer=class{constructor(e,t={}){this.token=e,this.contextual=!!t.contextual,this.fallback=!!t.fallback,this.extend=!!t.extend}},t.Parser=b,t.Stack=O,t.Token=$},142:(e,t)=>{var s,r;Object.defineProperty(t,"__esModule",{value:!0}),t.UniOp=t.BinOp=void 0,(r=t.BinOp||(t.BinOp={}))[r.Plus=0]="Plus",r[r.Minus=1]="Minus",r[r.Mul=2]="Mul",r[r.IDiv=3]="IDiv",r[r.Mod=4]="Mod",r[r.Eq=5]="Eq",r[r.Neq=6]="Neq",r[r.Lte=7]="Lte",r[r.Gte=8]="Gte",r[r.Lt=9]="Lt",r[r.Gt=10]="Gt",r[r.Is=11]="Is",r[r.And=12]="And",r[r.Or=13]="Or",(s=t.UniOp||(t.UniOp={}))[s.Neg=0]="Neg",s[s.Not=1]="Not"},244:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.compile=t.makeLocals=t.emptyEnv=void 0;const r=s(142),n=s(591);function O(e){const t=[];return e.forEach((e=>{t.push(`(local $${e} i32)`)})),t}function i(e,t){switch(e.tag){case"store":return[...o(e.start,t),...o(e.offset,t),...o(e.value,t),"call $store"];case"assign":var s=a(e.value,t);return t.locals.has(e.name)?s.concat([`(local.set $${e.name})`]):s.concat([`(global.set $${e.name})`]);case"return":return(s=o(e.value,t)).push("return"),s;case"expr":return a(e.expr,t).concat(["(local.set $$last)"]);case"pass":return[];case"ifjmp":const r=t.labels.findIndex((t=>t===e.thn)),n=t.labels.findIndex((t=>t===e.els));return[...o(e.cond,t),`(if \n          (then\n            (local.set $$selector (i32.const ${r}))\n            (br $loop)\n          ) \n          (else \n            (local.set $$selector (i32.const ${n}))\n            (br $loop)\n          )\n         )`];case"jmp":return[`(local.set $$selector (i32.const ${t.labels.findIndex((t=>t===e.lbl))}))`,"(br $loop)"]}}function a(e,t){switch(e.tag){case"value":return o(e.value,t);case"binop":return[...o(e.left,t),...o(e.right,t),$(e.op)];case"uniop":const i=o(e.expr,t);switch(e.op){case r.UniOp.Neg:return["(i32.const 0)",...i,"(i32.sub)"];case r.UniOp.Not:return["(i32.const 0)",...i,"(i32.eq)"]}case"builtin1":const a=e.a[0],l=o(e.arg,t);var s=e.name;return"print"===e.name&&a===n.NUM?s="print_num":"print"===e.name&&a===n.BOOL?s="print_bool":"print"===e.name&&a===n.NONE&&(s="print_none"),l.concat([`(call $${s})`]);case"builtin2":return[...o(e.left,t),...o(e.right,t),`(call $${e.name})`];case"call":var O=e.arguments.map((e=>o(e,t))).flat();return O.push(`(call $${e.name})`),O;case"alloc":return[...o(e.amount,t),"call $alloc"];case"load":return[...o(e.start,t),"call $assert_not_none",...o(e.offset,t),"call $load"]}}function o(e,t){switch(e.tag){case"num":case"wasmint":return["(i32.const "+e.value+")"];case"bool":return[`(i32.const ${Number(e.value)})`];case"none":return["(i32.const 0)"];case"id":return t.locals.has(e.name)?[`(local.get $${e.name})`]:[`(global.get $${e.name})`]}}function $(e){switch(e){case r.BinOp.Plus:return"(i32.add)";case r.BinOp.Minus:return"(i32.sub)";case r.BinOp.Mul:return"(i32.mul)";case r.BinOp.IDiv:return"(i32.div_s)";case r.BinOp.Mod:return"(i32.rem_s)";case r.BinOp.Eq:return"(i32.eq)";case r.BinOp.Neq:return"(i32.ne)";case r.BinOp.Lte:return"(i32.le_s)";case r.BinOp.Gte:return"(i32.ge_s)";case r.BinOp.Lt:return"(i32.lt_s)";case r.BinOp.Gt:return"(i32.gt_s)";case r.BinOp.Is:return"(i32.eq)";case r.BinOp.And:return"(i32.and)";case r.BinOp.Or:return"(i32.or)"}}function l(e,t){const s=o(e.value,t);return t.locals.has(e.name)?[...s,`(local.set $${e.name})`]:[...s,`(global.set $${e.name})`]}function p(e,t){var s=new Set;e.inits.forEach((e=>s.add(e.name))),s.add("$last"),s.add("$selector"),s.forEach(t.locals.add,t.locals),e.parameters.forEach((e=>t.locals.add(e.name))),t.labels=e.body.map((e=>e.label));const r=O(s).join("\n"),n=e.inits.map((e=>l(e,t))).flat().join("\n");var a=e.parameters.map((e=>`(param $${e.name} i32)`)).join(" "),o="(local.set $$selector (i32.const 0))\n";o+="(loop $loop\n";var $="(local.get $$selector)\n";return $+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{$=`(block ${e.label}\n              ${$}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>i(e,t).join("\n"))).join("\n")}\n            `})),o+=$,o+=") ;; end $loop",t.locals.clear(),[`(func $${e.name} ${a} (result i32)\n    ${r}\n    ${n}\n    ${o}\n    (i32.const 0)\n    (return))`]}t.emptyEnv={globals:new Map,classes:new Map,locals:new Set,labels:[],offset:0},t.makeLocals=O,t.compile=function(e,t){const s=t,r=new Set;r.add("$last"),r.add("$selector"),r.forEach(t.locals.add,t.locals);const n=O(r),a=e.inits.map((e=>e.name));console.log(e.inits,a);const o=[];e.funs.forEach((e=>{o.push(p(e,s).join("\n"))}));const $=e.classes.map((e=>function(e,t){const s=[...e.methods];return s.forEach((t=>t.name=`${e.name}$${t.name}`)),s.map((e=>p(e,t))).flat()}(e,s))).flat(),h=o.concat($).join("\n\n"),u=e.inits.map((e=>l(e,s))).flat();s.labels=e.body.map((e=>e.label));var c="(local.set $$selector (i32.const 0))\n";c+="(loop $loop\n";var f="(local.get $$selector)\n";f+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{f=`(block ${e.label}\n              ${f}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>i(e,s).join("\n"))).join("\n")}\n            `})),c+=f;const g=[...n,...u,c+=") ;; end $loop"];return s.locals.clear(),{globals:a,functions:h,mainSource:g.join("\n"),newEnv:s}}},440:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RunTimeError=t.ParseError=t.ReferenceError=t.TypeCheckError=t.CompileTimeError=void 0;class s extends Error{constructor(e){const t=new.target.prototype;super(e),this.__proto__=t}}t.CompileTimeError=s,t.TypeCheckError=class extends s{constructor(e){super("TYPE ERROR: "+e)}},t.ReferenceError=class extends s{constructor(e){super("REFERENCE ERROR: "+e)}},t.ParseError=class extends s{constructor(e,t){const s=new.target.prototype;super("PARSE ERROR: "+e+"at line "+t.toString()),this.__proto__=s}};class r extends Error{constructor(e){const t=new.target.prototype;super("RUNTIME ERROR: "+e),this.__proto__=t}}t.RunTimeError=r},850:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lowerProgram=void 0;const s=new Map;function r(e){if(s.has(e)){var t=s.get(e);return s.set(e,t+1),e+(t+1)}return s.set(e,1),e+1}function n(e,t){return e.map((e=>function(e,t){var s=[],n={a:e.a,label:r("$startFun"),stmts:[]};s.push(n);var i=o(e.body,s,t);return{...e,inits:[...i,...O(e.inits)],body:s}}(e,t))).flat()}function O(e,t){return e.map((e=>{return t=e,{...t,value:a(t.value)};var t}))}function i(e,t){return e.map((e=>function(e,t){return{...e,fields:O(e.fields),methods:n(e.methods,t)}}(e,t)))}function a(e){switch(e.tag){case"num":return{...e,value:BigInt(e.value)};case"bool":case"none":return e}}function o(e,t,s){var n=[];return e.forEach((e=>{n.push(...function(e,t,s){switch(e.tag){case"assign":var[n,O,i]=$(e.value,s);return t[t.length-1].stmts.push(...O,{a:e.a,tag:"assign",name:e.name,value:i}),n;case"return":var[n,O,a]=l(e.value,s);return t[t.length-1].stmts.push(...O,{tag:"return",a:e.a,value:a}),n;case"expr":var[h,u,c]=$(e.expr,s);return t[t.length-1].stmts.push(...u,{tag:"expr",a:e.a,expr:c}),h;case"pass":return[];case"field-assign":{var[f,g,d]=l(e.obj,s),[P,x,m]=l(e.value,s);if("class"!==e.obj.a[0].tag)throw new Error("Compiler's cursed, go home.");const r={tag:"wasmint",value:s.classes.get(e.obj.a[0].name).get(e.field)[0]};return p(t,...g,...x,{tag:"store",a:e.a,start:d,offset:r,value:m}),[...f,...P]}case"if":var Q=r("$then"),w=r("$else"),S=r("$end"),b={tag:"jmp",lbl:S},[I,y,W]=l(e.cond,s),R={tag:"ifjmp",cond:W,thn:Q,els:w};p(t,...y,R),t.push({a:e.a,label:Q,stmts:[]});var v=o(e.thn,t,s);p(t,b),t.push({a:e.a,label:w,stmts:[]});var q=o(e.els,t,s);return p(t,b),t.push({a:e.a,label:S,stmts:[]}),[...I,...v,...q];case"while":var k=r("$whilestart"),Z=r("$whilebody"),_=r("$whileend");p(t,{tag:"jmp",lbl:k}),t.push({a:e.a,label:k,stmts:[]});var[I,y,W]=l(e.cond,s);p(t,...y,{tag:"ifjmp",cond:W,thn:Z,els:_}),t.push({a:e.a,label:Z,stmts:[]});var j=o(e.body,t,s);return p(t,{tag:"jmp",lbl:k}),t.push({a:e.a,label:_,stmts:[]}),[...I,...j]}}(e,t,s))})),n}function $(e,t){switch(e.tag){case"uniop":var[s,n,O]=l(e.expr,t);return[s,n,{...e,expr:O}];case"binop":var[i,o,$]=l(e.left,t),[p,h,u]=l(e.right,t);return[[...i,...p],[...o,...h],{...e,left:$,right:u}];case"builtin1":var[s,n,O]=l(e.arg,t);return[s,n,{tag:"builtin1",a:e.a,name:e.name,arg:O}];case"builtin2":var[i,o,$]=l(e.left,t),[p,h,u]=l(e.right,t);return[[...i,...p],[...o,...h],{...e,left:$,right:u}];case"call":const f=e.arguments.map((e=>l(e,t))),g=f.map((e=>e[0])).flat(),d=f.map((e=>e[1])).flat(),P=f.map((e=>e[2])).flat();return[g,d,{...e,arguments:P}];case"method-call":{const[s,r,n]=l(e.obj,t),O=e.arguments.map((e=>l(e,t))),i=O.map((e=>e[0])).flat(),a=O.map((e=>e[1])).flat(),o=O.map((e=>e[2])).flat();var c=e.obj.a[0];if("class"!==c.tag)throw new Error("Report this as a bug to the compiler developer, this shouldn't happen "+c.tag);return[[...s,...i],[...r,{tag:"expr",expr:{tag:"call",name:"assert_not_none",arguments:[n]}},...a],{tag:"call",name:`${c.name}$${e.method}`,arguments:[n,...o]}]}case"lookup":{const[s,r,n]=l(e.obj,t);if("class"!==e.obj.a[0].tag)throw new Error("Compiler's cursed, go home");const O=t.classes.get(e.obj.a[0].name),[i,a]=O.get(e.field);return[s,r,{tag:"load",start:n,offset:{tag:"wasmint",value:i}}]}case"construct":const x=[...t.classes.get(e.name).entries()],m=r("newObj"),Q={tag:"alloc",amount:{tag:"wasmint",value:x.length}},w=x.map((e=>{const[t,[s,r]]=e;return{tag:"store",start:{tag:"id",name:m},offset:{tag:"wasmint",value:s},value:r}}));return[[{name:m,type:e.a[0],value:{tag:"none"}}],[{tag:"assign",name:m,value:Q},...w,{tag:"expr",expr:{tag:"call",name:`${e.name}$__init__`,arguments:[{a:e.a,tag:"id",name:m}]}}],{a:e.a,tag:"value",value:{a:e.a,tag:"id",name:m}}];case"id":return[[],[],{tag:"value",value:{...e}}];case"literal":return[[],[],{tag:"value",value:a(e.value)}]}}function l(e,t){var[s,n,O]=$(e,t);if("value"===O.tag)return[s,n,O.value];var i=r("valname"),a={tag:"assign",a:e.a,name:i,value:O};return[[...s,{a:e.a,name:i,type:e.a[0],value:{tag:"none"}}],[...n,a],{tag:"id",name:i,a:e.a}]}function p(e,...t){e[e.length-1].stmts.push(...t)}t.lowerProgram=function(e,t){var s=[],a={a:e.a,label:r("$startProg"),stmts:[]};s.push(a);var $=o(e.stmts,s,t);return{a:e.a,funs:n(e.funs,t),inits:[...$,...O(e.inits)],classes:i(e.classes,t),body:s}}},660:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parse=t.traverse=t.isClassDef=t.isFunDef=t.isVarInit=t.traverseDefs=t.traverseClass=t.traverseFunDef=t.traverseVarInit=t.traverseParameters=t.traverseType=t.traverseStmt=t.traverseArguments=t.traverseExpr=t.traverseLiteral=void 0;const r=s(178),n=s(142),O=s(591),i=s(665),a=s(440);function o(e,t){return{line:t.substring(0,e.from).split("\n").length}}function $(e,t){var s=o(e,t);switch(e.type.name){case"Number":return{tag:"num",value:Number(t.substring(e.from,e.to))};case"Boolean":return{tag:"bool",value:"True"===t.substring(e.from,e.to)};case"None":return{tag:"none"};default:throw new a.ParseError("Not literal",s.line)}}function l(e,t){var s=o(e,t);switch(e.type.name){case"Number":case"Boolean":case"None":return{a:s,tag:"literal",value:$(e,t)};case"VariableName":return{a:s,tag:"id",name:t.substring(e.from,e.to)};case"CallExpression":e.firstChild();const o=l(e,t);e.nextSibling();let u=p(e,t);if(e.parent(),"lookup"===o.tag)return{a:s,tag:"method-call",obj:o.obj,method:o.field,arguments:u};if("id"===o.tag){const e=o.name;return"print"===e||"abs"===e?{a:s,tag:"builtin1",name:e,arg:u[0]}:"max"===e||"min"===e||"pow"===e?{a:s,tag:"builtin2",name:e,left:u[0],right:u[1]}:{a:s,tag:"call",name:e,arguments:u}}throw new a.ParseError("Unknown target while parsing assignment",s.line);case"BinaryExpression":e.firstChild();const c=l(e,t);switch(e.nextSibling(),t.substring(e.from,e.to)){case"+":O=n.BinOp.Plus;break;case"-":O=n.BinOp.Minus;break;case"*":O=n.BinOp.Mul;break;case"//":O=n.BinOp.IDiv;break;case"%":O=n.BinOp.Mod;break;case"==":O=n.BinOp.Eq;break;case"!=":O=n.BinOp.Neq;break;case"<=":O=n.BinOp.Lte;break;case">=":O=n.BinOp.Gte;break;case"<":O=n.BinOp.Lt;break;case">":O=n.BinOp.Gt;break;case"is":O=n.BinOp.Is;break;case"and":O=n.BinOp.And;break;case"or":O=n.BinOp.Or;break;default:throw new a.ParseError("Could not parse op at "+e.from+" "+e.to+": "+t.substring(e.from,e.to),s.line)}e.nextSibling();const f=l(e,t);return e.parent(),{a:s,tag:"binop",op:O,left:c,right:f};case"ParenthesizedExpression":e.firstChild(),e.nextSibling();var r=l(e,t);return e.parent(),r;case"UnaryExpression":var O;switch(e.firstChild(),t.substring(e.from,e.to)){case"-":O=n.UniOp.Neg;break;case"not":O=n.UniOp.Not;break;default:throw new a.ParseError("Could not parse op at "+e.from+" "+e.to+": "+t.substring(e.from,e.to),s.line)}return e.nextSibling(),r=l(e,t),e.parent(),{a:s,tag:"uniop",op:O,expr:r};case"MemberExpression":e.firstChild();var i=l(e,t);e.nextSibling(),e.nextSibling();var h=t.substring(e.from,e.to);return e.parent(),{a:s,tag:"lookup",obj:i,field:h};case"self":return{a:s,tag:"id",name:"self"};default:throw new a.ParseError("Could not parse expr at "+e.from+" "+e.to+": "+t.substring(e.from,e.to),s.line)}}function p(e,t){e.firstChild();const s=[];for(e.nextSibling();")"!==e.type.name;){let r=l(e,t);s.push(r),e.nextSibling(),e.nextSibling()}return e.parent(),s}function h(e,t){var s=o(e,t);switch(e.node.type.name){case"ReturnStatement":return e.firstChild(),r=e.nextSibling()?l(e,t):{a:s,tag:"literal",value:{tag:"none"}},e.parent(),{a:s,tag:"return",value:r};case"AssignStatement":e.firstChild();const o=l(e,t);e.nextSibling(),e.nextSibling();var r=l(e,t);if(e.parent(),"lookup"===o.tag)return{a:s,tag:"field-assign",obj:o.obj,field:o.field,value:r};if("id"===o.tag)return{a:s,tag:"assign",name:o.name,value:r};throw new a.ParseError("Unknown target while parsing assignment",s.line);case"ExpressionStatement":e.firstChild();const p=l(e,t);return e.parent(),{a:s,tag:"expr",expr:p};case"IfStatement":e.firstChild(),e.nextSibling();var n=l(e,t);e.nextSibling(),e.firstChild();for(var O=[],i=[];e.nextSibling();)O.push(h(e,t));if(e.parent(),e.nextSibling()){for(e.nextSibling(),e.firstChild();e.nextSibling();)i.push(h(e,t));e.parent()}return e.parent(),{a:s,tag:"if",cond:n,thn:O,els:i};case"WhileStatement":e.firstChild(),e.nextSibling(),n=l(e,t),e.nextSibling();var $=[];for(e.firstChild();e.nextSibling();)$.push(h(e,t));return e.parent(),e.parent(),{a:s,tag:"while",cond:n,body:$};case"PassStatement":return{a:s,tag:"pass"};default:throw new a.ParseError("Could not parse stmt at "+e.node.from+" "+e.node.to+": "+t.substring(e.from,e.to),s.line)}}function u(e,t){let s=t.substring(e.from,e.to);switch(s){case"int":return O.NUM;case"bool":return O.BOOL;default:return O.CLASS(s)}}function c(e,t){var s=o(e,t);e.firstChild();const r=[];for(e.nextSibling();")"!==e.type.name;){let n=t.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw new a.ParseError("Missed type annotation for parameter "+n,s.line);e.firstChild(),e.nextSibling();let O=u(e,t);e.parent(),e.nextSibling(),r.push({name:n,type:O}),e.nextSibling()}return e.parent(),r}function f(e,t){var s=o(e,t);e.firstChild();var r=t.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw e.parent(),new a.ParseError("invalid variable init",s.line);e.firstChild(),e.nextSibling();const n=u(e,t);e.parent(),e.nextSibling(),e.nextSibling();var O=$(e,t);return e.parent(),{a:s,name:r,type:n,value:O}}function g(e,t){var s=o(e,t);e.firstChild(),e.nextSibling();var r=t.substring(e.from,e.to);e.nextSibling();var n=c(e,t);e.nextSibling();let i=O.NONE;"TypeDef"===e.type.name&&(e.firstChild(),i=u(e,t),e.parent(),e.nextSibling()),e.firstChild();for(var a=[],$=[],l=e.nextSibling();l&&P(e);)a.push(f(e,t)),l=e.nextSibling();for(;l;)$.push(h(e,t)),l=e.nextSibling();return e.parent(),e.parent(),{a:s,name:r,parameters:n,ret:i,inits:a,body:$}}function d(e,t){var s=o(e,t);const r=[],n=[];e.firstChild(),e.nextSibling();const i=t.substring(e.from,e.to);for(e.nextSibling(),e.nextSibling(),e.firstChild();e.nextSibling();)if(P(e))r.push(f(e,t));else{if(!x(e))throw new a.ParseError(`Could not parse the body of class: ${i}`,s.line);n.push(g(e,t))}return e.parent(),e.parent(),n.find((e=>"__init__"===e.name))||n.push({a:s,name:"__init__",parameters:[{name:"self",type:O.CLASS(i)}],ret:O.NONE,inits:[],body:[]}),{a:s,name:i,fields:r,methods:n}}function P(e,t){if("AssignStatement"===e.type.name){e.firstChild(),e.nextSibling();const t="TypeDef"===e.type.name;return e.parent(),t}return!1}function x(e,t){return"FunctionDefinition"===e.type.name}function m(e,t){return"ClassDefinition"===e.type.name}function Q(e,t){var s=o(e,t);switch(e.node.type.name){case"Script":const n=[],O=[],i=[],o=[];for(var r=e.firstChild();r;){if(P(e))n.push(f(e,t));else if(x(e))O.push(g(e,t));else{if(!m(e))break;i.push(d(e,t))}r=e.nextSibling()}for(;r;)o.push(h(e,t)),r=e.nextSibling();return e.parent(),{a:s,funs:O,inits:n,classes:i,stmts:o};default:throw new a.ParseError("Could not parse program at "+e.node.from+" "+e.node.to,s.line)}}t.traverseLiteral=$,t.traverseExpr=l,t.traverseArguments=p,t.traverseStmt=h,t.traverseType=u,t.traverseParameters=c,t.traverseVarInit=f,t.traverseFunDef=g,t.traverseClass=d,t.traverseDefs=function(e,t){const s=[],r=[],n=[];for(;;){if(P(e))s.push(f(e,t));else if(x(e))r.push(g(e,t));else{if(!m(e))return[s,r,n];n.push(d(e,t))}e.nextSibling()}},t.isVarInit=P,t.isFunDef=x,t.isClassDef=m,t.traverse=Q,t.parse=function(e){const t=r.parser.parse(e);return i.stringifyTree(t.cursor(),e,0),Q(t.cursor(),e)}},99:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BasicREPL=void 0;const r=s(277),n=s(740),O=s(660);t.BasicREPL=class{constructor(e){if(this.importObject=e,!e.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});new Int32Array(e.buffer)[0]=4,this.importObject.js={memory:e}}this.currentEnv={globals:new Map,classes:new Map,locals:new Set,labels:[],offset:1},this.currentTypeEnv=n.defaultTypeEnv,this.functions=""}async run(e){const t={importObject:this.importObject,env:this.currentEnv,typeEnv:this.currentTypeEnv,functions:this.functions},[s,n,O,i,a]=await r.run(e,t);this.currentEnv=n,this.currentTypeEnv=O,this.functions+=i;const o=this.importObject.env||{};return console.log(a),Object.keys(a.instance.exports).forEach((e=>{console.log("Consider key ",e);const t=a.instance.exports[e];t instanceof WebAssembly.Global&&(o[e]=t)})),this.importObject.env=o,s}tc(e){this.importObject,this.currentEnv,this.currentTypeEnv,this.functions;const t=O.parse(e),[s,r]=n.tc(this.currentTypeEnv,t);return s.a[0]}}},277:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.run=t.augmentEnv=t.runWat=void 0;const n=r(s(113)),O=s(244),i=s(660),a=s(740),o=s(591),$=s(850);if("undefined"!=typeof process){const e=process.on;process.on=(...t)=>"uncaughtException"===t[0]?void 0:e.apply(process,t)}async function l(e,t){var s=(await n.default()).parseWat("test.wat",e).toBinary({}),r=await WebAssembly.instantiate(s.buffer,t);return[r.instance.exports.exported_func(),r]}function p(e,t){const s=new Map(e.globals),r=new Map(e.classes);var n=e.offset;return t.inits.forEach((e=>{s.set(e.name,!0)})),t.classes.forEach((e=>{const t=new Map;e.fields.forEach(((e,s)=>t.set(e.name,[s,e.value]))),r.set(e.name,t)})),{globals:s,classes:r,locals:e.locals,labels:e.labels,offset:n}}t.runWat=l,t.augmentEnv=p,t.run=async function(e,t){const s=i.parse(e),[r,n]=a.tc(t.typeEnv,s),h=p(t.env,r),u=$.lowerProgram(r,h),c=r.a[0];var f="",g="";c!==o.NONE&&(f="(result i32)",g="(local.get $$last)");let d=t.env.globals;const P=O.compile(u,h),x=[...d.keys()].map((e=>`(import "env" "${e}" (global $${e} (mut i32)))`)).join("\n"),m=P.globals.map((e=>`(global $${e} (export "${e}") (mut i32) (i32.const 0))`)).join("\n"),Q=t.importObject;if(!Q.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});Q.js={memory:e}}const w=`(module\n    (import "js" "memory" (memory 1))\n    (func $assert_not_none (import "imports" "assert_not_none") (param i32) (result i32))\n    (func $print_num (import "imports" "print_num") (param i32) (result i32))\n    (func $print_bool (import "imports" "print_bool") (param i32) (result i32))\n    (func $print_none (import "imports" "print_none") (param i32) (result i32))\n    (func $abs (import "imports" "abs") (param i32) (result i32))\n    (func $min (import "imports" "min") (param i32) (param i32) (result i32))\n    (func $max (import "imports" "max") (param i32) (param i32) (result i32))\n    (func $pow (import "imports" "pow") (param i32) (param i32) (result i32))\n    (func $alloc (import "libmemory" "alloc") (param i32) (result i32))\n    (func $load (import "libmemory" "load") (param i32) (param i32) (result i32))\n    (func $store (import "libmemory" "store") (param i32) (param i32) (param i32))\n    ${x}\n    ${m}\n    ${t.functions}\n    ${P.functions}\n    (func (export "exported_func") ${f}\n      ${P.mainSource}\n      ${g}\n    )\n  )`;console.log(w);const[S,b]=await l(w,Q);return[o.PyValue(c,S),P.newEnv,n,P.functions,b]}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringifyTree=void 0,t.stringifyTree=function e(t,s,r){var n="";if(n+=" ".repeat(2*r)+t.type.name,["Number","CallExpression","BinaryExpression","UnaryExpression","ArithOp","VariableName"].includes(t.type.name)&&(n+=" --\x3e "+s.substring(t.from,t.to)),n+="\n",t.firstChild()){do{n+=e(t,s,r+1)}while(t.nextSibling());t.parent()}return n}},740:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tcLiteral=t.tcExpr=t.tcStmt=t.tcBlock=t.tcClass=t.tcDef=t.tcInit=t.tc=t.augmentTEnv=t.join=t.isAssignable=t.isSubtype=t.isNoneOrClass=t.equalType=t.emptyLocalTypeEnv=t.emptyGlobalTypeEnv=t.defaultTypeEnv=void 0;const r=s(142),n=s(591),O=s(440),i=new Map;function a(){return{vars:new Map,expectedRet:n.NONE,actualRet:n.NONE,topLevel:!0}}function o(e,t){return e===t||"class"===e.tag&&"class"===t.tag&&e.name===t.name}function $(e){return"none"===e.tag||"class"===e.tag}function l(e,t,s){return o(t,s)||"none"===t.tag&&"class"===s.tag}function p(e,t,s){return l(0,t,s)}function h(e,t){const s=new Map(e.globals),r=new Map(e.functions),n=new Map(e.classes);return t.inits.forEach((e=>s.set(e.name,e.type))),t.funs.forEach((e=>r.set(e.name,[e.parameters.map((e=>e.type)),e.ret]))),t.classes.forEach((e=>{const t=new Map,s=new Map;e.fields.forEach((e=>t.set(e.name,e.type))),e.methods.forEach((e=>s.set(e.name,[e.parameters.map((e=>e.type)),e.ret]))),n.set(e.name,[t,s])})),{globals:s,functions:r,classes:n}}function u(e,t){const s=x(t.value);if(p(0,s,t.type))return{...t,a:[n.NONE,t.a]};throw new O.TypeCheckError("Expected type `"+t.type+"`; got type `"+s+"`")}function c(e,t){var s=a();s.expectedRet=t.ret,s.topLevel=!1,t.parameters.forEach((e=>s.vars.set(e.name,e.type)));var r=[];t.inits.forEach((e=>{const t=u(0,e);r.push(t),s.vars.set(e.name,t.type)}));const i=g(e,s,t.body);if(!p(0,s.actualRet,s.expectedRet))throw new O.TypeCheckError(`expected return type of block: ${JSON.stringify(s.expectedRet)} does not match actual return type: ${JSON.stringify(s.actualRet)}`);return{...t,a:[n.NONE,t.a],body:i,inits:r}}function f(e,t){const s=t.fields.map((e=>u(0,e))),r=t.methods.map((t=>c(e,t))),i=t.methods.find((e=>"__init__"===e.name));if(1!==i.parameters.length||"self"!==i.parameters[0].name||!o(i.parameters[0].type,n.CLASS(t.name))||i.ret!==n.NONE)throw new O.TypeCheckError("Cannot override __init__ type signature");return{a:[n.NONE,t.a],name:t.name,fields:s,methods:r}}function g(e,t,s){return s.map((s=>d(e,t,s)))}function d(e,t,s){switch(s.tag){case"assign":const $=P(e,t,s.value);var r;if(t.vars.has(s.name))r=t.vars.get(s.name);else{if(!e.globals.has(s.name))throw new O.TypeCheckError("Unbound id: "+s.name);r=e.globals.get(s.name)}if(!p(0,$.a[0],r))throw new O.TypeCheckError("Non-assignable types");return{a:[n.NONE,s.a],tag:s.tag,name:s.name,value:$};case"expr":const l=P(e,t,s.expr);return{a:l.a,tag:s.tag,expr:l};case"if":var i=P(e,t,s.cond);const h=g(e,t,s.thn),u=t.actualRet;t.actualRet=n.NONE;const c=g(e,t,s.els),f=t.actualRet;if(i.a[0]!==n.BOOL)throw new O.TypeCheckError("Condition Expression Must be a bool");return u!==f&&(t.actualRet={tag:"either",left:u,right:f}),{a:[u,s.a],tag:s.tag,cond:i,thn:h,els:c};case"return":if(t.topLevel)throw new O.TypeCheckError("cannot return outside of functions");const d=P(e,t,s.value);if(!p(0,d.a[0],t.expectedRet))throw new O.TypeCheckError("expected return type `"+t.expectedRet.tag+"`; got type `"+d.a.tag+"`");return t.actualRet=d.a[0],{a:d.a,tag:s.tag,value:d};case"while":i=P(e,t,s.cond);const x=g(e,t,s.body);if(!o(i.a[0],n.BOOL))throw new O.TypeCheckError("Condition Expression Must be a bool");return{a:[n.NONE,s.a],tag:s.tag,cond:i,body:x};case"pass":return{a:[n.NONE,s.a],tag:s.tag};case"field-assign":var a=P(e,t,s.obj);const m=P(e,t,s.value);if("class"!==a.a[0].tag)throw new O.TypeCheckError("field assignments require an object");if(!e.classes.has(a.a[0].name))throw new O.TypeCheckError("field assignment on an unknown class");const[Q,w]=e.classes.get(a.a[0].name);if(!Q.has(s.field))throw new O.TypeCheckError(`could not find field ${s.field} in class ${a.a[0].name}`);if(!p(0,m.a[0],Q.get(s.field)))throw new O.TypeCheckError(`could not assign value of type: ${m.a}; field ${s.field} expected type: ${Q.get(s.field)}`);return{...s,a:[n.NONE,s.a],obj:a,value:m}}}function P(e,t,s){switch(s.tag){case"literal":return{...s,a:[x(s.value),s.a]};case"binop":const l=P(e,t,s.left),h=P(e,t,s.right),u={...s,left:l,right:h};switch(s.op){case r.BinOp.Plus:case r.BinOp.Minus:case r.BinOp.Mul:case r.BinOp.IDiv:case r.BinOp.Mod:if(o(l.a[0],n.NUM)&&o(h.a[0],n.NUM))return{...u,a:[n.NUM,s.a]};throw new O.TypeCheckError("Type mismatch for numeric op"+s.op);case r.BinOp.Eq:case r.BinOp.Neq:if("class"===l.a[0].tag||"class"===h.a[0].tag)throw new O.TypeCheckError("cannot apply operator '==' on class types");if(o(l.a[0],h.a[0]))return{...u,a:[n.BOOL,s.a]};throw new O.TypeCheckError("Type mismatch for op"+s.op);case r.BinOp.Lte:case r.BinOp.Gte:case r.BinOp.Lt:case r.BinOp.Gt:if(o(l.a[0],n.NUM)&&o(h.a[0],n.NUM))return{...u,a:[n.BOOL,s.a]};throw new O.TypeCheckError("Type mismatch for op"+s.op);case r.BinOp.And:case r.BinOp.Or:if(o(l.a[0],n.BOOL)&&o(h.a[0],n.BOOL))return{...u,a:[n.BOOL,s.a]};throw new O.TypeCheckError("Type mismatch for boolean op"+s.op);case r.BinOp.Is:if(!$(l.a[0])||!$(h.a[0]))throw new O.TypeCheckError("is operands must be objects");return{...u,a:[n.BOOL,s.a]}}case"uniop":const c=P(e,t,s.expr),f={...s,a:c.a,expr:c};switch(s.op){case r.UniOp.Neg:if(o(c.a[0],n.NUM))return f;throw new O.TypeCheckError("Type mismatch for op"+s.op);case r.UniOp.Not:if(o(c.a[0],n.BOOL))return f;throw new O.TypeCheckError("Type mismatch for op"+s.op)}case"id":if(t.vars.has(s.name))return{...s,a:[t.vars.get(s.name),s.a]};if(e.globals.has(s.name))return{...s,a:[e.globals.get(s.name),s.a]};throw new O.TypeCheckError("Unbound id: "+s.name);case"builtin1":if("print"===s.name){const r=P(e,t,s.arg);return{...s,a:r.a,arg:r}}if(e.functions.has(s.name)){const[[r],n]=e.functions.get(s.name),O=P(e,t,s.arg);if(p(0,O.a[0],r))return{...s,a:[n,s.a],arg:O};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"builtin2":if(e.functions.has(s.name)){const[[r,n],O]=e.functions.get(s.name),i=P(e,t,s.left),a=P(e,t,s.right);if(p(0,r,i.a[0])&&p(0,n,a.a[0]))return{...s,a:[O,s.a],left:i,right:a};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"call":if(e.classes.has(s.name)){const t={a:[n.CLASS(s.name),s.a],tag:"construct",name:s.name},[r,i]=e.classes.get(s.name);if(i.has("__init__")){const[e,r]=i.get("__init__");if(s.arguments.length!==e.length-1)throw new O.TypeCheckError("__init__ didn't receive the correct number of arguments from the constructor");if(r!==n.NONE)throw new O.TypeCheckError("__init__  must have a void return type");return t}return t}if(e.functions.has(s.name)){const[r,n]=e.functions.get(s.name),O=s.arguments.map((s=>P(e,t,s)));if(r.length===s.arguments.length&&O.every(((e,t)=>e.a[0]===r[t])))return{...s,a:[n,s.a],arguments:O};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"lookup":if("class"===(i=P(e,t,s.obj)).a[0].tag){if(e.classes.has(i.a[0].name)){const[t,r]=e.classes.get(i.a[0].name);if(t.has(s.field))return{...s,a:[t.get(s.field),s.a],obj:i};throw new O.TypeCheckError(`could not found field ${s.field} in class ${i.a[0].name}`)}throw new O.TypeCheckError("field lookup on an unknown class")}throw new O.TypeCheckError("field lookups require an object");case"method-call":var i=P(e,t,s.obj),a=s.arguments.map((s=>P(e,t,s)));if("class"===i.a[0].tag){if(e.classes.has(i.a[0].name)){const[t,r]=e.classes.get(i.a[0].name);if(r.has(s.method)){const[e,t]=r.get(s.method),n=[i].concat(a);if(e.length===n.length&&e.every(((e,t)=>p(0,n[t].a[0],e))))return{...s,a:[t,s.a],obj:i,arguments:a};throw new O.TypeCheckError(`Method call type mismatch: ${s.method} --- callArgs: ${JSON.stringify(n)}, methodArgs: ${JSON.stringify(e)}`)}throw new O.TypeCheckError(`could not found method ${s.method} in class ${i.a[0].name}`)}throw new O.TypeCheckError("method call on an unknown class")}throw new O.TypeCheckError("method calls require an object");default:throw new O.TypeCheckError(`unimplemented type checking for expr: ${s}`)}}function x(e){switch(e.tag){case"bool":return n.BOOL;case"num":return n.NUM;case"none":return n.NONE}}i.set("abs",[[n.NUM],n.NUM]),i.set("max",[[n.NUM,n.NUM],n.NUM]),i.set("min",[[n.NUM,n.NUM],n.NUM]),i.set("pow",[[n.NUM,n.NUM],n.NUM]),i.set("print",[[n.CLASS("object")],n.NUM]),t.defaultTypeEnv={globals:new Map,functions:i,classes:new Map},t.emptyGlobalTypeEnv=function(){return{globals:new Map,functions:new Map,classes:new Map}},t.emptyLocalTypeEnv=a,t.equalType=o,t.isNoneOrClass=$,t.isSubtype=l,t.isAssignable=p,t.join=function(e,t,s){return n.NONE},t.augmentTEnv=h,t.tc=function(e,t){const s=a(),r=h(e,t),O=t.inits.map((e=>u(0,e))),i=t.funs.map((e=>c(r,e))),o=t.classes.map((e=>f(r,e))),$=g(r,s,t.stmts);var l=n.NONE;$.length&&(l=$[$.length-1].a[0]);for(let e of s.vars.keys())r.globals.set(e,s.vars.get(e));return[{a:[l,t.a],inits:O,funs:i,classes:o,stmts:$},r]},t.tcInit=u,t.tcDef=c,t.tcClass=f,t.tcBlock=g,t.tcStmt=d,t.tcExpr=P,t.tcLiteral=x},591:(e,t)=>{function s(e){return{tag:"num",value:e}}function r(e){return{tag:"bool",value:e}}function n(e,t){return 0===t?{tag:"none"}:{tag:"object",name:e,address:t}}Object.defineProperty(t,"__esModule",{value:!0}),t.CLASS=t.NONE=t.BOOL=t.NUM=t.PyNone=t.PyObj=t.PyBool=t.PyInt=t.PyValue=void 0,t.PyValue=function(e,t){switch(e.tag){case"number":return s(t);case"bool":return r(Boolean(t));case"class":return n(e.name,t);case"none":return{tag:"none"}}},t.PyInt=s,t.PyBool=r,t.PyObj=n,t.PyNone=function(){return{tag:"none"}},t.NUM={tag:"number"},t.BOOL={tag:"bool"},t.NONE={tag:"none"},t.CLASS=function(e){return{tag:"class",name:e}}},697:(e,t,s)=>{const r=s(99),n=s(591);function O(e,t){console.log("Logging from WASM: ",t);const s=document.createElement("pre");return document.getElementById("output").appendChild(s),s.innerText=function(e,t){switch(e.tag){case"number":return t.toString();case"bool":return t?"True":"False";case"none":return"None";case"class":return e.name}}(e,t),t}document.addEventListener("DOMContentLoaded",(async function(){const e=new WebAssembly.Memory({initial:10,maximum:100}),t=await fetch("memory.wasm").then((e=>e.arrayBuffer())).then((t=>WebAssembly.instantiate(t,{js:{mem:e}})));var s={imports:{assert_not_none:e=>function(e){if(0===e)throw new Error("RUNTIME ERROR: cannot perform operation on none");return e}(e),print_num:e=>O(n.NUM,e),print_bool:e=>O(n.BOOL,e),print_none:e=>O(n.NONE,e),abs:Math.abs,min:Math.min,max:Math.max,pow:Math.pow},libmemory:t.instance.exports,memory_values:e,js:{memory:e}},i=new r.BasicREPL(s);function a(e){if(void 0===e)return void console.log("skip");if("none"===e.tag)return;const t=document.createElement("pre");switch(document.getElementById("output").appendChild(t),e.tag){case"num":t.innerText=String(e.value);break;case"bool":t.innerHTML=e.value?"True":"False";break;case"object":t.innerHTML=`<${e.name} object at ${e.address}`;break;default:throw new Error(`Could not render value: ${e}`)}}function o(e){const t=document.createElement("pre");document.getElementById("output").appendChild(t),t.setAttribute("style","color: red"),t.innerText=String(e)}document.getElementById("run").addEventListener("click",(function(e){i=new r.BasicREPL(s);const t=document.getElementById("user-code");document.getElementById("output").innerHTML="",i.run(t.value).then((e=>{a(e),console.log("run finished")})).catch((e=>{o(e),console.log("run failed",e)}))})),function(){document.getElementById("output").innerHTML="";const e=document.getElementById("next-code");e.addEventListener("keypress",(t=>{if(t.shiftKey&&"Enter"===t.key);else if("Enter"===t.key){t.preventDefault();const s=document.createElement("div"),r=document.createElement("span");r.innerText="»",s.appendChild(r);const n=document.createElement("textarea");n.disabled=!0,n.className="repl-code",s.appendChild(n),document.getElementById("output").appendChild(s);const O=e.value;n.value=O,e.value="",i.run(O).then((e=>{a(e),console.log("run finished")})).catch((e=>{o(e),console.log("run failed",e)}))}}))}()}))},113:e=>{e.exports=wabt}},t={};!function s(r){if(t[r])return t[r].exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,s),n.exports}(697)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItYXNtLWppdC8uL25vZGVfbW9kdWxlcy9sZXplci1weXRob24vZGlzdC9pbmRleC5janMiLCJ3ZWJwYWNrOi8vd2ViLWFzbS1qaXQvLi9ub2RlX21vZHVsZXMvbGV6ZXItdHJlZS9kaXN0L3RyZWUuY2pzIiwid2VicGFjazovL3dlYi1hc20taml0Ly4vbm9kZV9tb2R1bGVzL2xlemVyL2Rpc3QvaW5kZXguY2pzIiwid2VicGFjazovL3dlYi1hc20taml0Ly4vYXN0LnRzIiwid2VicGFjazovL3dlYi1hc20taml0Ly4vY29tcGlsZXIudHMiLCJ3ZWJwYWNrOi8vd2ViLWFzbS1qaXQvLi9lcnJvcl9yZXBvcnRpbmcudHMiLCJ3ZWJwYWNrOi8vd2ViLWFzbS1qaXQvLi9sb3dlci50cyIsIndlYnBhY2s6Ly93ZWItYXNtLWppdC8uL3BhcnNlci50cyIsIndlYnBhY2s6Ly93ZWItYXNtLWppdC8uL3JlcGwudHMiLCJ3ZWJwYWNrOi8vd2ViLWFzbS1qaXQvLi9ydW5uZXIudHMiLCJ3ZWJwYWNrOi8vd2ViLWFzbS1qaXQvLi90cmVlcHJpbnRlci50cyIsIndlYnBhY2s6Ly93ZWItYXNtLWppdC8uL3R5cGUtY2hlY2sudHMiLCJ3ZWJwYWNrOi8vd2ViLWFzbS1qaXQvLi91dGlscy50cyIsIndlYnBhY2s6Ly93ZWItYXNtLWppdC8uL3dlYnN0YXJ0LnRzIiwid2VicGFjazovL3dlYi1hc20taml0L2V4dGVybmFsIFwid2FidFwiIiwid2VicGFjazovL3dlYi1hc20taml0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYi1hc20taml0L3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxlemVyIiwiYnJhY2tldGVkIiwiY2FjaGVkSW5kZW50IiwiY2FjaGVkSW5wdXQiLCJjYWNoZWRQb3MiLCJnZXRJbmRlbnQiLCJpbnB1dCIsInBvcyIsImluZGVudCIsImNoIiwiZ2V0IiwiZ2V0SW5kZW50SW5uZXIiLCJuZXdsaW5lcyIsIkV4dGVybmFsVG9rZW5pemVyIiwidG9rZW4iLCJzdGFjayIsIm5leHQiLCJzdGFydCIsImFjY2VwdCIsInN0YXJ0T2YiLCJjb250ZXh0dWFsIiwiZmFsbGJhY2siLCJpbmRlbnRhdGlvbiIsImRlcHRoIiwicHJldiIsImNvbnRleHQiLCJJbmRlbnRMZXZlbCIsInBhcmVudCIsInRoaXMiLCJoYXNoIiwidG9wSW5kZW50IiwidHJhY2tJbmRlbnQiLCJDb250ZXh0VHJhY2tlciIsInNoaWZ0IiwidGVybSIsImxlZ2FjeVByaW50IiwicHJpbnQiLCJpIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsImVuZCIsInRlc3QiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJzcGVjX2lkZW50aWZpZXIiLCJfX3Byb3RvX18iLCJhd2FpdCIsIm9yIiwiYW5kIiwiaW4iLCJub3QiLCJpcyIsImlmIiwiZWxzZSIsImxhbWJkYSIsInlpZWxkIiwiZnJvbSIsImFzeW5jIiwiZm9yIiwiTm9uZSIsIlRydWUiLCJGYWxzZSIsImRlbCIsInBhc3MiLCJicmVhayIsImNvbnRpbnVlIiwicmV0dXJuIiwicmFpc2UiLCJpbXBvcnQiLCJhcyIsImdsb2JhbCIsIm5vbmxvY2FsIiwiYXNzZXJ0IiwiZWxpZiIsIndoaWxlIiwidHJ5IiwiZXhjZXB0IiwiZmluYWxseSIsIndpdGgiLCJkZWYiLCJjbGFzcyIsInBhcnNlciIsIlBhcnNlciIsImRlc2VyaWFsaXplIiwidmVyc2lvbiIsInN0YXRlcyIsInN0YXRlRGF0YSIsImdvdG8iLCJub2RlTmFtZXMiLCJtYXhUZXJtIiwibm9kZVByb3BzIiwiTm9kZVByb3AiLCJncm91cCIsInNraXBwZWROb2RlcyIsInJlcGVhdE5vZGVDb3VudCIsInRva2VuRGF0YSIsInRva2VuaXplcnMiLCJ0b3BSdWxlcyIsInNwZWNpYWxpemVkIiwidG9rZW5QcmVjIiwiRGVmYXVsdEJ1ZmZlckxlbmd0aCIsIm5leHRQcm9wSUQiLCJDYWNoZWROb2RlIiwiV2Vha01hcCIsImlkIiwiRXJyb3IiLCJzdHIiLCJOdW1iZXIiLCJwcm9wT2JqIiwibWF0Y2giLCJOb2RlVHlwZSIsInR5cGUiLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJjbG9zZWRCeSIsInNwbGl0Iiwib3BlbmVkQnkiLCJub1Byb3BzIiwiY3JlYXRlIiwibmFtZSIsInByb3BzIiwiZmxhZ3MiLCJzcGVjIiwidG9wIiwic2tpcHBlZCIsImVycm9yIiwic3JjIiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0IiwicHJvcCIsImluZGV4T2YiLCJtYXAiLCJkaXJlY3QiLCJub2RlIiwiZ3JvdXBzIiwiZm91bmQiLCJub25lIiwiTm9kZVNldCIsInR5cGVzIiwiUmFuZ2VFcnJvciIsIm5ld1R5cGVzIiwibmV3UHJvcHMiLCJzb3VyY2UiLCJhZGQiLCJhc3NpZ24iLCJwdXNoIiwiVHJlZSIsImNoaWxkcmVuIiwicG9zaXRpb25zIiwiYyIsInRvU3RyaW5nIiwiam9pbiIsImlzRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwic2lkZSIsInNjb3BlIiwidG9wTm9kZSIsImN1cnNvciIsIlRyZWVDdXJzb3IiLCJtb3ZlVG8iLCJfdHJlZSIsIlRyZWVOb2RlIiwiZW50ZXIiLCJsZWF2ZSIsInRvIiwibXVzdExlYXZlIiwiaXNBbm9ueW1vdXMiLCJmaXJzdENoaWxkIiwibmV4dFNpYmxpbmciLCJtYXhCdWZmZXJMZW5ndGgiLCJCYWxhbmNlQnJhbmNoRmFjdG9yIiwiYmFsYW5jZVJhbmdlIiwiZGF0YSIsIl9hIiwiYnVmZmVyIiwibm9kZVNldCIsInRvcElEIiwicmV1c2VkIiwibWluUmVwZWF0VHlwZSIsIkZsYXRCdWZmZXJDdXJzb3IiLCJjb250ZXh0SGFzaCIsInRha2VOb2RlIiwicGFyZW50U3RhcnQiLCJtaW5Qb3MiLCJpblJlcGVhdCIsInNpemUiLCJzdGFydFBvcyIsIm1heFNpemUiLCJmb3JrIiwic2tpcCIsIm1pblN0YXJ0Iiwic2NhbiIsIm5vZGVTaXplIiwibG9jYWxTa2lwcGVkIiwibm9kZVN0YXJ0IiwiZmluZEJ1ZmZlclNpemUiLCJVaW50MTZBcnJheSIsImVuZFBvcyIsImluZGV4IiwiY29weVRvQnVmZmVyIiwiVHJlZUJ1ZmZlciIsImxvY2FsQ2hpbGRyZW4iLCJsb2NhbFBvc2l0aW9ucyIsImxvY2FsSW5SZXBlYXQiLCJyZXZlcnNlIiwid2l0aEhhc2giLCJidWZmZXJTdGFydCIsInN0YXJ0SW5kZXgiLCJidWlsZFRyZWUiLCJ0cmVlIiwiZW1wdHkiLCJjaGlsZFN0cmluZyIsImVuZEluZGV4IiwiZGlyIiwiYWZ0ZXIiLCJwaWNrIiwiX3BhcmVudCIsImZ1bGwiLCJlIiwiZmluZENoaWxkIiwiQnVmZmVyTm9kZSIsIkJ1ZmZlckNvbnRleHQiLCJoYXNDaGlsZCIsImlubmVyIiwibmV4dENoaWxkIiwidmFsIiwibmV4dFNpZ25pZmljYW50UGFyZW50IiwiYmVmb3JlIiwiciIsImdldENoaWxkcmVuIiwiY3VyIiwiY2hpbGQiLCJleHRlcm5hbFNpYmxpbmciLCJidWZmZXJOb2RlIiwieWllbGROb2RlIiwibiIsInVuc2hpZnQiLCJ5aWVsZEJ1ZiIsInBvcCIsImQiLCJzaWJsaW5nIiwiYXRMYXN0Tm9kZSIsIm1vdmUiLCJjaGlsZEJlZm9yZSIsImNoaWxkQWZ0ZXIiLCJjYWNoZSIsInNvbWUiLCJvdXRlclR5cGUiLCJpbm5lclR5cGUiLCJtYXhDaGlsZCIsIk1hdGgiLCJtYXgiLCJjZWlsIiwiZ3JvdXBGcm9tIiwiZ3JvdXBTdGFydCIsIm9ubHkiLCJqIiwiY29udGFpbnNUeXBlIiwibm9kZXMiLCJlbHQiLCJUcmVlRnJhZ21lbnQiLCJvZmZzZXQiLCJvcGVuIiwiZnJhZ21lbnRzIiwiY2hhbmdlcyIsIm1pbkdhcCIsImZJIiwibmV4dEYiLCJjSSIsIm9mZiIsIm5leHRDIiwibmV4dFBvcyIsImZyb21BIiwiY3V0IiwiZkZyb20iLCJmVG8iLCJtaW4iLCJ0b0EiLCJ0b0IiLCJwYXJ0aWFsIiwiZiIsIlN0cmluZ0lucHV0Iiwic3RyaW5nIiwic2xpY2UiLCJhdCIsInN0cmluZ0lucHV0IiwiUmVjb3ZlciIsImxlemVyVHJlZSIsIlN0YWNrIiwicCIsInN0YXRlIiwicmVkdWNlUG9zIiwic2NvcmUiLCJidWZmZXJCYXNlIiwiY3VyQ29udGV4dCIsImZpbHRlciIsIl8iLCJjb25jYXQiLCJjeCIsIlN0YWNrQ29udGV4dCIsImFjdGlvbiIsImRQcmVjIiwiZHluYW1pY1ByZWNlZGVuY2UiLCJtaW5SZXBlYXRUZXJtIiwic3RvcmVOb2RlIiwicHVzaFN0YXRlIiwiZ2V0R290byIsInJlZHVjZUNvbnRleHQiLCJiYXNlIiwiY291bnQiLCJzdGF0ZUZsYWciLCJiYXNlU3RhdGVJRCIsImlzUmVkdWNlIiwibmV4dEVuZCIsIm5leHRTdGF0ZSIsIm1heE5vZGUiLCJzaGlmdENvbnRleHQiLCJyZWR1Y2UiLCJ1cGRhdGVDb250ZXh0IiwidHJhY2tlciIsInJldXNlIiwiaXNOb2RlIiwic2ltIiwiU2ltdWxhdGVkU3RhY2siLCJzdGF0ZVNsb3QiLCJoYXNBY3Rpb24iLCJmb3JjZSIsImZyYW1lIiwibmV4dFN0YXRlcyIsImJlc3QiLCJzIiwidiIsInZhbGlkQWN0aW9uIiwiZm9yY2VSZWR1Y2UiLCJvdGhlciIsImRpYWxlY3RJRCIsImRpYWxlY3QiLCJzdHJpY3QiLCJsYXN0IiwibmV3Q3giLCJlbWl0Q29udGV4dCIsInJlc3QiLCJTdGFja0J1ZmZlckN1cnNvciIsIm1heWJlTmV4dCIsIlRva2VuIiwiVG9rZW5Hcm91cCIsImdyb3VwTWFzayIsImFjY0VuZCIsImFsbG93cyIsIm92ZXJyaWRlcyIsImxvdyIsImhpZ2giLCJtaWQiLCJyZWFkVG9rZW4iLCJkZWNvZGVBcnJheSIsIlR5cGUiLCJhcnJheSIsIm91dCIsInN0b3AiLCJkaWdpdCIsInByb3RvdHlwZSIsImV4dGVuZCIsInZlcmJvc2UiLCJwcm9jZXNzIiwiZW52IiwiTE9HIiwic3RhY2tJRHMiLCJjdXRBdCIsInByZXZTaWJsaW5nIiwiRnJhZ21lbnRDdXJzb3IiLCJmcmFnbWVudCIsInNhZmVGcm9tIiwic2FmZVRvIiwidHJlZXMiLCJuZXh0RnJhZ21lbnQiLCJmciIsIm9wZW5TdGFydCIsIm9wZW5FbmQiLCJuZXh0U3RhcnQiLCJDYWNoZWRUb2tlbiIsInN1cGVyIiwiYXJndW1lbnRzIiwiZXh0ZW5kZWQiLCJtYXNrIiwiZHVtbXlUb2tlbiIsIlRva2VuQ2FjaGUiLCJ0b2tlbnMiLCJtYWluVG9rZW4iLCJhY3Rpb25zIiwiYWN0aW9uSW5kZXgiLCJtYWluIiwidG9rZW5pemVyIiwidXBkYXRlQ2FjaGVkVG9rZW4iLCJhZGRBY3Rpb25zIiwiZW9mVGVybSIsImNsZWFyIiwic3BlY2lhbGl6ZXJzIiwicmVhZCIsInB1dEFjdGlvbiIsInBhaXIiLCJSZWMiLCJQYXJzZSIsInJlY292ZXJpbmciLCJuZXh0U3RhY2tJRCIsIm5lc3RlZCIsIm5lc3RFbmQiLCJuZXN0V3JhcCIsInRvcFRlcm0iLCJzdGFja3MiLCJhZHZhbmNlIiwiZmluaXNoTmVzdGVkIiwic3RvcHBlZCIsInN0b3BwZWRUb2tlbnMiLCJtYXliZU5lc3QiLCJuZXdTdGFja3MiLCJuZXN0IiwiY2hlY2tOZXN0IiwiYWR2YW5jZVN0YWNrIiwidG9rIiwic3RhcnROZXN0ZWQiLCJmaW5pc2hlZCIsImZpbmRGaW5pc2hlZCIsInN0YWNrVG9UcmVlIiwiY29uc29sZSIsImxvZyIsImdldE5hbWUiLCJTeW50YXhFcnJvciIsInJ1blJlY292ZXJ5IiwiZm9yY2VBbGwiLCJtYXhSZW1haW5pbmciLCJzb3J0IiwiYSIsImIiLCJvdXRlciIsInNhbWVTdGF0ZSIsInNwbGljZSIsInN0YWNrSUQiLCJzdHJpY3RDeCIsImN4SGFzaCIsImNhY2hlZCIsIm5vZGVBdCIsInVzZU5vZGUiLCJkZWZhdWx0UmVkdWNlIiwiZ2V0QWN0aW9ucyIsImxvY2FsU3RhY2siLCJhcHBseSIsInB1c2hTdGFja0RlZHVwIiwicmVzdGFydGVkIiwidG9rZW5FbmQiLCJkZWFkRW5kIiwicmVzdGFydCIsImRvbmUiLCJhZHZhbmNlRnVsbHkiLCJmb3JjZUJhc2UiLCJpbnNlcnQiLCJyZWNvdmVyQnlJbnNlcnQiLCJyZWNvdmVyQnlEZWxldGUiLCJmb3JjZUZpbmlzaCIsImJ1aWxkIiwiYnVmZmVyTGVuZ3RoIiwiaW5mbyIsImZpbmROZXN0ZWQiLCJzY2FuRm9yTmVzdEVuZCIsImZpbHRlckVuZCIsIndyYXBUeXBlIiwic3RhcnRQYXJzZSIsImNsaXAiLCJlbmRUb2tlbiIsInBsYWNlaG9sZGVyIiwiZnJvbUNvZGVQb2ludCIsIkRpYWxlY3QiLCJkaXNhYmxlZCIsIngiLCJjYWNoZWREaWFsZWN0IiwidG9rZW5BcnJheSIsInNldFByb3AiLCJub2RlSUQiLCJwcm9wU3BlYyIsIlVpbnQzMkFycmF5IiwidG9wVGVybXMiLCJrZXlzIiwiZGVmaW5lIiwiZGlhbGVjdHMiLCJkeW5hbWljUHJlY2VkZW5jZXMiLCJ0b2tlblByZWNUYWJsZSIsInRlcm1OYW1lcyIsInBhcnNlRGlhbGVjdCIsImxvb3NlIiwidGFibGUiLCJncm91cFRhZyIsInRhcmdldCIsInRlcm1pbmFsIiwic2xvdCIsImZsYWciLCJpUHJldiIsImZpbmRPZmZzZXQiLCJjb25maWciLCJjb3B5IiwidCIsImZpbmQiLCJvYmoiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJwcmVjIiwidmFsdWVzIiwicGFydCIsIlVpbnQ4QXJyYXkiLCJvcHRpb25zIiwiVW5pT3AiLCJCaW5PcCIsIm1ha2VMb2NhbHMiLCJsb2NhbHMiLCJsb2NhbERlZmluZXMiLCJmb3JFYWNoIiwiY29kZUdlblN0bXQiLCJzdG10IiwidGFnIiwiY29kZUdlblZhbHVlIiwidmFsU3RtdHMiLCJjb2RlR2VuRXhwciIsImhhcyIsImV4cHIiLCJ0aG5JZHgiLCJsYWJlbHMiLCJmaW5kSW5kZXgiLCJ0aG4iLCJlbHNJZHgiLCJlbHMiLCJjb25kIiwibGJsIiwibGVmdCIsInJpZ2h0IiwiY29kZUdlbkJpbk9wIiwib3AiLCJleHByU3RtdHMiLCJOZWciLCJOb3QiLCJhcmdUeXAiLCJhcmdTdG10cyIsImFyZyIsImNhbGxOYW1lIiwiTlVNIiwiQk9PTCIsIk5PTkUiLCJmbGF0IiwiYW1vdW50IiwiUGx1cyIsIk1pbnVzIiwiTXVsIiwiSURpdiIsIk1vZCIsIkVxIiwiTmVxIiwiTHRlIiwiR3RlIiwiTHQiLCJHdCIsIklzIiwiQW5kIiwiT3IiLCJjb2RlR2VuSW5pdCIsImluaXQiLCJjb2RlR2VuRGVmIiwiZGVmaW5lZFZhcnMiLCJTZXQiLCJpbml0cyIsInBhcmFtZXRlcnMiLCJib2R5IiwiYmxvY2siLCJsYWJlbCIsInBhcmFtcyIsImJvZHlDb21tYW5kcyIsImJsb2NrQ29tbWFuZHMiLCJzdG10cyIsImVtcHR5RW52IiwiZ2xvYmFscyIsIk1hcCIsImNsYXNzZXMiLCJhc3QiLCJ3aXRoRGVmaW5lcyIsImdsb2JhbE5hbWVzIiwiZnVucyIsImNscyIsIm1ldGhvZHMiLCJtZXRob2QiLCJjb2RlR2VuQ2xhc3MiLCJhbGxGdW5zIiwiYWxsQ29tbWFuZHMiLCJmdW5jdGlvbnMiLCJtYWluU291cmNlIiwibmV3RW52IiwiQ29tcGlsZVRpbWVFcnJvciIsIm1lc3NhZ2UiLCJ0cnVlUHJvdG8iLCJsaW5lIiwiUnVuVGltZUVycm9yIiwibmFtZUNvdW50ZXJzIiwiZ2VuZXJhdGVOYW1lIiwibG93ZXJGdW5EZWZzIiwiZnMiLCJibG9ja3MiLCJmaXJzdEJsb2NrIiwiYm9keWluaXRzIiwiZmxhdHRlblN0bXRzIiwibG93ZXJWYXJJbml0cyIsImxvd2VyRnVuRGVmIiwibG93ZXJWYXJJbml0IiwibGl0ZXJhbFRvVmFsIiwibG93ZXJDbGFzc2VzIiwiZmllbGRzIiwibG93ZXJDbGFzcyIsImxpdCIsIkJpZ0ludCIsInZhbGluaXRzIiwidmFsc3RtdHMiLCJ2YWxlIiwiZmxhdHRlbkV4cHJUb0V4cHIiLCJmbGF0dGVuRXhwclRvVmFsIiwib2luaXRzIiwib3N0bXRzIiwib3ZhbCIsIm5pbml0cyIsIm5zdG10cyIsIm52YWwiLCJmaWVsZCIsInB1c2hTdG10c1RvTGFzdEJsb2NrIiwidGhlbkxibCIsImVsc2VMYmwiLCJlbmRMYmwiLCJlbmRqbXAiLCJjaW5pdHMiLCJjc3RtdHMiLCJjZXhwciIsImNvbmRqbXAiLCJ0aGVuaW5pdHMiLCJlbHNlaW5pdHMiLCJ3aGlsZVN0YXJ0TGJsIiwid2hpbGVib2R5TGJsIiwid2hpbGVFbmRMYmwiLCJmbGF0dGVuU3RtdCIsImxpbml0cyIsImxzdG10cyIsImx2YWwiLCJyaW5pdHMiLCJyc3RtdHMiLCJydmFsIiwiY2FsbHBhaXJzIiwiY2FsbGluaXRzIiwiY3AiLCJjYWxsc3RtdHMiLCJjYWxsdmFscyIsIm9iamluaXRzIiwib2Jqc3RtdHMiLCJvYmp2YWwiLCJhcmdwYWlycyIsImFyZ2luaXRzIiwiYXJnc3RtdHMiLCJhcmd2YWxzIiwib2JqVHlwIiwiY2xhc3NkYXRhIiwiZW50cmllcyIsIm5ld05hbWUiLCJhbGxvYyIsImFzc2lnbnMiLCJiaW5pdHMiLCJic3RtdHMiLCJiZXhwciIsInNldE5ld05hbWUiLCJnZXRTb3VyY2VMb2NhdGlvbiIsInN1YnN0cmluZyIsInRyYXZlcnNlTGl0ZXJhbCIsImxvY2F0aW9uIiwiUGFyc2VFcnJvciIsInRyYXZlcnNlRXhwciIsImNhbGxFeHByIiwiYXJncyIsInRyYXZlcnNlQXJndW1lbnRzIiwibGhzRXhwciIsInJoc0V4cHIiLCJvYmpFeHByIiwicHJvcE5hbWUiLCJ0cmF2ZXJzZVN0bXQiLCJ0cmF2ZXJzZVR5cGUiLCJDTEFTUyIsInRyYXZlcnNlUGFyYW1ldGVycyIsInR5cCIsInRyYXZlcnNlVmFySW5pdCIsInRyYXZlcnNlRnVuRGVmIiwicmV0IiwiaXNWYXJJbml0IiwidHJhdmVyc2VDbGFzcyIsImNsYXNzTmFtZSIsImlzRnVuRGVmIiwiaXNWYXIiLCJpc0NsYXNzRGVmIiwidHJhdmVyc2UiLCJwYXJzZSIsInN0cmluZ2lmeVRyZWUiLCJpbXBvcnRPYmplY3QiLCJqcyIsIm1lbW9yeSIsIldlYkFzc2VtYmx5IiwiTWVtb3J5IiwiaW5pdGlhbCIsIm1heGltdW0iLCJJbnQzMkFycmF5IiwiY3VycmVudEVudiIsImN1cnJlbnRUeXBlRW52IiwiZGVmYXVsdFR5cGVFbnYiLCJ0eXBlRW52IiwibmV3VHlwZUVudiIsIm5ld0Z1bmN0aW9ucyIsImluc3RhbmNlIiwicnVuIiwiY3VycmVudEdsb2JhbHMiLCJrIiwibWF5YmVHbG9iYWwiLCJHbG9iYWwiLCJwYXJzZWQiLCJ0YyIsIm9sZFByb2Nlc3NPbiIsIm9uIiwicnVuV2F0IiwiYXNCaW5hcnkiLCJwYXJzZVdhdCIsInRvQmluYXJ5Iiwid2FzbU1vZHVsZSIsImluc3RhbnRpYXRlIiwiZXhwb3J0ZWRfZnVuYyIsImF1Z21lbnRFbnYiLCJwcm9nIiwibmV3R2xvYmFscyIsIm5ld0NsYXNzZXMiLCJuZXdPZmZzZXQiLCJjbGFzc0ZpZWxkcyIsInRwcm9ncmFtIiwidGVudiIsImdsb2JhbEVudiIsImlycHJvZ3JhbSIsImxvd2VyUHJvZ3JhbSIsInByb2dUeXAiLCJyZXR1cm5UeXBlIiwicmV0dXJuRXhwciIsImdsb2JhbHNCZWZvcmUiLCJjb21waWxlZCIsImNvbXBpbGUiLCJnbG9iYWxJbXBvcnRzIiwiZ2xvYmFsRGVjbHMiLCJ3YXNtU291cmNlIiwiUHlWYWx1ZSIsInJlcGVhdCIsImluY2x1ZGVzIiwiZGVmYXVsdEdsb2JhbEZ1bmN0aW9ucyIsImVtcHR5TG9jYWxUeXBlRW52IiwidmFycyIsImV4cGVjdGVkUmV0IiwiYWN0dWFsUmV0IiwidG9wTGV2ZWwiLCJlcXVhbFR5cGUiLCJ0MSIsInQyIiwiaXNOb25lT3JDbGFzcyIsImlzU3VidHlwZSIsImlzQXNzaWduYWJsZSIsImF1Z21lbnRURW52IiwicHJvZ3JhbSIsIm5ld0dsb2JzIiwibmV3RnVucyIsImZ1biIsInRjSW5pdCIsInZhbFR5cCIsInRjTGl0ZXJhbCIsIlR5cGVDaGVja0Vycm9yIiwidGNEZWYiLCJ0Y2luaXRzIiwidGNpbml0IiwidEJvZHkiLCJ0Y0Jsb2NrIiwidGNDbGFzcyIsInRGaWVsZHMiLCJ0TWV0aG9kcyIsInRjU3RtdCIsInRWYWxFeHByIiwidGNFeHByIiwibmFtZVR5cCIsInRFeHByIiwidENvbmQiLCJ0VGhuIiwidGhuVHlwIiwidEVscyIsImVsc1R5cCIsInRSZXQiLCJ0T2JqIiwidFZhbCIsInRMZWZ0IiwidFJpZ2h0IiwidEJpbiIsInRVbmkiLCJ0QXJnIiwiZXhwZWN0ZWRBcmdUeXAiLCJyZXRUeXAiLCJUeXBlRXJyb3IiLCJsZWZ0VHlwIiwicmlnaHRUeXAiLCJ0TGVmdEFyZyIsInRSaWdodEFyZyIsInRDb25zdHJ1Y3QiLCJpbml0QXJncyIsImluaXRSZXQiLCJhcmdUeXBlcyIsInJldFR5cGUiLCJ0QXJncyIsImV2ZXJ5IiwibWV0aG9kQXJncyIsIm1ldGhvZFJldCIsInJlYWxBcmdzIiwibGl0ZXJhbCIsInRJbml0cyIsInREZWZzIiwidENsYXNzZXMiLCJsYXN0VHlwIiwiUHlJbnQiLCJQeUJvb2wiLCJQeU9iaiIsImFkZHJlc3MiLCJCb29sZWFuIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmRDaGlsZCIsImlubmVyVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJtZW1vcnlNb2R1bGUiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImFycmF5QnVmZmVyIiwiYnl0ZXMiLCJtZW0iLCJpbXBvcnRzIiwiYXNzZXJ0X25vdF9ub25lIiwicHJpbnRfbnVtIiwicHJpbnRfYm9vbCIsInByaW50X25vbmUiLCJhYnMiLCJwb3ciLCJsaWJtZW1vcnkiLCJtZW1vcnlfdmFsdWVzIiwicmVwbCIsIkJhc2ljUkVQTCIsInJlbmRlclJlc3VsdCIsImlubmVySFRNTCIsInJlbmRlckVycm9yIiwic2V0QXR0cmlidXRlIiwiY2F0Y2giLCJyZXBsQ29kZUVsZW1lbnQiLCJzaGlmdEtleSIsImtleSIsInByZXZlbnREZWZhdWx0Iiwib3V0cHV0IiwicHJvbXB0Iiwic2V0dXBSZXBsIiwibW9kdWxlIiwid2FidCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iXSwibWFwcGluZ3MiOiJ3Q0FFQUEsT0FBT0MsZUFBZUMsRUFBUyxhQUEvQixDQUErQ0MsT0FB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QVY5bkIsRUFBRStuQixVQUNaLEdBQWMsVUFBVi9uQixFQUFFK25CLElBQWlCLENBQzVCL25CLEVBQUVnb0IsaUJBQ0YsTUFBTUMsRUFBU2pDLFNBQVNDLGNBQWMsT0FDaENpQyxFQUFTbEMsU0FBU0MsY0FBYyxRQUN0Q2lDLEVBQU85QixVQUFZLElBQ25CNkIsRUFBTzlCLFlBQVkrQixHQUNuQixNQUFNemxCLEVBQU11akIsU0FBU0MsY0FBYyxZQUVuQ3hqQixFQUFJb04sVUFBVyxFQUNmcE4sRUFBSWdiLFVBQVksWUFDaEJ3SyxFQUFPOUIsWUFBWTFqQixHQUNuQnVqQixTQUFTRSxlQUFlLFVBQVVDLFlBQVk4QixHQUM5QyxNQUFNOXNCLEVBQVMwc0IsRUFBZ0IxMUIsTUFDL0JzUSxFQUFJdFEsTUFBUWdKLEVBQ1owc0IsRUFBZ0IxMUIsTUFBUSxHQUN4Qm0xQixFQUFLdkksSUFBSTVqQixHQUFRcXJCLE1BQU05bEIsSUFBUThtQixFQUFhOW1CLEdBQUltTSxRQUFRQyxJQUFLLG1CQUN4RDhhLE9BQU81bkIsSUFBUTBuQixFQUFZMW5CLEdBQUk2TSxRQUFRQyxJQUFJLGFBQWM5TSxVQWdCcEVtb0IsTyxRQzdISkMsRUFBT2wyQixRQUFVbTJCLE9DQ2JDLEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVV0MkIsUUFHM0MsSUFBSWsyQixFQUFTRSxFQUF5QkUsR0FBWSxDQUdqRHQyQixRQUFTLElBT1YsT0FIQXUyQixFQUFvQkQsR0FBVTVXLEtBQUt3VyxFQUFPbDJCLFFBQVNrMkIsRUFBUUEsRUFBT2wyQixRQUFTcTJCLEdBR3BFSCxFQUFPbDJCLFFDbEJmcTJCLENBQW9CLE0iLCJmaWxlIjoid2Vic3RhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBsZXplciA9IHJlcXVpcmUoJ2xlemVyJyk7XG5cbi8vIFRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IGxlemVyLWdlbmVyYXRvci4gWW91IHByb2JhYmx5IHNob3VsZG4ndCBlZGl0IGl0LlxuY29uc3QgcHJpbnRLZXl3b3JkID0gMSxcbiAgaW5kZW50ID0gMTYyLFxuICBkZWRlbnQgPSAxNjMsXG4gIG5ld2xpbmUkMSA9IDE2NCxcbiAgbmV3bGluZUJyYWNrZXRlZCA9IDE2NSxcbiAgbmV3bGluZUVtcHR5ID0gMTY2LFxuICBlb2YgPSAxNjcsXG4gIFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uID0gMjEsXG4gIFR1cGxlRXhwcmVzc2lvbiA9IDQ3LFxuICBDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiA9IDQ4LFxuICBBcnJheUV4cHJlc3Npb24gPSA1MixcbiAgQXJyYXlDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiA9IDU1LFxuICBEaWN0aW9uYXJ5RXhwcmVzc2lvbiA9IDU2LFxuICBEaWN0aW9uYXJ5Q29tcHJlaGVuc2lvbkV4cHJlc3Npb24gPSA1OSxcbiAgU2V0RXhwcmVzc2lvbiA9IDYwLFxuICBTZXRDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiA9IDYxLFxuICBBcmdMaXN0ID0gNjMsXG4gIFBhcmFtTGlzdCA9IDEyMTtcblxuY29uc3QgbmV3bGluZSA9IDEwLCBjYXJyaWFnZVJldHVybiA9IDEzLCBzcGFjZSA9IDMyLCB0YWIgPSA5LCBoYXNoID0gMzUsIHBhcmVuT3BlbiA9IDQwLCBkb3QgPSA0NjtcblxuY29uc3QgYnJhY2tldGVkID0gW1xuICBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiwgVHVwbGVFeHByZXNzaW9uLCBDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiwgQXJyYXlFeHByZXNzaW9uLCBBcnJheUNvbXByZWhlbnNpb25FeHByZXNzaW9uLFxuICBEaWN0aW9uYXJ5RXhwcmVzc2lvbiwgRGljdGlvbmFyeUNvbXByZWhlbnNpb25FeHByZXNzaW9uLCBTZXRFeHByZXNzaW9uLCBTZXRDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiwgQXJnTGlzdCwgUGFyYW1MaXN0XG5dO1xuXG5sZXQgY2FjaGVkSW5kZW50ID0gMCwgY2FjaGVkSW5wdXQgPSBudWxsLCBjYWNoZWRQb3MgPSAwO1xuZnVuY3Rpb24gZ2V0SW5kZW50KGlucHV0LCBwb3MpIHtcbiAgaWYgKHBvcyA9PSBjYWNoZWRQb3MgJiYgaW5wdXQgPT0gY2FjaGVkSW5wdXQpIHJldHVybiBjYWNoZWRJbmRlbnRcbiAgY2FjaGVkSW5wdXQgPSBpbnB1dDsgY2FjaGVkUG9zID0gcG9zO1xuICByZXR1cm4gY2FjaGVkSW5kZW50ID0gZ2V0SW5kZW50SW5uZXIoaW5wdXQsIHBvcylcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZW50SW5uZXIoaW5wdXQsIHBvcykge1xuICBmb3IgKGxldCBpbmRlbnQgPSAwOzsgcG9zKyspIHtcbiAgICBsZXQgY2ggPSBpbnB1dC5nZXQocG9zKTtcbiAgICBpZiAoY2ggPT0gc3BhY2UpIGluZGVudCsrO1xuICAgIGVsc2UgaWYgKGNoID09IHRhYikgaW5kZW50ICs9IDggLSAoaW5kZW50ICUgOCk7XG4gICAgZWxzZSBpZiAoY2ggPT0gbmV3bGluZSB8fCBjaCA9PSBjYXJyaWFnZVJldHVybiB8fCBjaCA9PSBoYXNoKSByZXR1cm4gLTFcbiAgICBlbHNlIHJldHVybiBpbmRlbnRcbiAgfVxufVxuXG5jb25zdCBuZXdsaW5lcyA9IG5ldyBsZXplci5FeHRlcm5hbFRva2VuaXplcigoaW5wdXQsIHRva2VuLCBzdGFjaykgPT4ge1xuICBsZXQgbmV4dCA9IGlucHV0LmdldCh0b2tlbi5zdGFydCk7XG4gIGlmIChuZXh0IDwgMCkge1xuICAgIHRva2VuLmFjY2VwdChlb2YsIHRva2VuLnN0YXJ0KTtcbiAgfSBlbHNlIGlmIChuZXh0ICE9IG5ld2xpbmUgJiYgbmV4dCAhPSBjYXJyaWFnZVJldHVybikgOyBlbHNlIGlmIChzdGFjay5zdGFydE9mKGJyYWNrZXRlZCkgIT0gbnVsbCkge1xuICAgIHRva2VuLmFjY2VwdChuZXdsaW5lQnJhY2tldGVkLCB0b2tlbi5zdGFydCArIDEpO1xuICB9IGVsc2UgaWYgKGdldEluZGVudChpbnB1dCwgdG9rZW4uc3RhcnQgKyAxKSA8IDApIHtcbiAgICB0b2tlbi5hY2NlcHQobmV3bGluZUVtcHR5LCB0b2tlbi5zdGFydCArIDEpO1xuICB9IGVsc2Uge1xuICAgIHRva2VuLmFjY2VwdChuZXdsaW5lJDEsIHRva2VuLnN0YXJ0ICsgMSk7XG4gIH1cbn0sIHtjb250ZXh0dWFsOiB0cnVlLCBmYWxsYmFjazogdHJ1ZX0pO1xuXG5jb25zdCBpbmRlbnRhdGlvbiA9IG5ldyBsZXplci5FeHRlcm5hbFRva2VuaXplcigoaW5wdXQsIHRva2VuLCBzdGFjaykgPT4ge1xuICBsZXQgcHJldiA9IGlucHV0LmdldCh0b2tlbi5zdGFydCAtIDEpLCBkZXB0aDtcbiAgaWYgKChwcmV2ID09IG5ld2xpbmUgfHwgcHJldiA9PSBjYXJyaWFnZVJldHVybikgJiZcbiAgICAgIChkZXB0aCA9IGdldEluZGVudChpbnB1dCwgdG9rZW4uc3RhcnQpKSA+PSAwICYmXG4gICAgICBkZXB0aCAhPSBzdGFjay5jb250ZXh0LmRlcHRoICYmXG4gICAgICBzdGFjay5zdGFydE9mKGJyYWNrZXRlZCkgPT0gbnVsbClcbiAgICB0b2tlbi5hY2NlcHQoZGVwdGggPCBzdGFjay5jb250ZXh0LmRlcHRoID8gZGVkZW50IDogaW5kZW50LCB0b2tlbi5zdGFydCk7XG59KTtcblxuZnVuY3Rpb24gSW5kZW50TGV2ZWwocGFyZW50LCBkZXB0aCkge1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICB0aGlzLmhhc2ggPSAocGFyZW50ID8gcGFyZW50Lmhhc2ggKyBwYXJlbnQuaGFzaCA8PCA4IDogMCkgKyBkZXB0aCArIChkZXB0aCA8PCA0KTtcbn1cblxuY29uc3QgdG9wSW5kZW50ID0gbmV3IEluZGVudExldmVsKG51bGwsIDApO1xuXG5jb25zdCB0cmFja0luZGVudCA9IG5ldyBsZXplci5Db250ZXh0VHJhY2tlcih7XG4gIHN0YXJ0OiB0b3BJbmRlbnQsXG4gIHNoaWZ0KGNvbnRleHQsIHRlcm0sIGlucHV0LCBzdGFjaykge1xuICAgIHJldHVybiB0ZXJtID09IGluZGVudCA/IG5ldyBJbmRlbnRMZXZlbChjb250ZXh0LCBnZXRJbmRlbnQoaW5wdXQsIHN0YWNrLnBvcykpIDpcbiAgICAgIHRlcm0gPT0gZGVkZW50ID8gY29udGV4dC5wYXJlbnQgOiBjb250ZXh0XG4gIH0sXG4gIGhhc2goY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5oYXNoIH1cbn0pO1xuXG5jb25zdCBsZWdhY3lQcmludCA9IG5ldyBsZXplci5FeHRlcm5hbFRva2VuaXplcigoaW5wdXQsIHRva2VuKSA9PiB7XG4gIGxldCBwb3MgPSB0b2tlbi5zdGFydDtcbiAgZm9yIChsZXQgcHJpbnQgPSBcInByaW50XCIsIGkgPSAwOyBpIDwgcHJpbnQubGVuZ3RoOyBpKyssIHBvcysrKVxuICAgIGlmIChpbnB1dC5nZXQocG9zKSAhPSBwcmludC5jaGFyQ29kZUF0KGkpKSByZXR1cm5cbiAgbGV0IGVuZCA9IHBvcztcbiAgaWYgKC9cXHcvLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShpbnB1dC5nZXQocG9zKSkpKSByZXR1cm5cbiAgZm9yICg7OyBwb3MrKykge1xuICAgIGxldCBuZXh0ID0gaW5wdXQuZ2V0KHBvcyk7XG4gICAgaWYgKG5leHQgPT0gc3BhY2UgfHwgbmV4dCA9PSB0YWIpIGNvbnRpbnVlXG4gICAgaWYgKG5leHQgIT0gcGFyZW5PcGVuICYmIG5leHQgIT0gZG90ICYmIG5leHQgIT0gbmV3bGluZSAmJiBuZXh0ICE9IGNhcnJpYWdlUmV0dXJuICYmIG5leHQgIT0gaGFzaClcbiAgICAgIHRva2VuLmFjY2VwdChwcmludEtleXdvcmQsIGVuZCk7XG4gICAgcmV0dXJuXG4gIH1cbn0pO1xuXG4vLyBUaGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSBsZXplci1nZW5lcmF0b3IuIFlvdSBwcm9iYWJseSBzaG91bGRuJ3QgZWRpdCBpdC5cbmNvbnN0IHNwZWNfaWRlbnRpZmllciA9IHtfX3Byb3RvX186bnVsbCxhd2FpdDo0MCwgb3I6NDgsIGFuZDo1MCwgaW46NTQsIG5vdDo1NiwgaXM6NTgsIGlmOjY0LCBlbHNlOjY2LCBsYW1iZGE6NzAsIHlpZWxkOjg4LCBmcm9tOjkwLCBhc3luYzo5OCwgZm9yOjEwMCwgTm9uZToxNTIsIFRydWU6MTU0LCBGYWxzZToxNTQsIGRlbDoxNjgsIHBhc3M6MTcyLCBicmVhazoxNzYsIGNvbnRpbnVlOjE4MCwgcmV0dXJuOjE4NCwgcmFpc2U6MTkyLCBpbXBvcnQ6MTk2LCBhczoxOTgsIGdsb2JhbDoyMDIsIG5vbmxvY2FsOjIwNCwgYXNzZXJ0OjIwOCwgZWxpZjoyMTgsIHdoaWxlOjIyMiwgdHJ5OjIyOCwgZXhjZXB0OjIzMCwgZmluYWxseToyMzIsIHdpdGg6MjM2LCBkZWY6MjQwLCBjbGFzczoyNTB9O1xuY29uc3QgcGFyc2VyID0gbGV6ZXIuUGFyc2VyLmRlc2VyaWFsaXplKHtcbiAgdmVyc2lvbjogMTMsXG4gIHN0YXRlczogXCIhP3xPYFEkSVhPT08lY1EkSVtPJyNHYU9PUSRJUycjQ20nI0NtT09RJElTJyNDbicjQ25PJ1JRJElXTycjQ2xPKHRRJElbTycjR2BPT1EkSVMnI0dhJyNHYU9PUSRJUycjRFInI0RST09RJElTJyNHYCcjR2BPKWJRJElXTycjQ3FPKXJRJElXTycjRGJPKlNRJElXTycjRGZPT1EkSVMnI0RzJyNEc08qZ09gTycjRHNPKm9PcE8nI0RzTyp3TyFiTycjRHRPK1NPI3RPJyNEdE8rX08mak8nI0R0TytqTyxVTycjRHRPLWxRJElbTycjR1FPT1EkSVMnI0dRJyNHUU8nUlEkSVdPJyNHUE8vT1EkSVtPJyNHUE9PUSRJUycjRV0nI0VdTy9nUSRJV08nI0VeT09RJElTJyNHTycjR09PL3FRJElXTycjRn1PT1EkSVYnI0Z9JyNGfU8vfFEkSVdPJyNGUE9PUSRJUycjRnInI0ZyTzBSUSRJV08nI0ZPT09RJElWJyNIWicjSFpPT1EkSVYnI0Z8JyNGfE9PUSRJVCcjRlInI0ZSUWBRJElYT09PJ1JRJElXTycjQ29PMGFRJElXTycjQ3pPMGhRJElXTycjRE9PMHZRJElXTycjR2VPMVdRJElbTycjRVFPJ1JRJElXTycjRVJPT1EkSVMnI0VUJyNFVE9PUSRJUycjRVYnI0VWT09RJElTJyNFWCcjRVhPMWxRJElXTycjRVpPMlNRJElXTycjRV9PL3xRJElXTycjRWFPMmdRJElbTycjRWFPL3xRJElXTycjRWRPL2dRJElXTycjRWdPL2dRJElXTycjRWtPL2dRJElXTycjRW5PMnJRJElXTycjRXBPMnlRJElXTycjRXVPM1VRJElXTycjRXFPL2dRJElXTycjRXVPL3xRJElXTycjRXdPL3xRJElXTycjRXxPT1EkSVMnI0NjJyNDY09PUSRJUycjQ2QnI0NkT09RJElTJyNDZScjQ2VPT1EkSVMnI0NmJyNDZk9PUSRJUycjQ2cnI0NnT09RJElTJyNDaCcjQ2hPT1EkSVMnI0NqJyNDak8nUlEkSVdPLDU4fE8nUlEkSVdPLDU4fE8nUlEkSVdPLDU4fE8nUlEkSVdPLDU4fE8nUlEkSVdPLDU4fE8nUlEkSVdPLDU4fE8zWlEkSVdPJyNEbU9PUSRJUyw1OlcsNTpXTzNuUSRJV08sNTpaTzN7USUxYE8sNTpaTzRRUSRJW08sNTlXTzBhUSRJV08sNTlfTzBhUSRJV08sNTlfTzBhUSRJV08sNTlfTzZwUSRJV08sNTlfTzZ1USRJV08sNTlfTzZ8USRJV08sNTlnTzdUUSRJV08nI0dgTzhaUSRJV08nI0dfT09RJElTJyNHXycjR19PT1EkSVMnI0RYJyNEWE84clEkSVdPLDU5XU8nUlEkSVdPLDU5XU85UVEkSVdPLDU5XU85VlEkSVdPLDU6UE8nUlEkSVdPLDU6UE9PUSRJUyw1OXwsNTl8TzllUSRJV08sNTl8TzlqUSRJV08sNTpWTydSUSRJV08sNTpWTydSUSRJV08sNTpUT09RJElTLDU6USw1OlFPOXtRJElXTyw1OlFPOlFRJElXTyw1OlVPT09PJyNGWicjRlpPOlZPYE8sNTpfT09RJElTLDU6Xyw1Ol9PT09PJyNGWycjRltPOl9PcE8sNTpfTzpnUSRJV08nI0R1T09PTycjRl0nI0ZdTzp3TyFiTyw1OmBPT1EkSVMsNTpgLDU6YE9PT08nI0ZgJyNGYE87U08jdE8sNTpgT09PTycjRmEnI0ZhTztfTyZqTyw1OmBPT09PJyNGYicjRmJPO2pPLFVPLDU6YE9PUSRJUycjRmMnI0ZjTzt1USRJW08sNTpkTz5nUSRJW08sNTxrTz9RUSVHbE8sNTxrTz9xUSRJW08sNTxrT09RJElTLDU6eCw1OnhPQFlRJElYTycjRmtPQWlRJElXTyw1O1RPT1EkSVYsNTxpLDU8aU9BdFEkSVtPJyNIV09CXVEkSVdPLDU7a09PUSRJUy1FOXAtRTlwT09RJElWLDU7aiw1O2pPM1BRJElXTycjRXdPT1EkSVQtRTlQLUU5UE9CZVEkSVtPLDU5Wk9EbFEkSVtPLDU5Zk9FVlEkSVdPJyNHYk9FYlEkSVdPJyNHYk8vfFEkSVdPJyNHYk9FbVEkSVdPJyNEUU9FdVEkSVdPLDU5ak9FelEkSVdPJyNHZk8nUlEkSVdPJyNHZk8vZ1EkSVdPLDU9UE9PUSRJUyw1PVAsNT1QTy9nUSRJV08nI0R8T09RJElTJyNEfScjRH1PRmlRJElXTycjRmVPRnlRJElXTyw1OHpPR1hRJElXTyw1OHpPKWVRJElXTyw1OmpPR15RJElbTycjR2hPT1EkSVMsNTptLDU6bU9PUSRJUyw1OnUsNTp1T0dxUSRJV08sNTp5T0hTUSRJV08sNTp7T09RJElTJyNGaCcjRmhPSGJRJElbTyw1OntPSHBRJElXTyw1OntPSHVRJElXTycjSFlPT1EkSVMsNTtPLDU7T09JVFEkSVdPJyNIVk9PUSRJUyw1O1IsNTtSTzNVUSRJV08sNTtWTzNVUSRJV08sNTtZT0lmUSRJW08nI0hbTydSUSRJV08nI0hbT0lwUSRJV08sNTtbTzJyUSRJV08sNTtbTy9nUSRJV08sNTthTy98USRJV08sNTtjT0l1USRJWE8nI0VsT0tPUSRJWk8sNTtdT05hUSRJV08nI0hdTzNVUSRJV08sNTthT05sUSRJV08sNTtjT05xUSRJV08sNTtoTyEjZlEkSVtPMUcuaE8hI21RJElbTzFHLmhPISZeUSRJW08xRy5oTyEmaFEkSVtPMUcuaE8hKVJRJElbTzFHLmhPISlmUSRJW08xRy5oTyEpeVEkSVdPJyNHbk8hKlhRJElbTycjR1FPL2dRJElXTycjR25PISpjUSRJV08nI0dtT09RJElTLDU6WCw1OlhPISprUSRJV08sNTpYTyEqcFEkSVdPJyNHb08hKntRJElXTycjR29PIStgUSRJV08xRy91T09RJElTJyNEcScjRHFPT1EkSVMxRy91MUcvdU9PUSRJUzFHLnkxRy55TyEsYFEkSVtPMUcueU8hLGdRJElbTzFHLnlPMGFRJElXTzFHLnlPIS1TUSRJV08xRy9ST09RJElTJyNEVycjRFdPL2dRJElXTyw1OXFPT1EkSVMxRy53MUcud08hLVpRJElXTzFHL2NPIS1rUSRJV08xRy9jTyEtc1EkSVdPMUcvZE8nUlEkSVdPJyNHZ08hLXhRJElXTycjR2dPIS19USRJW08xRy53TyEuX1EkSVdPLDU5Zk8hL2VRJElXTyw1PVZPIS91USRJV08sNT1WTyEvfVEkSVdPMUcva08hMFNRJElbTzFHL2tPT1EkSVMxRy9oMUcvaE8hMGRRJElXTyw1PVFPITFaUSRJV08sNT1RTy9nUSRJV08xRy9vTyExeFEkSVdPMUcvcU8hMX1RJElbTzFHL3FPITJfUSRJW08xRy9vT09RJElTMUcvbDFHL2xPT1EkSVMxRy9wMUcvcE9PT08tRTlYLUU5WE9PUSRJUzFHL3kxRy95T09PTy1FOVktRTlZTyEyb1EkSVdPJyNHek8vZ1EkSVdPJyNHek8hMn1RJElXTyw1OmFPT09PLUU5Wi1FOVpPT1EkSVMxRy96MUcvek9PT08tRTleLUU5Xk9PT08tRTlfLUU5X09PT08tRTlgLUU5YE9PUSRJUy1FOWEtRTlhTyEzWVElR2xPMUcyVk8hM3lRJElbTzFHMlZPJ1JRJElXTyw1PE9PT1EkSVMsNTxPLDU8T09PUSRJUy1FOWItRTliT09RJElTLDU8Viw1PFZPT1EkSVMtRTlpLUU5aU9PUSRJVjFHMG8xRzBvTy98USRJV08nI0ZnTyE0YlEkSVtPLDU9ck9PUSRJUzFHMVYxRzFWTyE0eVEkSVdPMUcxVk9PUSRJUycjRFMnI0RTTy9nUSRJV08sNTx8T09RJElTLDU8fCw1PHxPITVPUSRJV08nI0ZTTyE1WlEkSVdPLDU5bE8hNWNRJElXTzFHL1VPITVtUSRJW08sNT1RT09RJElTMUcyazFHMmtPT1EkSVMsNTpoLDU6aE8hNl5RJElXTycjR1BPT1EkSVMsNTxQLDU8UE9PUSRJUy1FOWMtRTljTyE2b1EkSVdPMUcuZk9PUSRJUzFHMFUxRzBVTyE2fVEkSVdPLDU9U08hN19RJElXTyw1PVNPL2dRJElXTzFHMGVPL2dRJElXTzFHMGVPL3xRJElXTzFHMGdPT1EkSVMtRTlmLUU5Zk8hN3BRJElXTzFHMGdPITd7USRJV08xRzBnTyE4UVEkSVdPLDU9dE8hOGBRJElXTyw1PXRPIThuUSRJV08sNT1xTyE5VVEkSVdPLDU9cU8hOWdRJElaTzFHMHFPITx1USRJWk8xRzB0TyFAUVEkSVdPLDU9dk8hQFtRJElXTyw1PXZPIUBkUSRJW08sNT12Ty9nUSRJV08xRzB2TyFAblEkSVdPMUcwdk8zVVEkSVdPMUcwe09ObFEkSVdPMUcwfU9PUSRJViw1O1csNTtXTyFAc1EkSVlPLDU7V08hQHhRJElaTzFHMHdPIURaUSRJV08nI0ZvTzNVUSRJV08xRzB3TzNVUSRJV08xRzB3TyFEaFEkSVdPLDU9d08hRHVRJElXTyw1PXdPL3xRJElXTyw1PXdPT1EkSVYxRzB7MUcwe08hRH1RJElXTycjRXlPIUVgUSUxYE8xRzB9T09RJElWMUcxUzFHMVNPM1VRJElXTzFHMVNPT1EkSVMsNT1ZLDU9WU9PUSRJUycjRG4nI0RuTy9nUSRJV08sNT1ZTyFFaFEkSVdPLDU9WE8hRXtRJElXTyw1PVhPT1EkSVMxRy9zMUcvc08hRlRRJElXTyw1PVpPIUZlUSRJV08sNT1aTyFGbVEkSVdPLDU9Wk8hR1FRJElXTyw1PVpPIUdiUSRJV08sNT1aT09RJElTNyslYTcrJWFPT1EkSVM3KyRlNyskZU8hNWNRJElXTzcrJG1PIUlUUSRJV08xRy55TyFJW1EkSVdPMUcueU9PUSRJUzFHL10xRy9dT09RJElTLDU7cCw1O3BPJ1JRJElXTyw1O3BPT1EkSVM3KyR9NyskfU8hSWNRJElXTzcrJH1PT1EkSVMtRTlTLUU5U09PUSRJUzcrJU83KyVPTyFJc1EkSVdPLDU9Uk8nUlEkSVdPLDU9Uk9PUSRJUzcrJGM3KyRjTyFJeFEkSVdPNyskfU8hSlFRJElXTzcrJU9PIUpWUSRJV08xRzJxT09RJElTNyslVjcrJVZPIUpnUSRJV08xRzJxTyFKb1EkSVdPNyslVk9PUSRJUyw1O28sNTtvTydSUSRJV08sNTtvTyFKdFEkSVdPMUcybE9PUSRJUy1FOVItRTlSTyFLa1EkSVdPNyslWk9PUSRJUzcrJV03KyVdTyFLeVEkSVdPMUcybE8hTGhRJElXTzcrJV1PIUxtUSRJV08xRzJyTyFMfVEkSVdPMUcyck8hTVZRJElXTzcrJVpPIU1bUSRJV08sNT1mTyFNclEkSVdPLDU9Zk8hTXJRJElXTyw1PWZPIU5RTyFMUU8nI0R3TyFOXU9TTycjR3tPT09PMUcvezFHL3tPIU5iUSRJV08xRy97TyFOalElR2xPNysncU8jIFpRJElbTzFHMWpQIyB0USRJV08nI0ZkT09RJElTLDU8Uiw1PFJPT1EkSVMtRTllLUU5ZU9PUSRJUzcrJnE3KyZxT09RJElTMUcyaDFHMmhPT1EkSVMsNTtuLDU7bk9PUSRJUy1FOVEtRTlRT09RJElTNyskcDcrJHBPIyFSUSRJV08sNTxrTyMhbFEkSVdPLDU8a08jIX1RJElbTyw1O3FPIyNiUSRJV08xRzJuT09RJElTLUU5VC1FOVRPT1EkSVM3KyZQNysmUE8jI3JRJElXTzcrJlBPT1EkSVM3KyZSNysmUk8jJFFRJElXTycjSFhPL3xRJElXTzcrJlJPIyRmUSRJV083KyZST09RJElTLDU8VSw1PFVPIyRxUSRJV08xRzNgT09RJElTLUU5aC1FOWhPT1EkSVMsNTxRLDU8UU8jJVBRJElXTzFHM11PT1EkSVMtRTlkLUU5ZE8jJWdRJElaTzcrJl1PIURaUSRJV08nI0ZtTzNVUSRJV083KyZdTzNVUSRJV083KyZgTyModVEkSVtPLDU8WU8nUlEkSVdPLDU8WU8jKVBRJElXTzFHM2JPT1EkSVMtRTlsLUU5bE8jKVpRJElXTzFHM2JPM1VRJElXTzcrJmJPL2dRJElXTzcrJmJPT1EkSVY3KyZnNysmZ08hRWBRJTFgTzcrJmlPIyljUSRJWE8xRzByT09RJElWLUU5bS1FOW1PM1VRJElXTzcrJmNPM1VRJElXTzcrJmNPT1EkSVYsNTxaLDU8Wk8jK1VRJElXTyw1PFpPT1EkSVY3KyZjNysmY08jK2FRJElaTzcrJmNPIy5sUSRJV08sNTxbTyMud1EkSVdPMUczY09PUSRJUy1FOW4tRTluTyMvVVEkSVdPMUczY08jL15RJElXTycjSF9PIy9sUSRJV08nI0hfTy98USRJV08nI0hfT09RJElTJyNIXycjSF9PIy93USRJV08nI0heT09RJElTLDU7ZSw1O2VPIzBQUSRJV08sNTtlTy9nUSRJV08nI0V7T09RJElWNysmaTcrJmlPM1VRJElXTzcrJmlPT1EkSVY3KyZuNysmbk9PUSRJUzFHMnQxRzJ0T09RJElTLDU7cyw1O3NPIzBVUSRJV08xRzJzT09RJElTLUU5Vi1FOVZPIzBpUSRJV08sNTt0TyMwdFEkSVdPLDU7dE8jMVhRJElXTzFHMnVPT1EkSVMtRTlXLUU5V08jMWlRJElXTzFHMnVPIzFxUSRJV08xRzJ1TyMyUlEkSVdPMUcydU8jMWlRJElXTzFHMnVPT1EkSVM8PEhYPDxIWE8jMl5RJElbTzFHMVtPT1EkSVM8PEhpPDxIaVAjMmtRJElXTycjRlVPNnxRJElXTzFHMm1PIzJ4USRJV08xRzJtTyMyfVEkSVdPPDxIaU9PUSRJUzw8SGo8PEhqTyMzX1EkSVdPNysoXU9PUSRJUzw8SHE8PEhxTyMzb1EkSVtPMUcxWlAjNGBRJElXTycjRlRPIzRtUSRJV083KyheTyM0fVEkSVdPNysoXk8jNVZRJElXTzw8SHVPIzVbUSRJV083KyhXT09RJElTPDxIdzw8SHdPIzZSUSRJV08sNTtyTydSUSRJV08sNTtyT09RJElTLUU5VS1FOVVPT1EkSVM8PEh1PDxIdU9PUSRJUyw1O3gsNTt4Ty9nUSRJV08sNTt4TyM2V1EkSVdPMUczUU9PUSRJUy1FOVstRTlbTyM2blEkSVdPMUczUU9PT08nI0ZfJyNGX08jNnxPIUxRTyw1OmNPT09PLDU9Zyw1PWdPT09PNyslZzcrJWdPIzdYUSRJV08xRzJWTyM3clEkSVdPMUcyVlAnUlEkSVdPJyNGVk8vZ1EkSVdPPDxJa08jOFRRJElXTyw1PXNPIzhmUSRJV08sNT1zTy98USRJV08sNT1zTyM4d1EkSVdPPDxJbU9PUSRJUzw8SW08PEltTy98USRJV088PEltUC98USRJV08nI0ZqUC9nUSRJV08nI0ZmT09RJElWLUU5ay1FOWtPM1VRJElXTzw8SXdPT1EkSVYsNTxYLDU8WE8zVVEkSVdPLDU8WE9PUSRJVjw8SXc8PEl3T09RJElWPDxJejw8SXpPIzh8USRJW08xRzF0UCM5V1EkSVdPJyNGbk8jOV9RJElXTzcrKHxPIzlpUSRJWk88PEl8TzNVUSRJV088PEl8T09RJElWPDxKVDw8SlRPM1VRJElXTzw8SlRPT1EkSVYnI0ZsJyNGbE8jPHRRJElaTzcrJl5PT1EkSVY8PEl9PDxJfU8jPm1RJElaTzw8SX1PT1EkSVYxRzF1MUcxdU8vfFEkSVdPMUcxdU8zVVEkSVdPPDxJfU8vfFEkSVdPMUcxdlAvZ1EkSVdPJyNGcE8jQXhRJElXTzcrKH1PI0JWUSRJV083Kyh9T09RJElTJyNFeicjRXpPL2dRJElXTyw1PXlPI0JfUSRJV08sNT15T09RJElTLDU9eSw1PXlPI0JqUSRJV08sNT14TyNCe1EkSVdPLDU9eE9PUSRJUzFHMVAxRzFQT09RJElTLDU7Zyw1O2dQI0NUUSRJV08nI0ZYTyNDZVEkSVdPMUcxYE8jQ3hRJElXTzFHMWBPI0RZUSRJV08xRzFgUCNEZVEkSVdPJyNGWU8jRHJRJElXTzcrKGFPI0VTUSRJV083KyhhTyNFU1EkSVdPNysoYU8jRVtRJElXTzcrKGFPI0VsUSRJV083KyhYTzZ8USRJV083KyhYT09RJElTQU4+VEFOPlRPI0ZWUSRJV088PEt4T09RJElTQU4+YUFOPmFPL2dRJElXTzFHMV5PI0ZnUSRJW08xRzFeUCNGcVEkSVdPJyNGV09PUSRJUzFHMWQxRzFkUCNHT1EkSVdPJyNGXk8jR11RJElXTzcrKGxPT09PLUU5XS1FOV1PI0dzUSRJV083KydxT09RJElTQU4/VkFOP1ZPI0heUSRJV08sNTxUTyNIclEkSVdPMUczX09PUSRJUy1FOWctRTlnTyNJVFEkSVdPMUczX09PUSRJU0FOP1hBTj9YTyNJZlEkSVdPQU4/WE9PUSRJVkFOP2NBTj9jT09RJElWMUcxczFHMXNPM1VRJElXT0FOP2hPI0lrUSRJWk9BTj9oT09RJElWQU4/b0FOP29PT1EkSVYtRTlqLUU5ak9PUSRJVjw8SXg8PEl4TzNVUSRJV09BTj9pTzNVUSRJV083KydhT09RJElWQU4/aUFOP2lPT1EkSVM3KydiNysnYk8jTHZRJElXTzw8TGlPT1EkSVMxRzNlMUczZU8vZ1EkSVdPMUczZU9PUSRJUyw1PF0sNTxdTyNNVFEkSVdPMUczZE9PUSRJUy1FOW8tRTlvTyNNZlEkSVdPNysmek8jTXZRJElXTzcrJnpPT1EkSVM3KyZ6Nysmek8jTlJRJElXTzw8S3tPI05jUSRJV088PEt7TyNOY1EkSVdPPDxLe08jTmtRJElXTycjR2lPT1EkSVM8PEtzPDxLc08jTnVRJElXTzw8S3NPT1EkSVM3KyZ4NysmeE8vfFEkSVdPMUcxb1AvfFEkSVdPJyNGaU8kIGBRJElXTzcrKHlPJCBxUSRJV083Kyh5T09RJElTRzI0c0cyNHNPT1EkSVZHMjVTRzI1U08zVVEkSVdPRzI1U09PUSRJVkcyNVRHMjVUT09RJElWPDxKezw8SntPT1EkSVM3KylQNyspUFAkIVNRJElXTycjRnFPT1EkSVM8PEpmPDxKZk8kIWJRJElXTzw8SmZPJCFyUSRJV09BTkFnTyQjU1EkSVdPQU5BZ08kI1tRJElXTycjR2pPT1EkSVMnI0dqJyNHak8waFEkSVdPJyNEYU8kI3VRJElXTyw1PVRPT1EkSVNBTkFfQU5BX09PUSRJUzcrJ1o3KydaTyQkXlEkSVdPPDxMZU9PUSRJVkxEKm5MRCpuT09RJElTQU5AUUFOQFFPJCRvUSRJV09HMjdSTyQlUFEkSVdPLDU5e09PUSRJUzFHMm8xRzJvTyNOa1EkSVdPMUcvZ09PUSRJUzcrJVI3KyVSTzZ8USRJV08nI0N6TzZ8USRJV08sNTlfTzZ8USRJV08sNTlfTzZ8USRJV08sNTlfTyQlVVEkSVtPLDU8a082fFEkSVdPMUcueU8vZ1EkSVdPMUcvVU8vZ1EkSVdPNyskbVAkJWlRJElXTycjRmRPJ1JRJElXTycjR1BPJCV2USRJV08sNTlfTyQle1EkSVdPLDU5X08kJlNRJElXTyw1OWpPJCZYUSRJV08xRy9STzBoUSRJV08nI0RPTzZ8USRJV08sNTlnXCIsXG4gIHN0YXRlRGF0YTogXCIkJm9+TyRvT1MkbE9TJGtPU1FPU35PUGhPVGVPZHNPZlhPbHRPcCFTT3N1T3x2T30hUE8hUiFWTyFTIVVPIVZZTyFaWk8hZmRPIW1kTyFuZE8hb2RPIXZ4TyF4eU8henpPIXx7TyNPfE8jU31PI1UhT08jWCFRTyNZIVFPI1shUk8jYyFUTyNmIVdPI2ohWE8jbCFZTyNxIVpPI3RsTyRqcU8kelFPJHtRTyVQUk8lUVZPJWVbTyVmXU8laV5PJWxfTyVyYE8ldWFPJXdiT35PVCFhT10hYU9fIWJPZiFpTyFWIWtPIWQhbE8kdSFbTyR2IV1PJHchXk8keCFfTyR5IV9PJHohYE8keyFgTyR8IWFPJH0hYU8lTyFhT35PaCVUWGklVFhqJVRYayVUWGwlVFhtJVRYcCVUWHclVFh4JVRYIXMlVFgjXiVUWCRqJVRYJG0lVFglViVUWCFPJVRYIVIlVFghUyVUWCVXJVRYIVclVFghWyVUWH0lVFgjViVUWHElVFghaiVUWH5QJF9PZHNPZlhPIVZZTyFaWk8hZmRPIW1kTyFuZE8hb2RPJHpRTyR7UU8lUFJPJVFWTyVlW08lZl1PJWleTyVsX08lcmBPJXVhTyV3Yk9+T3clU1h4JVNYI14lU1gkaiVTWCRtJVNYJVYlU1h+T2ghb09pIXBPaiFuT2shbk9sIXFPbSFyT3Ahc08hcyVTWH5QKGBPVCF5T2wtZk9zLXRPfHZPflAnUk9UIXxPbC1mT3MtdE8hVyF9T35QJ1JPVCNRT18jUk9sLWZPcy10TyFbI1NPflAnUk8lZyNWTyVoI1hPfk8laiNZTyVrI1hPfk8hWiNbTyVtI11PJXEjX09+TyFaI1tPJXMjYE8ldCNfT35PIVojW08laCNfTyV2I2JPfk8hWiNbTyVrI19PJXgjZE9+T1QkdFhdJHRYXyR0WGYkdFhoJHRYaSR0WGokdFhrJHRYbCR0WG0kdFhwJHRYdyR0WCFWJHRYIWQkdFgkdSR0WCR2JHRYJHckdFgkeCR0WCR5JHRYJHokdFgkeyR0WCR8JHRYJH0kdFglTyR0WCFPJHRYIVIkdFghUyR0WH5PJWVbTyVmXU8laV5PJWxfTyVyYE8ldWFPJXdiT3gkdFghcyR0WCNeJHRYJGokdFgkbSR0WCVWJHRYJVckdFghVyR0WCFbJHRYfSR0WCNWJHRYcSR0WCFqJHRYflArdU93I2lPeCRzWCFzJHNYI14kc1gkaiRzWCRtJHNYJVYkc1h+T2wtZk9zLXRPflAnUk8jXiNsTyRqI25PJG0jbk9+TyVRVk9+TyFSI3NPI2whWU8jcSFaTyN0bE9+T2x0T35QJ1JPVCN4T18jeU8lUVZPeHRQfk9UI31PbC1mT3MtdE99JE9PflAnUk94JFFPIXMkVk8lViRSTyNeIXRYJGohdFgkbSF0WH5PVCN9T2wtZk9zLXRPI14hfVgkaiF9WCRtIX1YflAnUk9sLWZPcy10TyNeI1JYJGojUlgkbSNSWH5QJ1JPIWQkXU8hbSRdTyVRVk9+T1QkZ09+UCdSTyFTJGlPI2okak8jbCRrT35PeCRsT35PVCR6T18kek9sLWZPcy10TyFPJHxPflAnUk9sLWZPcy10T3glUE9+UCdSTyVkJVJPfk9fIWJPZiFpTyFWIWtPIWQhbE9UYGFdYGFoYGFpYGFqYGFrYGFsYGFtYGFwYGF3YGF4YGEhc2BhI15gYSRqYGEkbWBhJHVgYSR2YGEkd2BhJHhgYSR5YGEkemBhJHtgYSR8YGEkfWBhJU9gYSVWYGEhT2BhIVJgYSFTYGElV2BhIVdgYSFbYGF9YGEjVmBhcWBhIWpgYX5PayVXT35PbCVXT35QJ1JPbC1mT35QJ1JPaC1oT2ktaU9qLWdPay1nT2wtcE9tLXFPcC11TyFPJVNYIVIlU1ghUyVTWCVXJVNYIVclU1ghWyVTWH0lU1gjViVTWCFqJVNYflAoYE8lVyVZT3clUlghTyVSWCFSJVJYIVMlUlghVyVSWHglUlh+T3clXU8hTyVbTyFSJWFPIVMlYE9+TyFPJVtPfk93JWRPIVIlYU8hUyVgTyFXJV9Yfk8hVyVoT35PdyVpT3gla08hUiVhTyFTJWBPIVslWVh+TyFbJW9Pfk8hWyVwT35PJWcjVk8laCVyT35PJWojWU8layVyT35PVCV1T2wtZk9zLXRPfHZPflAnUk8hWiNbTyVtI11PJXEleE9+TyFaI1tPJXMjYE8ldCV4T35PIVojW08laCV4TyV2I2JPfk8hWiNbTyVrJXhPJXgjZE9+T1QhbGFdIWxhXyFsYWYhbGFoIWxhaSFsYWohbGFrIWxhbCFsYW0hbGFwIWxhdyFsYXghbGEhViFsYSFkIWxhIXMhbGEjXiFsYSRqIWxhJG0hbGEkdSFsYSR2IWxhJHchbGEkeCFsYSR5IWxhJHohbGEkeyFsYSR8IWxhJH0hbGElTyFsYSVWIWxhIU8hbGEhUiFsYSFTIWxhJVchbGEhVyFsYSFbIWxhfSFsYSNWIWxhcSFsYSFqIWxhflAjdk93JX1PeCRzYSFzJHNhI14kc2EkaiRzYSRtJHNhJVYkc2F+UCRfT1QmUE9sdE9zdU94JHNhIXMkc2EjXiRzYSRqJHNhJG0kc2ElViRzYX5QJ1JPdyV9T3gkc2EhcyRzYSNeJHNhJGokc2EkbSRzYSVWJHNhfk9QaE9UZU9sdE9zdU98dk99IVBPIXZ4TyF4eU8henpPIXx7TyNPfE8jU31PI1UhT08jWCFRTyNZIVFPI1shUk8jXiRfWCRqJF9YJG0kX1h+UCdSTyNeI2xPJGomVU8kbSZVT35PIWQmVk9mJXpYJGolelgjViV6WCNeJXpYJG0lelgjVSV6WH5PZiFpTyRqJlhPfk9oY2FpY2FqY2FrY2FsY2FtY2FwY2F3Y2F4Y2Ehc2NhI15jYSRqY2EkbWNhJVZjYSFPY2EhUmNhIVNjYSVXY2EhV2NhIVtjYX1jYSNWY2FxY2EhamNhflAkX09wbmF3bmF4bmEjXm5hJGpuYSRtbmElVm5hfk9oIW9PaSFwT2ohbk9rIW5PbCFxT20hck8hc25hflBEVE8lViZaT3clVVh4JVVYfk8lUVZPdyVVWHglVVh+T3cmXk94dFh+T3gmYE9+T3claU8jXiVZWCRqJVlYJG0lWVghTyVZWHglWVghWyVZWCFqJVlYJVYlWVh+T1Qtb09sLWZPcy10T3x2T35QJ1JPJVYkUk8jXlNhJGpTYSRtU2F+TyVWJFJPfk93JmlPI14lW1gkaiVbWCRtJVtYayVbWH5QJF9PdyZsT30ma08jXiNSYSRqI1JhJG0jUmF+TyNWJm1PI14jVGEkaiNUYSRtI1Rhfk8hZCRdTyFtJF1PI1Umb08lUVZPfk8jVSZvT35PdyZxTyNeJXxYJGolfFgkbSV8WH5PdyZzTyNeJXlYJGoleVgkbSV5WHgleVh+T3cmd09rJk9YflAkX09rJnpPfk9QaE9UZU9sdE9zdU98dk99IVBPIXZ4TyF4eU8henpPIXx7TyNPfE8jU31PI1UhT08jWCFRTyNZIVFPI1shUk8kaidQT35QJ1JPcSdUTyNnJ1JPI2gnU09QI2VhVCNlYWQjZWFmI2VhbCNlYXAjZWFzI2VhfCNlYX0jZWEhUiNlYSFTI2VhIVYjZWEhWiNlYSFmI2VhIW0jZWEhbiNlYSFvI2VhIXYjZWEheCNlYSF6I2VhIXwjZWEjTyNlYSNTI2VhI1UjZWEjWCNlYSNZI2VhI1sjZWEjYyNlYSNmI2VhI2ojZWEjbCNlYSNxI2VhI3QjZWEkZyNlYSRqI2VhJHojZWEkeyNlYSVQI2VhJVEjZWElZSNlYSVmI2VhJWkjZWElbCNlYSVyI2VhJXUjZWEldyNlYSRpI2VhJG0jZWF+T3cnVU8jVidXT3gmUFh+T2YnWU9+T2YhaU94JGxPfk9UIWFPXSFhT18hYk9mIWlPIVYha08hZCFsTyR3IV5PJHghX08keSFfTyR6IWBPJHshYE8kfCFhTyR9IWFPJU8hYU9oVWlpVWlqVWlrVWlsVWltVWlwVWl3VWl4VWkhc1VpI15VaSRqVWkkbVVpJHVVaSVWVWkhT1VpIVJVaSFTVWklV1VpIVdVaSFbVWl9VWkjVlVpcVVpIWpVaX5PJHYhXU9+UE55TyR2VWl+UE55T1QhYU9dIWFPXyFiT2YhaU8hViFrTyFkIWxPJHohYE8keyFgTyR8IWFPJH0hYU8lTyFhT2hVaWlVaWpVaWtVaWxVaW1VaXBVaXdVaXhVaSFzVWkjXlVpJGpVaSRtVWkkdVVpJHZVaSR3VWklVlVpIU9VaSFSVWkhU1VpJVdVaSFXVWkhW1VpfVVpI1ZVaXFVaSFqVWl+TyR4IV9PJHkhX09+UCEjdE8keFVpJHlVaX5QISN0T18hYk9mIWlPIVYha08hZCFsT2hVaWlVaWpVaWtVaWxVaW1VaXBVaXdVaXhVaSFzVWkjXlVpJGpVaSRtVWkkdVVpJHZVaSR3VWkkeFVpJHlVaSR6VWkke1VpJVZVaSFPVWkhUlVpIVNVaSVXVWkhV1VpIVtVaX1VaSNWVWlxVWkhalVpfk9UIWFPXSFhTyR8IWFPJH0hYU8lTyFhT35QISZyT1RVaV1VaSR8VWkkfVVpJU9VaX5QISZyTyFSJWFPIVMlYE93JWJYIU8lYlh+TyVWJ19PJVcnX09+UCt1T3cnYU8hTyVhWH5PIU8nY09+T3cnZE94J2ZPIVclY1h+T2wtZk9zLXRPdydkT3gnZ08hVyVjWH5QJ1JPIVcnaU9+T2ohbk9rIW5PbCFxT20hck9oZ2lwZ2l3Z2l4Z2khc2dpI15naSRqZ2kkbWdpJVZnaX5PaSFwT35QIStlT2lnaX5QIStlT2gtaE9pLWlPai1nT2stZ09sLXBPbS1xT35PcSdrT35QISxuT1QncE9sLWZPcy10TyFPJ3FPflAnUk93J3JPIU8ncU9+TyFPJ3RPfk8hUyd2T35PdydyTyFPJ3dPIVIlYU8hUyVgT35QJF9PaC1oT2ktaU9qLWdPay1nT2wtcE9tLXFPIU9uYSFSbmEhU25hJVduYSFXbmEhW25hfW5hI1ZuYXFuYSFqbmF+UERUT1QncE9sLWZPcy10TyFXJV9hflAnUk93J3pPIVclX2F+TyFXJ3tPfk93J3pPIVIlYU8hUyVgTyFXJV9hflAkX09UKFBPbC1mT3MtdE8hWyVZYSNeJVlhJGolWWEkbSVZYSFPJVlheCVZYSFqJVlhJVYlWWF+UCdST3coUU8hWyVZYSNeJVlhJGolWWEkbSVZYSFPJVlheCVZYSFqJVlhJVYlWWF+TyFbKFRPfk93KFFPIVIlYU8hUyVgTyFbJVlhflAkX093KFdPIVIlYU8hUyVgTyFbJWBhflAkX093KFpPeCVuWCFbJW5YIWolblh+T3goXk8hWyhgTyFqKGFPfk9UJlBPbHRPc3VPeCRzaSFzJHNpI14kc2kkaiRzaSRtJHNpJVYkc2l+UCdST3coYk94JHNpIXMkc2kjXiRzaSRqJHNpJG0kc2klViRzaX5PIWQmVk9mJXphJGolemEjViV6YSNeJXphJG0lemEjVSV6YX5PJGooZ09+T1QjeE9fI3lPJVFWT35PdyZeT3h0YX5PbHRPc3VPflAnUk93KFFPI14lWWEkaiVZYSRtJVlhIU8lWWF4JVlhIVslWWEhaiVZYSVWJVlhflAkX093KGxPI14kc1gkaiRzWCRtJHNYJVYkc1h+TyVWJFJPI15TaSRqU2kkbVNpfk8jXiVbYSRqJVthJG0lW2FrJVthflAnUk93KG9PI14lW2EkaiVbYSRtJVthayVbYX5PVChzT2YodU8lUVZPfk8jVSh2T35PJVFWTyNeJXxhJGolfGEkbSV8YX5Pdyh4TyNeJXxhJGolfGEkbSV8YX5PbC1mT3MtdE8jXiV5YSRqJXlhJG0leWF4JXlhflAnUk93KHtPI14leWEkaiV5YSRtJXlheCV5YX5PcSlQTyNhKU9PUCNfaVQjX2lkI19pZiNfaWwjX2lwI19pcyNfaXwjX2l9I19pIVIjX2khUyNfaSFWI19pIVojX2khZiNfaSFtI19pIW4jX2khbyNfaSF2I19pIXgjX2kheiNfaSF8I19pI08jX2kjUyNfaSNVI19pI1gjX2kjWSNfaSNbI19pI2MjX2kjZiNfaSNqI19pI2wjX2kjcSNfaSN0I19pJGcjX2kkaiNfaSR6I19pJHsjX2klUCNfaSVRI19pJWUjX2klZiNfaSVpI19pJWwjX2klciNfaSV1I19pJXcjX2kkaSNfaSRtI19pfk9xKVFPUCNiaVQjYmlkI2JpZiNiaWwjYmlwI2JpcyNiaXwjYml9I2JpIVIjYmkhUyNiaSFWI2JpIVojYmkhZiNiaSFtI2JpIW4jYmkhbyNiaSF2I2JpIXgjYmkheiNiaSF8I2JpI08jYmkjUyNiaSNVI2JpI1gjYmkjWSNiaSNbI2JpI2MjYmkjZiNiaSNqI2JpI2wjYmkjcSNiaSN0I2JpJGcjYmkkaiNiaSR6I2JpJHsjYmklUCNiaSVRI2JpJWUjYmklZiNiaSVpI2JpJWwjYmklciNiaSV1I2JpJXcjYmkkaSNiaSRtI2Jpfk9UKVNPayZPYX5QJ1JPdylUT2smT2F+T3cpVE9rJk9hflAkX09rKVhPfk8kaClbT35PcSlfTyNnJ1JPI2gpXk9QI2VpVCNlaWQjZWlmI2VpbCNlaXAjZWlzI2VpfCNlaX0jZWkhUiNlaSFTI2VpIVYjZWkhWiNlaSFmI2VpIW0jZWkhbiNlaSFvI2VpIXYjZWkheCNlaSF6I2VpIXwjZWkjTyNlaSNTI2VpI1UjZWkjWCNlaSNZI2VpI1sjZWkjYyNlaSNmI2VpI2ojZWkjbCNlaSNxI2VpI3QjZWkkZyNlaSRqI2VpJHojZWkkeyNlaSVQI2VpJVEjZWklZSNlaSVmI2VpJWkjZWklbCNlaSVyI2VpJXUjZWkldyNlaSRpI2VpJG0jZWl+T2wtZk9zLXRPeCRsT35QJ1JPbC1mT3MtdE94JlBhflAnUk93KWVPeCZQYX5PVClpT18pak8hTyltTyR8KWtPJVFWT35PeCRsTyZTKW9Pfk9UJHpPXyR6T2wtZk9zLXRPIU8lYWF+UCdST3cpdU8hTyVhYX5PbC1mT3MtdE94KXhPIVclY2F+UCdST3cpeU8hVyVjYX5PbC1mT3MtdE93KXlPeCl8TyFXJWNhflAnUk9sLWZPcy10T3cpeU8hVyVjYX5QJ1JPdyl5T3gpfE8hVyVjYX5Pai1nT2stZ09sLXBPbS1xT2hnaXBnaXdnaSFPZ2khUmdpIVNnaSVXZ2khV2dpeGdpIVtnaSNeZ2kkamdpJG1naX1naSNWZ2lxZ2khamdpJVZnaX5PaS1pT35QIUdtT2lnaX5QIUdtT1QncE9sLWZPcy10TyFPKlJPflAnUk9rKlRPfk93KlZPIU8qUk9+TyFPKldPfk9UJ3BPbC1mT3MtdE8hVyVfaX5QJ1JPdypYTyFXJV9pfk8hVypZT35PVChQT2wtZk9zLXRPIVslWWkjXiVZaSRqJVlpJG0lWWkhTyVZaXglWWkhaiVZaSVWJVlpflAnUk93Kl1PIVIlYU8hUyVgTyFbJWBpfk93KmBPIVslWWkjXiVZaSRqJVlpJG0lWWkhTyVZaXglWWkhaiVZaSVWJVlpfk8hWyphT35PXypjT2wtZk9zLXRPIVslYGl+UCdST3cqXU8hWyVgaX5PIVsqZU9+T1QqZ09sLWZPcy10T3glbmEhWyVuYSFqJW5hflAnUk93KmhPeCVuYSFbJW5hIWolbmF+TyFaI1tPJXAqa08hWyFrWH5PIVsqbU9+T3goXk8hWypuT35PVCZQT2x0T3N1T3gkc3EhcyRzcSNeJHNxJGokc3EkbSRzcSVWJHNxflAnUk93JFdpeCRXaSFzJFdpI14kV2kkaiRXaSRtJFdpJVYkV2l+UCRfT1QmUE9sdE9zdU9+UCdST1QmUE9sLWZPcy10TyNeJHNhJGokc2EkbSRzYSVWJHNhflAnUk93Km9PI14kc2EkaiRzYSRtJHNhJVYkc2F+T3cjeWEjXiN5YSRqI3lhJG0jeWFrI3lhflAkX08jXiVbaSRqJVtpJG0lW2lrJVtpflAnUk93KnJPI14jUnEkaiNScSRtI1Jxfk93KnNPI1YqdU8jXiV7WCRqJXtYJG0le1ghTyV7WH5PVCp3T2YqeE8lUVZPfk8lUVZPI14lfGkkaiV8aSRtJXxpfk9sLWZPcy10TyNeJXlpJGoleWkkbSV5aXgleWl+UCdST3EqfE8jYSlPT1AjX3FUI19xZCNfcWYjX3FsI19xcCNfcXMjX3F8I19xfSNfcSFSI19xIVMjX3EhViNfcSFaI19xIWYjX3EhbSNfcSFuI19xIW8jX3EhdiNfcSF4I19xIXojX3EhfCNfcSNPI19xI1MjX3EjVSNfcSNYI19xI1kjX3EjWyNfcSNjI19xI2YjX3EjaiNfcSNsI19xI3EjX3EjdCNfcSRnI19xJGojX3EkeiNfcSR7I19xJVAjX3ElUSNfcSVlI19xJWYjX3ElaSNfcSVsI19xJXIjX3EldSNfcSV3I19xJGkjX3EkbSNfcX5PayRiYXckYmF+UCRfT1QpU09rJk9pflAnUk93K1RPayZPaX5PUGhPVGVPbHRPcCFTT3N1T3x2T30hUE8hUiFWTyFTIVVPIXZ4TyF4eU8henpPIXx7TyNPfE8jU31PI1UhT08jWCFRTyNZIVFPI1shUk8jYyFUTyNmIVdPI2ohWE8jbCFZTyNxIVpPI3RsT35QJ1JPdytfT3gkbE8jVitfT35PI2grYE9QI2VxVCNlcWQjZXFmI2VxbCNlcXAjZXFzI2VxfCNlcX0jZXEhUiNlcSFTI2VxIVYjZXEhWiNlcSFmI2VxIW0jZXEhbiNlcSFvI2VxIXYjZXEheCNlcSF6I2VxIXwjZXEjTyNlcSNTI2VxI1UjZXEjWCNlcSNZI2VxI1sjZXEjYyNlcSNmI2VxI2ojZXEjbCNlcSNxI2VxI3QjZXEkZyNlcSRqI2VxJHojZXEkeyNlcSVQI2VxJVEjZXElZSNlcSVmI2VxJWkjZXElbCNlcSVyI2VxJXUjZXEldyNlcSRpI2VxJG0jZXF+TyNWK2FPdyRkYXgkZGF+T2wtZk9zLXRPeCZQaX5QJ1JPdytjT3gmUGl+T3gkUU8lVitlT3cmUlghTyZSWH5PJVFWT3cmUlghTyZSWH5PdytpTyFPJlFYfk8hTytrT35PVCR6T18kek9sLWZPcy10TyFPJWFpflAnUk94K25PdyN8YSFXI3xhfk9sLWZPcy10T3grb093I3xhIVcjfGF+UCdST2wtZk9zLXRPeCl4TyFXJWNpflAnUk93K3JPIVclY2l+T2wtZk9zLXRPdytyTyFXJWNpflAnUk93K3JPeCt1TyFXJWNpfk93I3hpIU8jeGkhVyN4aX5QJF9PVCdwT2wtZk9zLXRPflAnUk9rK3dPfk9UJ3BPbC1mT3MtdE8hTyt4T35QJ1JPVCdwT2wtZk9zLXRPIVclX3F+UCdST3cjd2khWyN3aSNeI3dpJGojd2kkbSN3aSFPI3dpeCN3aSFqI3dpJVYjd2l+UCRfT1QoUE9sLWZPcy10T35QJ1JPXypjT2wtZk9zLXRPIVslYHF+UCdST3creU8hWyVgcX5PIVsrek9+T1QoUE9sLWZPcy10TyFbJVlxI14lWXEkaiVZcSRtJVlxIU8lWXF4JVlxIWolWXElViVZcX5QJ1JPeCt7T35PVCpnT2wtZk9zLXRPeCVuaSFbJW5pIWolbml+UCdST3csUU94JW5pIVslbmkhaiVuaX5PIVojW08lcCprTyFbIWthfk9UJlBPbC1mT3MtdE8jXiRzaSRqJHNpJG0kc2klViRzaX5QJ1JPdyxTTyNeJHNpJGokc2kkbSRzaSVWJHNpfk8lUVZPI14le2EkaiV7YSRtJXthIU8le2F+T3csVk8jXiV7YSRqJXthJG0le2EhTyV7YX5PIU8sWU9+T2skYml3JGJpflAkX09UKVNPflAnUk9UKVNPayZPcX5QJ1JPcSxeT1AjZHlUI2R5ZCNkeWYjZHlsI2R5cCNkeXMjZHl8I2R5fSNkeSFSI2R5IVMjZHkhViNkeSFaI2R5IWYjZHkhbSNkeSFuI2R5IW8jZHkhdiNkeSF4I2R5IXojZHkhfCNkeSNPI2R5I1MjZHkjVSNkeSNYI2R5I1kjZHkjWyNkeSNjI2R5I2YjZHkjaiNkeSNsI2R5I3EjZHkjdCNkeSRnI2R5JGojZHkkeiNkeSR7I2R5JVAjZHklUSNkeSVlI2R5JWYjZHklaSNkeSVsI2R5JXIjZHkldSNkeSV3I2R5JGkjZHkkbSNkeX5PUGhPVGVPbHRPcCFTT3N1T3x2T30hUE8hUiFWTyFTIVVPIXZ4TyF4eU8henpPIXx7TyNPfE8jU31PI1UhT08jWCFRTyNZIVFPI1shUk8jYyFUTyNmIVdPI2ohWE8jbCFZTyNxIVpPI3RsTyRpLGJPJG0sYk9+UCdSTyNoLGNPUCNleVQjZXlkI2V5ZiNleWwjZXlwI2V5cyNleXwjZXl9I2V5IVIjZXkhUyNleSFWI2V5IVojZXkhZiNleSFtI2V5IW4jZXkhbyNleSF2I2V5IXgjZXkheiNleSF8I2V5I08jZXkjUyNleSNVI2V5I1gjZXkjWSNleSNbI2V5I2MjZXkjZiNleSNqI2V5I2wjZXkjcSNleSN0I2V5JGcjZXkkaiNleSR6I2V5JHsjZXklUCNleSVRI2V5JWUjZXklZiNleSVpI2V5JWwjZXklciNleSV1I2V5JXcjZXkkaSNleSRtI2V5fk9sLWZPcy10T3gmUHF+UCdST3csZ094JlBxfk8lVitlT3cmUmEhTyZSYX5PVClpT18pak8kfClrTyVRVk8hTyZRYX5PdyxrTyFPJlFhfk9UJHpPXyR6T2wtZk9zLXRPflAnUk9sLWZPcy10T3gsbU93I3xpIVcjfGl+UCdST2wtZk9zLXRPdyN8aSFXI3xpflAnUk94LG1PdyN8aSFXI3xpfk9sLWZPcy10T3gpeE9+UCdST2wtZk9zLXRPeCl4TyFXJWNxflAnUk93LHBPIVclY3F+T2wtZk9zLXRPdyxwTyFXJWNxflAnUk9wLHNPIVIlYU8hUyVgTyFPJVpxIVclWnEhWyVacXclWnF+UCEsbk9fKmNPbC1mT3MtdE8hWyVgeX5QJ1JPdyN6aSFbI3ppflAkX09fKmNPbC1mT3MtdE9+UCdST1QqZ09sLWZPcy10T35QJ1JPVCpnT2wtZk9zLXRPeCVucSFbJW5xIWolbnF+UCdST1QmUE9sLWZPcy10TyNeJHNxJGokc3EkbSRzcSVWJHNxflAnUk8jVix3T3ckXWEjXiRdYSRqJF1hJG0kXWEhTyRdYX5PJVFWTyNeJXtpJGole2kkbSV7aSFPJXtpfk93LHlPI14le2kkaiV7aSRtJXtpIU8le2l+TyFPLHtPfk9xLH1PUCNkIVJUI2QhUmQjZCFSZiNkIVJsI2QhUnAjZCFScyNkIVJ8I2QhUn0jZCFSIVIjZCFSIVMjZCFSIVYjZCFSIVojZCFSIWYjZCFSIW0jZCFSIW4jZCFSIW8jZCFSIXYjZCFSIXgjZCFSIXojZCFSIXwjZCFSI08jZCFSI1MjZCFSI1UjZCFSI1gjZCFSI1kjZCFSI1sjZCFSI2MjZCFSI2YjZCFSI2ojZCFSI2wjZCFSI3EjZCFSI3QjZCFSJGcjZCFSJGojZCFSJHojZCFSJHsjZCFSJVAjZCFSJVEjZCFSJWUjZCFSJWYjZCFSJWkjZCFSJWwjZCFSJXIjZCFSJXUjZCFSJXcjZCFSJGkjZCFSJG0jZCFSfk9sLWZPcy10T3gmUHl+UCdST1QpaU9fKWpPJHwpa08lUVZPIU8mUWl+T2wtZk9zLXRPdyN8cSFXI3xxflAnUk94LVRPdyN8cSFXI3xxfk9sLWZPcy10T3gpeE8hVyVjeX5QJ1JPdy1VTyFXJWN5fk9sLWZPcy1ZT35QJ1JPcCxzTyFSJWFPIVMlYE8hTyVaeSFXJVp5IVslWnl3JVp5flAhLG5PJVFWTyNeJXtxJGole3EkbSV7cSFPJXtxfk93LV5PI14le3EkaiV7cSRtJXtxIU8le3F+T1QpaU9fKWpPJHwpa08lUVZPfk9sLWZPcy10T3cjfHkhVyN8eX5QJ1JPbC1mT3MtdE94KXhPIVclYyFSflAnUk93LWFPIVclYyFSfk9wJV5YIU8lXlghUiVeWCFTJV5YIVclXlghWyVeWHclXlh+UCEsbk9wLHNPIVIlYU8hUyVgTyFPJV1hIVclXWEhWyVdYXclXWF+TyVRVk8jXiV7eSRqJXt5JG0le3khTyV7eX5PbC1mT3MtdE94KXhPIVclYyFaflAnUk94LWRPfk93Km9PI14kc2EkaiRzYSRtJHNhJVYkc2F+UCRfT1QmUE9sLWZPcy10T35QJ1JPay1rT35PbC1rT35QJ1JPeC1sT35PcS1tT35QISxuTyVmJWkldSV3JWUhWiVtJXMldiV4JWwlciVsJVF+XCIsXG4gIGdvdG86IFwiISx1JlNQUFBQJlRQJl0pbipUKmsrUytsLFZQLHFQJl0tXy1fJl1QJl1QMHBQUFBQUFAwcDNgUFAzYFA1bDV1OnlQUDp8O1s7X1BQUCZdJl1QUDtrJl1QUCZdJl1QUCZdJl0mXSZdO288YyZdUDxmUDxpPGlAT1BAZCZdUFBQQGhAbiZUUCZUJlRQJlRQJlRQJlRQJlRQJlQmVCZUUCZUUFAmVFBQJlRQQHRQQHtBUlBAe1BAe0B7UFBQQHtQQnpQQ1RDWkNhQnpQQHtDZ1BDbkN0Q3pEV0RqRHBEekVRRW5FdEV6RlFGW0ZiRmhGbkZ0RnpHXkdoR25HdEd6SFVIW0hiSGhIbkh4SU9JWUlgUFBQUFBQUFBQSWlJcUl6SlVKYVBQUFBQUFBQUFBQUE52ISBgISVuISh6UFAhKVMhKWIhKWshKmEhKlchKmohKnAhKnMhKnYhKnkhK1JQUFBQUFBQUFBQIStVIStYUFBQUFBQUFBQIStfIStrISt3ISxUISxXISxeISxkISxqISxtXWlPciNsJGwpWytaJ29kT1NYWVplaHJzdHZ4fH0hUiFTIVQhVSFYIWMhZCFlIWYhZyFoIWkhayFuIW8hcCFyIXMheSF8I1EjUiNbI2kjbCN9JE8kUSRTJFYkZyRpJGokbCR6JVAlVyVaJV0lYCVkJWklayV1JX0mUCZbJmAmaSZrJmwmcyZ3JnonUidVJ2AnYSdkJ2YnZydrJ3Ancid2J3ooUChRKFcoWihiKGQobChvKHspTylTKVQpWClbKWUpbyl1KXgpeSl8KlMqVCpWKlgqWypdKmAqYypnKmgqbypxKnIqeitTK1QrWitiK2MrZittK24rbytxK3IrdSt3K3kreyt9LFAsUSxTLGcsaSxtLHAscy1ULVUtYS1kLWYtZy1oLWktay1sLW0tbi1vLXEtdXchY1AjaCN1JFckZiViJWclbSVuJmEmeShjKG4pUipRKlorUit8LWp5IWRQI2gjdSRXJGYkciViJWclbSVuJmEmeShjKG4pUipRKlorUit8LWp7IWVQI2gjdSRXJGYkciRzJWIlZyVtJW4mYSZ5KGMobilSKlEqWitSK3wtan0hZlAjaCN1JFckZiRyJHMkdCViJWclbSVuJmEmeShjKG4pUipRKlorUit8LWohUCFnUCNoI3UkVyRmJHIkcyR0JHUlYiVnJW0lbiZhJnkoYyhuKVIqUSpaK1IrfC1qIVIhaFAjaCN1JFckZiRyJHMkdCR1JHYlYiVnJW0lbiZhJnkoYyhuKVIqUSpaK1IrfC1qIVYhaFAhbSNoI3UkVyRmJHIkcyR0JHUkdiR3JWIlZyVtJW4mYSZ5KGMobilSKlEqWitSK3wtaidvU09TWFlaZWhyc3R2eHx9IVIhUyFUIVUhWCFjIWQhZSFmIWchaCFpIWshbiFvIXAhciFzIXkhfCNRI1IjWyNpI2wjfSRPJFEkUyRWJGckaSRqJGwkeiVQJVclWiVdJWAlZCVpJWsldSV9JlAmWyZgJmkmayZsJnMmdyZ6J1InVSdgJ2EnZCdmJ2cnaydwJ3Indid6KFAoUShXKFooYihkKGwobyh7KU8pUylUKVgpWyllKW8pdSl4KXkpfCpTKlQqVipYKlsqXSpgKmMqZypoKm8qcSpyKnorUytUK1orYitjK2YrbStuK28rcStyK3Urdyt5K3srfSxQLFEsUyxnLGksbSxwLHMtVC1VLWEtZC1mLWctaC1pLWstbC1tLW4tby1xLXUmWlVPWFlaaHJ0dnx9IVIhUyFUIVghaSFrIW4hbyFwIXIhcyNbI2kjbCRPJFEkUyRWJGokbCR6JVAlVyVaJV0lZCVpJWsldSV9JlsmYCZrJmwmcyZ6J1InVSdgJ2EnZCdmJ2cnaydyJ3ooUShXKFooYihkKGwoeylPKVgpWyllKW8pdSl4KXkpfCpTKlQqVipYKlsqXSpgKmcqaCpvKnIqeitaK2IrYytmK20rbitvK3Ercit1K3creSt7K30sUCxRLFMsZyxpLG0scCxzLVQtVS1hLWQtZi1nLWgtaS1rLWwtbS1uLXEtdSVlV09YWVpocnZ8fSFSIVMhVCFYIWkhayNbI2kjbCRPJFEkUyRWJGokbCR6JVAlWiVdJWQlaSVrJXUlfSZbJmAmayZsJnMmeidSJ1UnYCdhJ2QnZidnJ2sncid6KFEoVyhaKGIoZChsKHspTylYKVspZSlvKXUpeCl5KXwqUypWKlgqWypdKmAqZypoKm8qcip6K1orYitjK2YrbStuK28rcStyK3UreSt7K30sUCxRLFMsZyxpLG0scC1ULVUtYS1sLW0tblEje3VRLWItWVItci10J2ZkT1NYWVplaHJzdHZ4fH0hUiFTIVQhVSFYIWMhZCFlIWYhZyFoIWshbiFvIXAhciFzIXkhfCNRI1IjWyNpI2wjfSRPJFEkUyRWJGckaSRqJGwkeiVQJVclWiVdJWAlZCVpJWsldSV9JlAmWyZgJmkmayZsJnMmdyZ6J1InVSdgJ2QnZidnJ2sncCdyJ3YneihQKFEoVyhaKGIoZChsKG8oeylPKVMpVClYKVspZSlvKXgpeSl8KlMqVCpWKlgqWypdKmAqYypnKmgqbypxKnIqeitTK1QrWitiK2MrZituK28rcStyK3Urdyt5K3srfSxQLFEsUyxnLGksbSxwLHMtVC1VLWEtZC1mLWctaC1pLWstbC1tLW4tby1xLXVXI29sIU8hUCReVyN3dSZeLVktdFEkYCFRUSRwIVlRJHEhWlckeSFpJ2EpdSttUyZdI3gjeVEmfSRrUShlJlZRKHMmbVcodCZvKHUodip4VSh3JnEoeCp5USlnJ1dXKWgnWStpLGstUlMraClpKWpZLFUqcyxWLHgseS1eUSxYKnVRLGQrX1EsZithUi1dLHdSJlsjd2khdlhZIVMhVCVdJWQncid6KU8qUypWKlhSJVohdVEhelhRJXYjW1EmZSRTUiZoJFZULVgscy1kIVUhalAhbSNoI3UkVyRmJHIkcyR0JHUkdiR3JWIlZyVtJW4mYSZ5KGMobilSKlEqWitSK3wtalEmWSNwUiddJHFSJ2AkeVIlUyFsJ25jT1NYWVplaHJzdHZ4fH0hUiFTIVQhVSFYIWMhZCFlIWYhZyFoIWkhayFuIW8hcCFyIXMheSF8I1EjUiNbI2kjbCN9JE8kUSRTJFYkZyRpJGokbCR6JVAlVyVaJV0lYCVkJWklayV1JX0mUCZbJmAmaSZrJmwmcyZ3JnonUidVJ2AnYSdkJ2YnZydrJ3Ancid2J3ooUChRKFcoWihiKGQobChvKHspTylTKVQpWClbKWUpbyl1KXgpeSl8KlMqVCpWKlgqWypdKmAqYypnKmgqbypxKnIqeitTK1QrWitiK2MrZittK24rbytxK3IrdSt3K3kreyt9LFAsUSxTLGcsaSxtLHAscy1ULVUtYS1kLWYtZy1oLWktay1sLW0tbi1vLXEtdVQjZmMjZ1MjXV8jXlMjYGAjYVMjYmEjY1MjZGIjZVQqayheKmxUKF8ldihhUSRVd1IrZyloWCRTdyRUJFUmZ1prT3IkbClbK1pYb09yKVsrWlEkbSFXUSZ1JGRRJnYkZVEnWCRvUSdbJHFRKVkmfFEpYCdSUSliJ1NRKWMnVFEpcCdaUSlyJ11RKn0pT1ErUClQUStRKVFRK1UpV1MrVylaKXFRK1spXlErXSlfUSteKWFRLFsqfFEsXStPUSxfK1ZRLGArWFEsZStgUSx8LF5RLU8sY1EtUCxkUi1fLH1Xb09yKVsrWlIjcm5RJ1okcFIpWiZ9UStmKWhSLGkrZ1EpcSdaUitYKVpabU9ucilbK1pRck9SI3RyUSZfI3pSKGomX1MlaiNQI3xTKFIlaihVVChVJW0mYVElXiF4USVlIXtXJ3MlXiVlJ3gnfFEneCViUid8JWdRJmokV1IocCZqUShYJW5RKl4oU1QqZChYKl5RJ2Ike1IpdidiUydlJU8lUFkpeidlKXsrcyxxLVZVKXsnZidnJ2hVK3MpfCl9Kk9TLHErdCt1Ui1WLHJRI1ddUiVxI1dRI1peUiVzI1pRI15fUiV3I15RKFsldFMqaShbKmpSKmooXVEqbCheUixSKmxRI2FgUiV5I2FRI2NhUiV6I2NRI2ViUiV7I2VRI2djUiV8I2dRI2pmUSZPI2hXJlIjaiZPKG0qcFEobSZkUipwLWpRJFR3UyZmJFQmZ1ImZyRVUSZ0JGJSKHwmdFEmVyNvUihmJldRJF4hUFImbiReUSp0KHRTLFcqdCx6Uix6LFhRJnIkYFIoeSZyUSNtalImVCNtUStaKVtSLGErWlEofSZ1Uip7KH1RJngkZlMpVSZ4KVZSKVYmeVEnUSRtUildJ1FRJ1YkblMpZidWK2RSK2QpZ1ErailsUixsK2pXbk9yKVsrWlIjcW5TcU9yVCtZKVsrWldwT3IpWytaUidPJGxZak9yJGwpWytaUiZTI2xbd09yI2wkbClbK1pSJmUkUyZZUE9YWVpocnR2fH0hUiFTIVQhWCFpIWshbiFvIXAhciFzI1sjaSNsJE8kUSRTJFYkaiRsJHolUCVXJVolXSVkJWklayV1JX0mWyZgJmsmbCZzJnonUidVJ2AnYSdkJ2YnZydrJ3IneihRKFcoWihiKGQobCh7KU8pWClbKWUpbyl1KXgpeSl8KlMqVCpWKlgqWypdKmAqZypoKm8qcip6K1orYitjK2YrbStuK28rcStyK3Urdyt5K3srfSxQLFEsUyxnLGksbSxwLHMtVC1VLWEtZC1mLWctaC1pLWstbC1tLW4tcS11USFtU1EjaGVRI3VzVSRXeCVgJ3ZTJGYhVSRpUSRyIWNRJHMhZFEkdCFlUSR1IWZRJHYhZ1EkdyFoUSViIXlRJWchfFElbSNRUSVuI1JRJmEjfVEmeSRnUShjJlBVKG4maShvKnFXKVImdylUK1MrVFEqUSdwUSpaKFBRK1IpU1ErfCpjUi1qLW9RIXhYUSF7WVEkZCFTUSRlIVReJ28lXSVkJ3IneipTKlYqWFIrTylPW2ZPciNsJGwpWytaaCF1WFkhUyFUJV0lZCdyJ3opTypTKlYqWFEjUFpRI2toUyN8dnxRJFp9VyRiIVIkViZ6KVhTJG4hWCRqVyR4IWknYSl1K21RJU8ha1EldCNbYCZRI2klfShiKGQobCpvLFMtblEmYiRPUSZjJFFRJmQkU1EnXiR6USdoJVBRJ24lWlcoTyVpKFEqWypgUShTJWtRKF0ldVEoaCZbUyhrJmAtbFEocSZrUShyJmxVKHomcyh7KnpRKWEnUlkpZCdVKWUrYitjLGdRKXMnYF4pdydkKXkrcStyLHAtVS1hUSl9J2ZRKk8nZ1MqUCdrLW1XKmIoVypdK3krfVcqZihaKmgsUCxRUStsKW9RK3ApeFErdCl8USxPKmdRLFQqclEsaCtmUSxuK25RLG8rb1Escit1USx2K3tRLVEsaVEtUyxtUi1gLVRoVE9yI2kjbCRsJX0mYCdrKGIoZClbK1okeiF0WFlaaHZ8fSFSIVMhVCFYIWkhayNbJE8kUSRTJFYkaiR6JVAlWiVdJWQlaSVrJXUmWyZrJmwmcyZ6J1InVSdgJ2EnZCdmJ2cncid6KFEoVyhaKGwoeylPKVgpZSlvKXUpeCl5KXwqUypWKlgqWypdKmAqZypoKm8qcip6K2IrYytmK20rbitvK3Ercit1K3kreyt9LFAsUSxTLGcsaSxtLHAtVC1VLWEtbC1tLW5RI3Z0VyVUIW4hci1nLXFRJVUhb1ElViFwUSVYIXNRJWMtZlMnaiVXLWtRJ2wtaFEnbS1pUSt2KlRRLHUrd1MtVyxzLWRSLXMtdVUjenUtWS10UihpJl5bZ09yI2wkbClbK1pYIXdYI1skUyRWUSNVWlEkUHZSJFl8USVfIXhRJWYhe1ElbCNQUSdeJHhRJ3klYlEnfSVnUShWJW1RKFklblEqXyhTUSx0K3ZRLVssdVItYy1aUSRYeFEndSVgUipVJ3ZRLVosc1ItZS1kUiNPWVIjVFpSJH0haVEkeyFpVil0J2EpdSttUiVRIWtSJXYjW1EoYCV2UipuKGFRJGMhUlEmaCRWUSlXJnpSK1YpWFEjcGxRJFshT1EkXyFQUiZwJF5RKHMmb1Eqdih1USp3KHZSLFoqeFIkYSFRWHBPcilbK1pRJGghVVImeyRpUSRvIVhSJnwkalIpbidZUSlsJ1lWLGoraSxrLVJcIixcbiAgbm9kZU5hbWVzOiBcIuKaoCBwcmludCBDb21tZW50IFNjcmlwdCBBc3NpZ25TdGF0ZW1lbnQgKiBCaW5hcnlFeHByZXNzaW9uIEJpdE9wIEJpdE9wIEJpdE9wIEJpdE9wIEFyaXRoT3AgQXJpdGhPcCBAIEFyaXRoT3AgKiogVW5hcnlFeHByZXNzaW9uIEFyaXRoT3AgQml0T3AgQXdhaXRFeHByZXNzaW9uIGF3YWl0IFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uICggQmluYXJ5RXhwcmVzc2lvbiBvciBhbmQgQ29tcGFyZU9wIGluIG5vdCBpcyBVbmFyeUV4cHJlc3Npb24gQ29uZGl0aW9uYWxFeHByZXNzaW9uIGlmIGVsc2UgTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgUGFyYW1MaXN0IFZhcmlhYmxlTmFtZSBBc3NpZ25PcCAsIDogTmFtZWRFeHByZXNzaW9uIEFzc2lnbk9wIFlpZWxkRXhwcmVzc2lvbiB5aWVsZCBmcm9tICkgVHVwbGVFeHByZXNzaW9uIENvbXByZWhlbnNpb25FeHByZXNzaW9uIGFzeW5jIGZvciBMYW1iZGFFeHByZXNzaW9uIEFycmF5RXhwcmVzc2lvbiBbIF0gQXJyYXlDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiBEaWN0aW9uYXJ5RXhwcmVzc2lvbiB7IH0gRGljdGlvbmFyeUNvbXByZWhlbnNpb25FeHByZXNzaW9uIFNldEV4cHJlc3Npb24gU2V0Q29tcHJlaGVuc2lvbkV4cHJlc3Npb24gQ2FsbEV4cHJlc3Npb24gQXJnTGlzdCBBc3NpZ25PcCBNZW1iZXJFeHByZXNzaW9uIC4gUHJvcGVydHlOYW1lIE51bWJlciBTdHJpbmcgRm9ybWF0U3RyaW5nIEZvcm1hdFJlcGxhY2VtZW50IEZvcm1hdENvbnZlcnNpb24gRm9ybWF0U3BlYyBDb250aW51ZWRTdHJpbmcgRWxsaXBzaXMgTm9uZSBCb29sZWFuIFR5cGVEZWYgQXNzaWduT3AgVXBkYXRlU3RhdGVtZW50IFVwZGF0ZU9wIEV4cHJlc3Npb25TdGF0ZW1lbnQgRGVsZXRlU3RhdGVtZW50IGRlbCBQYXNzU3RhdGVtZW50IHBhc3MgQnJlYWtTdGF0ZW1lbnQgYnJlYWsgQ29udGludWVTdGF0ZW1lbnQgY29udGludWUgUmV0dXJuU3RhdGVtZW50IHJldHVybiBZaWVsZFN0YXRlbWVudCBQcmludFN0YXRlbWVudCBSYWlzZVN0YXRlbWVudCByYWlzZSBJbXBvcnRTdGF0ZW1lbnQgaW1wb3J0IGFzIFNjb3BlU3RhdGVtZW50IGdsb2JhbCBub25sb2NhbCBBc3NlcnRTdGF0ZW1lbnQgYXNzZXJ0IFN0YXRlbWVudEdyb3VwIDsgSWZTdGF0ZW1lbnQgQm9keSBlbGlmIFdoaWxlU3RhdGVtZW50IHdoaWxlIEZvclN0YXRlbWVudCBUcnlTdGF0ZW1lbnQgdHJ5IGV4Y2VwdCBmaW5hbGx5IFdpdGhTdGF0ZW1lbnQgd2l0aCBGdW5jdGlvbkRlZmluaXRpb24gZGVmIFBhcmFtTGlzdCBBc3NpZ25PcCBUeXBlRGVmIENsYXNzRGVmaW5pdGlvbiBjbGFzcyBEZWNvcmF0ZWRTdGF0ZW1lbnQgRGVjb3JhdG9yIEF0XCIsXG4gIG1heFRlcm06IDIzNCxcbiAgY29udGV4dDogdHJhY2tJbmRlbnQsXG4gIG5vZGVQcm9wczogW1xuICAgIFtsZXplci5Ob2RlUHJvcC5ncm91cCwgLTE0LDQsODAsODIsODMsODUsODcsODksOTEsOTMsOTQsOTUsOTcsMTAwLDEwMyxcIlN0YXRlbWVudCBTdGF0ZW1lbnRcIiwtMjIsNiwxNiwxOSwyMSwzNyw0Nyw0OCw1Miw1NSw1Niw1OSw2MCw2MSw2Miw2NSw2OCw2OSw3MCw3NCw3NSw3Niw3NyxcIkV4cHJlc3Npb25cIiwtOSwxMDUsMTA3LDExMCwxMTIsMTEzLDExNywxMTksMTI0LDEyNixcIlN0YXRlbWVudFwiXVxuICBdLFxuICBza2lwcGVkTm9kZXM6IFswLDJdLFxuICByZXBlYXROb2RlQ291bnQ6IDMyLFxuICB0b2tlbkRhdGE6IFwiJkFhTWdSIV5PWCR9WFkhI3hZWyR9W10hI3hdcCR9cHEhI3hxciEmU3JzISl5c3QhQ3t0dSR9dXYkK312dyQuYXd4JC9teHkkTGd5eiRNbXp7JE5ze3wlI2N8fSUkb30hTyUldSFPIVAlKFshUCFRJTNiIVEhUiU2USFSIVslOlMhWyFdJUVPIV0hXiVHYiFeIV8lSGghXyFgJUtXIWAhYSVMZCFhIWIkfSFiIWMmIFAhYyFkJiFfIWQhZSYkUCFlIWgmIV8haCFpJi5SIWkhdCYhXyF0IXUmN2chdSF3JiFfIXcheCYsYSF4IX0mIV8hfSNPJjlxI08jUCElYiNQI1EmOncjUSNSJjt9I1IjUyYhXyNTI1QkfSNUI1UmIV8jVSNWJiRQI1YjWSYhXyNZI1omLlIjWiNmJiFfI2YjZyY3ZyNnI2kmIV8jaSNqJixhI2ojbyYhXyNvI3AmPVojcCNxJj5QI3EjciY/XSNyI3MmQFojcyRnJH0kZ34mIV88ciVgWiVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4I08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9OVsmXlolcDdbJWdTJW1gJXYhYk9yJ1Byc0N4c3cnUHd4KFB4I08nUCNPI1A+diNQI28nUCNvI3BDVSNwI3EnUCNxI3I/WyNyfidQOVsnXlolcDdbJWdTJWpXJW1gJXYhYk9yJ1BycyZSc3cnUHd4KFB4I08nUCNPI1A+diNQI28nUCNvI3BDVSNwI3EnUCNxI3I/WyNyfidQOHooV1olcDdbJWpXT3IoeXJzKXdzdyh5d3g7YngjTyh5I08jUDJWI1Ajbyh5I28jcDduI3AjcSh5I3EjcjJrI3J+KHk4eilVWiVwN1slZ1MlalcldiFiT3IoeXJzKXdzdyh5d3goUHgjTyh5I08jUDJWI1Ajbyh5I28jcDduI3AjcSh5I3EjcjJrI3J+KHk4eipRWiVwN1slZ1MldiFiT3IoeXJzKnNzdyh5d3goUHgjTyh5I08jUDJWI1Ajbyh5I28jcDduI3AjcSh5I3EjcjJrI3J+KHk4eip8WiVwN1slZ1MldiFiT3IoeXJzK29zdyh5d3goUHgjTyh5I08jUDJWI1Ajbyh5I28jcDduI3AjcSh5I3EjcjJrI3J+KHk4cit4WCVwN1slZ1MldiFiT3crb3d4LGV4I08rbyNPI1AuViNQI28rbyNvI3AwXiNwI3ErbyNxI3IuayNyfitvOHIsalglcDdbT3crb3d4LVZ4I08rbyNPI1AuViNQI28rbyNvI3AwXiNwI3ErbyNxI3IuayNyfitvOHItW1glcDdbT3crb3d4LXd4I08rbyNPI1AuViNQI28rbyNvI3AwXiNwI3ErbyNxI3IuayNyfitvN1stfFIlcDdbTyNvLXcjcCNxLXcjcn4tdzhyLltUJXA3W08jbytvI28jcC5rI3AjcStvI3Ejci5rI3J+K28hZi5yViVnUyV2IWJPdy5rd3gvWHgjTy5rI08jUDBXI1Ajby5rI28jcDBeI3B+LmshZi9bVk93Lmt3eC9xeCNPLmsjTyNQMFcjUCNvLmsjbyNwMF4jcH4uayFmL3RVT3cua3gjTy5rI08jUDBXI1Ajby5rI28jcDBeI3B+LmshZjBaUE9+LmshZjBjViVnU093MHh3eDFeeCNPMHgjTyNQMlAjUCNvMHgjbyNwLmsjcH4weFMwfVQlZ1NPdzB4d3gxXngjTzB4I08jUDJQI1B+MHhTMWFUT3cweHd4MXB4I08weCNPI1AyUCNQfjB4UzFzU093MHh4I08weCNPI1AyUCNQfjB4UzJTUE9+MHg4ejJbVCVwN1tPI28oeSNvI3AyayNwI3EoeSNxI3IyayNyfih5IW4ydFglZ1MlalcldiFiT3Iya3JzM2FzdzJrd3g0d3gjTzJrI08jUDdoI1AjbzJrI28jcDduI3B+MmshbjNoWCVnUyV2IWJPcjJrcnM0VHN3Mmt3eDR3eCNPMmsjTyNQN2gjUCNvMmsjbyNwN24jcH4yayFuNFtYJWdTJXYhYk9yMmtycy5rc3cya3d4NHd4I08yayNPI1A3aCNQI28yayNvI3A3biNwfjJrIW40fFglaldPcjJrcnMzYXN3Mmt3eDVpeCNPMmsjTyNQN2gjUCNvMmsjbyNwN24jcH4yayFuNW5YJWpXT3Iya3JzM2FzdzJrd3g2WngjTzJrI08jUDdoI1AjbzJrI28jcDduI3B+MmtXNmBUJWpXT3I2WnJzNm9zI082WiNPI1A3YiNQfjZaVzZyVE9yNlpyczdScyNPNlojTyNQN2IjUH42Wlc3VVNPcjZacyNPNlojTyNQN2IjUH42Wlc3ZVBPfjZaIW43a1BPfjJrIW43dVglZ1MlaldPcjhicnM5T3N3OGJ3eDpVeCNPOGIjTyNQO1sjUCNvOGIjbyNwMmsjcH44Yls4aVYlZ1MlaldPcjhicnM5T3N3OGJ3eDpVeCNPOGIjTyNQO1sjUH44Yls5VFYlZ1NPcjhicnM5anN3OGJ3eDpVeCNPOGIjTyNQO1sjUH44Yls5b1YlZ1NPcjhicnMweHN3OGJ3eDpVeCNPOGIjTyNQO1sjUH44Yls6WlYlaldPcjhicnM5T3N3OGJ3eDpweCNPOGIjTyNQO1sjUH44Yls6dVYlaldPcjhicnM5T3N3OGJ3eDZaeCNPOGIjTyNQO1sjUH44Yls7X1BPfjhiOHo7aVolcDdbJWpXT3IoeXJzKXdzdyh5d3g8W3gjTyh5I08jUDJWI1Ajbyh5I28jcDduI3AjcSh5I3EjcjJrI3J+KHk3ZDxjWCVwN1slaldPcjxbcnM9T3MjTzxbI08jUD5iI1AjbzxbI28jcDZaI3AjcTxbI3EjcjZaI3J+PFs3ZD1UWCVwN1tPcjxbcnM9cHMjTzxbI08jUD5iI1AjbzxbI28jcDZaI3AjcTxbI3EjcjZaI3J+PFs3ZD11WCVwN1tPcjxbcnMtd3MjTzxbI08jUD5iI1AjbzxbI28jcDZaI3AjcTxbI3EjcjZaI3J+PFs3ZD5nVCVwN1tPI288WyNvI3A2WiNwI3E8WyNxI3I2WiNyfjxbOVs+e1QlcDdbTyNvJ1AjbyNwP1sjcCNxJ1AjcSNyP1sjcn4nUCNPP2dYJWdTJWpXJW1gJXYhYk9yP1tyc0BTc3c/W3d4NHd4I08/WyNPI1BDTyNQI28/WyNvI3BDVSNwfj9bI09AXVglZ1MlbWAldiFiT3I/W3JzQHhzdz9bd3g0d3gjTz9bI08jUENPI1Ajbz9bI28jcENVI3B+P1sjT0FSWCVnUyVtYCV2IWJPcj9bcnNBbnN3P1t3eDR3eCNPP1sjTyNQQ08jUCNvP1sjbyNwQ1UjcH4/WyF2QXdWJWdTJW1gJXYhYk93QW53eC9YeCNPQW4jTyNQQl4jUCNvQW4jbyNwQmQjcH5BbiF2QmFQT35BbiF2QmlWJWdTT3cweHd4MV54I08weCNPI1AyUCNQI28weCNvI3BBbiNwfjB4I09DUlBPfj9bI09DXVglZ1MlaldPcjhicnM5T3N3OGJ3eDpVeCNPOGIjTyNQO1sjUCNvOGIjbyNwP1sjcH44YjlbRFRaJXA3WyVnUyVtYCV2IWJPcidQcnNEdnN3J1B3eChQeCNPJ1AjTyNQPnYjUCNvJ1AjbyNwQ1UjcCNxJ1AjcSNyP1sjcn4nUDlTRVJYJXA3WyVnUyVtYCV2IWJPd0R2d3gsZXgjT0R2I08jUEVuI1Ajb0R2I28jcEJkI3AjcUR2I3EjckFuI3J+RHY5U0VzVCVwN1tPI29EdiNvI3BBbiNwI3FEdiNxI3JBbiNyfkR2PGJGX1olcDdbJWpXJXNwJXgjdE9yR1Fycyl3c3dHUXd4TV54I09HUSNPI1BIUyNQI29HUSNvI3BMaiNwI3FHUSNxI3JIaCNyfkdRPGJHYVolcDdbJWdTJWpXJXNwJXYhYiV4I3RPckdRcnMpd3N3R1F3eEZTeCNPR1EjTyNQSFMjUCNvR1EjbyNwTGojcCNxR1EjcSNySGgjcn5HUTxiSFhUJXA3W08jb0dRI28jcEhoI3AjcUdRI3EjckhoI3J+R1EmVUh1WCVnUyVqVyVzcCV2IWIleCN0T3JIaHJzM2Fzd0hod3hJYngjT0hoI08jUExkI1Ajb0hoI28jcExqI3B+SGgmVUlrWCVqVyVzcCV4I3RPckhocnMzYXN3SGh3eEpXeCNPSGgjTyNQTGQjUCNvSGgjbyNwTGojcH5IaCZVSmFYJWpXJXNwJXgjdE9ySGhyczNhc3dIaHd4Snx4I09IaCNPI1BMZCNQI29IaCNvI3BMaiNwfkhoJG5LVlglalclc3AleCN0T3JKfHJzNm9zd0p8d3hKfHgjT0p8I08jUEtyI1Ajb0p8I28jcEt4I3B+Snwkbkt1UE9+Snwkbkt9ViVqV09yNlpyczZvcyNPNlojTyNQN2IjUCNvNlojbyNwSnwjcH42WiZVTGdQT35IaCZVTHFYJWdTJWpXT3I4YnJzOU9zdzhid3g6VXgjTzhiI08jUDtbI1AjbzhiI28jcEhoI3B+OGI8Yk1pWiVwN1slalclc3AleCN0T3JHUXJzKXdzd0dRd3hOW3gjT0dRI08jUEhTI1Ajb0dRI28jcExqI3AjcUdRI3EjckhoI3J+R1E6ek5nWiVwN1slalclc3AleCN0T3JOW3JzPU9zd05bd3hOW3gjT05bI08jUCEgWSNQI29OWyNvI3BLeCNwI3FOWyNxI3JKfCNyfk5bOnohIF9UJXA3W08jb05bI28jcEp8I3AjcU5bI3Ejckp8I3J+Tls8ciEgc1QlcDdbTyNvJH0jbyNwISFTI3AjcSR9I3EjciEhUyNyfiR9JmYhIWNYJWdTJWpXJW1gJXNwJXYhYiV4I3RPciEhU3JzQFNzdyEhU3d4SWJ4I08hIVMjTyNQISNPI1AjbyEhUyNvI3AhI1UjcH4hIVMmZiEjUlBPfiEhUyZmISNdWCVnUyVqV09yOGJyczlPc3c4Ynd4OlV4I084YiNPI1A7WyNQI284YiNvI3AhIVMjcH44Yk1nISRdYSVwN1slZ1MlalckbzFzJW1gJXNwJXYhYiV4I3RPWCR9WFkhI3hZWyR9W10hI3hdcCR9cHEhI3hxciR9cnMmUnN3JH13eEZTeCNPJH0jTyNQISViI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfU1nISVnWCVwN1tPWSR9WVohI3haXSR9XV4hI3heI28kfSNvI3AhIVMjcCNxJH0jcSNyISFTI3J+JH08dSEmZWIlcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFfJH0hXyFgISdtIWAjTyR9I08jUCEgbiNQI1QkfSNUI1UhKHMjVSNmJH0jZiNnIShzI2cjaCEocyNoI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH08dSEoUVpqUiVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4I08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9PHUhKVdaIWpSJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeyEqWV8ldHAlcDdbJWdTJWUsWCVtYCV2IWJPWSErWFlaJ1BaXSErWF1eJ1BeciErWHJzIUJQc3chK1h3eCEtZ3gjTyErWCNPI1AhPmUjUCNvIStYI28jcCFAfSNwI3EhK1gjcSNyIT55I3J+IStYRGUhK2hfJXA3WyVnUyVqVyVlLFglbWAldiFiT1khK1hZWidQWl0hK1hdXidQXnIhK1hycyEsZ3N3IStYd3ghLWd4I08hK1gjTyNQIT5lI1AjbyErWCNvI3AhQH0jcCNxIStYI3EjciE+eSNyfiErWERlISx0WiVwN1slZ1MlZSxYJW1gJXYhYk9yJ1Byc0N4c3cnUHd4KFB4I08nUCNPI1A+diNQI28nUCNvI3BDVSNwI3EnUCNxI3I/WyNyfidQRFQhLXBfJXA3WyVqVyVlLFhPWSEub1laKHlaXSEub11eKHleciEub3JzIS97c3chLm93eCE7UngjTyEubyNPI1AhMHkjUCNvIS5vI28jcCE2bSNwI3EhLm8jcSNyITFfI3J+IS5vRFQhLnxfJXA3WyVnUyVqVyVlLFgldiFiT1khLm9ZWih5Wl0hLm9dXih5XnIhLm9ycyEve3N3IS5vd3ghLWd4I08hLm8jTyNQITB5I1AjbyEubyNvI3AhNm0jcCNxIS5vI3EjciExXyNyfiEub0RUITBXWiVwN1slZ1MlZSxYJXYhYk9yKHlycypzc3coeXd4KFB4I08oeSNPI1AyViNQI28oeSNvI3A3biNwI3EoeSNxI3IyayNyfih5RFQhMU9UJXA3W08jbyEubyNvI3AhMV8jcCNxIS5vI3EjciExXyNyfiEuby13ITFqXSVnUyVqVyVlLFgldiFiT1khMV9ZWjJrWl0hMV9dXjJrXnIhMV9ycyEyY3N3ITFfd3ghM1h4I08hMV8jTyNQITZnI1AjbyExXyNvI3AhNm0jcH4hMV8tdyEybFglZ1MlZSxYJXYhYk9yMmtyczRUc3cya3d4NHd4I08yayNPI1A3aCNQI28yayNvI3A3biNwfjJrLXchM2BdJWpXJWUsWE9ZITFfWVoya1pdITFfXV4ya15yITFfcnMhMmNzdyExX3d4ITRYeCNPITFfI08jUCE2ZyNQI28hMV8jbyNwITZtI3B+ITFfLXchNGBdJWpXJWUsWE9ZITFfWVoya1pdITFfXV4ya15yITFfcnMhMmNzdyExX3d4ITVYeCNPITFfI08jUCE2ZyNQI28hMV8jbyNwITZtI3B+ITFfLGEhNWBYJWpXJWUsWE9ZITVYWVo2WlpdITVYXV42Wl5yITVYcnMhNXtzI08hNVgjTyNQITZhI1B+ITVYLGEhNlFUJWUsWE9yNlpyczdScyNPNlojTyNQN2IjUH42WixhITZkUE9+ITVYLXchNmpQT34hMV8tdyE2dl0lZ1MlalclZSxYT1khN29ZWjhiWl0hN29dXjhiXnIhN29ycyE4a3N3ITdvd3ghOVh4I08hN28jTyNQITp7I1AjbyE3byNvI3AhMV8jcH4hN28sZSE3eFolZ1MlalclZSxYT1khN29ZWjhiWl0hN29dXjhiXnIhN29ycyE4a3N3ITdvd3ghOVh4I08hN28jTyNQITp7I1B+ITdvLGUhOHJWJWdTJWUsWE9yOGJyczlqc3c4Ynd4OlV4I084YiNPI1A7WyNQfjhiLGUhOWBaJWpXJWUsWE9ZITdvWVo4YlpdITdvXV44Yl5yITdvcnMhOGtzdyE3b3d4ITpSeCNPITdvI08jUCE6eyNQfiE3byxlITpZWiVqVyVlLFhPWSE3b1laOGJaXSE3b11eOGJeciE3b3JzIThrc3chN293eCE1WHgjTyE3byNPI1AhOnsjUH4hN28sZSE7T1BPfiE3b0RUITtbXyVwN1slalclZSxYT1khLm9ZWih5Wl0hLm9dXih5XnIhLm9ycyEve3N3IS5vd3ghPFp4I08hLm8jTyNQITB5I1AjbyEubyNvI3AhNm0jcCNxIS5vI3EjciExXyNyfiEub0JtITxkXSVwN1slalclZSxYT1khPFpZWjxbWl0hPFpdXjxbXnIhPFpycyE9XXMjTyE8WiNPI1AhPlAjUCNvITxaI28jcCE1WCNwI3EhPFojcSNyITVYI3J+ITxaQm0hPWRYJXA3WyVlLFhPcjxbcnM9cHMjTzxbI08jUD5iI1AjbzxbI28jcDZaI3AjcTxbI3EjcjZaI3J+PFtCbSE+VVQlcDdbTyNvITxaI28jcCE1WCNwI3EhPFojcSNyITVYI3J+ITxaRGUhPmpUJXA3W08jbyErWCNvI3AhPnkjcCNxIStYI3EjciE+eSNyfiErWC5YIT9XXSVnUyVqVyVlLFglbWAldiFiT1khPnlZWj9bWl0hPnldXj9bXnIhPnlycyFAUHN3IT55d3ghM1h4I08hPnkjTyNQIUB3I1AjbyE+eSNvI3AhQH0jcH4hPnkuWCFAW1glZ1MlZSxYJW1gJXYhYk9yP1tyc0B4c3c/W3d4NHd4I08/WyNPI1BDTyNQI28/WyNvI3BDVSNwfj9bLlghQHpQT34hPnkuWCFBV10lZ1MlalclZSxYT1khN29ZWjhiWl0hN29dXjhiXnIhN29ycyE4a3N3ITdvd3ghOVh4I08hN28jTyNQITp7I1AjbyE3byNvI3AhPnkjcH4hN29HWiFCXlolcDdbJWdTJWUsWCVtYCV2IWJPcidQcnMhQ1BzdydQd3goUHgjTydQI08jUD52I1AjbydQI28jcENVI3AjcSdQI3Ejcj9bI3J+J1BHWiFDYFglayN8JXA3WyVnUyVpLFglbWAldiFiT3dEdnd4LGV4I09EdiNPI1BFbiNQI29EdiNvI3BCZCNwI3FEdiNxI3JBbiNyfkR2TWchRGBfUTFzJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T1khQ3tZWiR9Wl0hQ3tdXiR9XnIhQ3tycyFFX3N3IUN7d3gjSHF4I08hQ3sjTyNQJChpI1AjbyFDeyNvI3AkKnsjcCNxIUN7I3EjciQpXSNyfiFDe0pQIUVsX1ExcyVwN1slZ1MlbWAldiFiT1khRmtZWidQWl0hRmtdXidQXnIhRmtycyNFa3N3IUZrd3ghR3l4I08hRmsjTyNQIz11I1AjbyFGayNvI3AjRGkjcCNxIUZrI3EjciM+aSNyfiFGa0pQIUZ6X1ExcyVwN1slZ1MlalclbWAldiFiT1khRmtZWidQWl0hRmtdXidQXnIhRmtycyFFX3N3IUZrd3ghR3l4I08hRmsjTyNQIz11I1AjbyFGayNvI3AjRGkjcCNxIUZrI3EjciM+aSNyfiFGa0lvIUhTX1ExcyVwN1slaldPWSFJUllaKHlaXSFJUl1eKHleciFJUnJzIUpfc3chSVJ3eCM4d3gjTyFJUiNPI1AjKlIjUCNvIUlSI28jcCMyfSNwI3EhSVIjcSNyIyp1I3J+IUlSSW8hSWBfUTFzJXA3WyVnUyVqVyV2IWJPWSFJUllaKHlaXSFJUl1eKHleciFJUnJzIUpfc3chSVJ3eCFHeXgjTyFJUiNPI1AjKlIjUCNvIUlSI28jcCMyfSNwI3EhSVIjcSNyIyp1I3J+IUlSSW8hSmpfUTFzJXA3WyVnUyV2IWJPWSFJUllaKHlaXSFJUl1eKHleciFJUnJzIUtpc3chSVJ3eCFHeXgjTyFJUiNPI1AjKlIjUCNvIUlSI28jcCMyfSNwI3EhSVIjcSNyIyp1I3J+IUlSSW8hS3RfUTFzJXA3WyVnUyV2IWJPWSFJUllaKHlaXSFJUl1eKHleciFJUnJzIUxzc3chSVJ3eCFHeXgjTyFJUiNPI1AjKlIjUCNvIUlSI28jcCMyfSNwI3EhSVIjcSNyIyp1I3J+IUlSSWchTU9dUTFzJXA3WyVnUyV2IWJPWSFMc1laK29aXSFMc11eK29edyFMc3d4IU13eCNPIUxzI08jUCMheSNQI28hTHMjbyNwIyZtI3AjcSFMcyNxI3IjI20jcn4hTHNJZyFOT11RMXMlcDdbT1khTHNZWitvWl0hTHNdXitvXnchTHN3eCFOd3gjTyFMcyNPI1AjIXkjUCNvIUxzI28jcCMmbSNwI3EhTHMjcSNyIyNtI3J+IUxzSWcjIE9dUTFzJXA3W09ZIUxzWVorb1pdIUxzXV4rb153IUxzd3gjIHd4I08hTHMjTyNQIyF5I1AjbyFMcyNvI3AjJm0jcCNxIUxzI3EjciMjbSNyfiFMc0hQIyFPWFExcyVwN1tPWSMgd1laLXdaXSMgd11eLXdeI28jIHcjbyNwIyFrI3AjcSMgdyNxI3IjIWsjcn4jIHcxcyMhcFJRMXNPWSMha1pdIyFrXn4jIWtJZyMjUVhRMXMlcDdbT1khTHNZWitvWl0hTHNdXitvXiNvIUxzI28jcCMjbSNwI3EhTHMjcSNyIyNtI3J+IUxzM1ojI3ZaUTFzJWdTJXYhYk9ZIyNtWVoua1pdIyNtXV4ua153IyNtd3gjJGl4I08jI20jTyNQIyZYI1AjbyMjbSNvI3AjJm0jcH4jI20zWiMkblpRMXNPWSMjbVlaLmtaXSMjbV1eLmtedyMjbXd4IyVheCNPIyNtI08jUCMmWCNQI28jI20jbyNwIyZtI3B+IyNtM1ojJWZaUTFzT1kjI21ZWi5rWl0jI21dXi5rXncjI213eCMha3gjTyMjbSNPI1AjJlgjUCNvIyNtI28jcCMmbSNwfiMjbTNaIyZeVFExc09ZIyNtWVoua1pdIyNtXV4ua15+IyNtM1ojJnRaUTFzJWdTT1kjJ2dZWjB4Wl0jJ2ddXjB4XncjJ2d3eCMoWngjTyMnZyNPI1AjKW0jUCNvIydnI28jcCMjbSNwfiMnZzF3IyduWFExcyVnU09ZIydnWVoweFpdIydnXV4weF53Iydnd3gjKFp4I08jJ2cjTyNQIyltI1B+IydnMXcjKGBYUTFzT1kjJ2dZWjB4Wl0jJ2ddXjB4XncjJ2d3eCMoe3gjTyMnZyNPI1AjKW0jUH4jJ2cxdyMpUVhRMXNPWSMnZ1laMHhaXSMnZ11eMHhedyMnZ3d4IyFreCNPIydnI08jUCMpbSNQfiMnZzF3IylyVFExc09ZIydnWVoweFpdIydnXV4weF5+IydnSW8jKllYUTFzJXA3W09ZIUlSWVooeVpdIUlSXV4oeV4jbyFJUiNvI3AjKnUjcCNxIUlSI3EjciMqdSNyfiFJUjNjIytRXVExcyVnUyVqVyV2IWJPWSMqdVlaMmtaXSMqdV1eMmteciMqdXJzIyt5c3cjKnV3eCMtfXgjTyMqdSNPI1AjMmkjUCNvIyp1I28jcCMyfSNwfiMqdTNjIyxTXVExcyVnUyV2IWJPWSMqdVlaMmtaXSMqdV1eMmteciMqdXJzIyx7c3cjKnV3eCMtfXgjTyMqdSNPI1AjMmkjUCNvIyp1I28jcCMyfSNwfiMqdTNjIy1VXVExcyVnUyV2IWJPWSMqdVlaMmtaXSMqdV1eMmteciMqdXJzIyNtc3cjKnV3eCMtfXgjTyMqdSNPI1AjMmkjUCNvIyp1I28jcCMyfSNwfiMqdTNjIy5VXVExcyVqV09ZIyp1WVoya1pdIyp1XV4ya15yIyp1cnMjK3lzdyMqdXd4Iy59eCNPIyp1I08jUCMyaSNQI28jKnUjbyNwIzJ9I3B+Iyp1M2MjL1VdUTFzJWpXT1kjKnVZWjJrWl0jKnVdXjJrXnIjKnVycyMreXN3Iyp1d3gjL314I08jKnUjTyNQIzJpI1AjbyMqdSNvI3AjMn0jcH4jKnUxeyMwVVhRMXMlaldPWSMvfVlaNlpaXSMvfV1eNlpeciMvfXJzIzBxcyNPIy99I08jUCMyVCNQfiMvfTF7IzB2WFExc09ZIy99WVo2WlpdIy99XV42Wl5yIy99cnMjMWNzI08jL30jTyNQIzJUI1B+Iy99MXsjMWhYUTFzT1kjL31ZWjZaWl0jL31dXjZaXnIjL31ycyMha3MjTyMvfSNPI1AjMlQjUH4jL30xeyMyWVRRMXNPWSMvfVlaNlpaXSMvfV1eNlpefiMvfTNjIzJuVFExc09ZIyp1WVoya1pdIyp1XV4ya15+Iyp1M2MjM1ddUTFzJWdTJWpXT1kjNFBZWjhiWl0jNFBdXjhiXnIjNFBycyM0e3N3IzRQd3gjNm94I08jNFAjTyNQIzhjI1AjbyM0UCNvI3AjKnUjcH4jNFAyUCM0WVpRMXMlZ1MlaldPWSM0UFlaOGJaXSM0UF1eOGJeciM0UHJzIzR7c3cjNFB3eCM2b3gjTyM0UCNPI1AjOGMjUH4jNFAyUCM1U1pRMXMlZ1NPWSM0UFlaOGJaXSM0UF1eOGJeciM0UHJzIzV1c3cjNFB3eCM2b3gjTyM0UCNPI1AjOGMjUH4jNFAyUCM1fFpRMXMlZ1NPWSM0UFlaOGJaXSM0UF1eOGJeciM0UHJzIydnc3cjNFB3eCM2b3gjTyM0UCNPI1AjOGMjUH4jNFAyUCM2dlpRMXMlaldPWSM0UFlaOGJaXSM0UF1eOGJeciM0UHJzIzR7c3cjNFB3eCM3aXgjTyM0UCNPI1AjOGMjUH4jNFAyUCM3cFpRMXMlaldPWSM0UFlaOGJaXSM0UF1eOGJeciM0UHJzIzR7c3cjNFB3eCMvfXgjTyM0UCNPI1AjOGMjUH4jNFAyUCM4aFRRMXNPWSM0UFlaOGJaXSM0UF1eOGJefiM0UElvIzlRX1ExcyVwN1slaldPWSFJUllaKHlaXSFJUl1eKHleciFJUnJzIUpfc3chSVJ3eCM6UHgjTyFJUiNPI1AjKlIjUCNvIUlSI28jcCMyfSNwI3EhSVIjcSNyIyp1I3J+IUlSSFgjOlldUTFzJXA3WyVqV09ZIzpQWVo8W1pdIzpQXV48W15yIzpQcnMjO1JzI08jOlAjTyNQIz1SI1AjbyM6UCNvI3AjL30jcCNxIzpQI3EjciMvfSNyfiM6UEhYIztZXVExcyVwN1tPWSM6UFlaPFtaXSM6UF1ePFteciM6UHJzIzxScyNPIzpQI08jUCM9UiNQI28jOlAjbyNwIy99I3AjcSM6UCNxI3IjL30jcn4jOlBIWCM8WV1RMXMlcDdbT1kjOlBZWjxbWl0jOlBdXjxbXnIjOlBycyMgd3MjTyM6UCNPI1AjPVIjUCNvIzpQI28jcCMvfSNwI3EjOlAjcSNyIy99I3J+IzpQSFgjPVlYUTFzJXA3W09ZIzpQWVo8W1pdIzpQXV48W14jbyM6UCNvI3AjL30jcCNxIzpQI3EjciMvfSNyfiM6UEpQIz18WFExcyVwN1tPWSFGa1laJ1BaXSFGa11eJ1BeI28hRmsjbyNwIz5pI3AjcSFGayNxI3IjPmkjcn4hRmszcyM+dl1RMXMlZ1MlalclbWAldiFiT1kjPmlZWj9bWl0jPmldXj9bXnIjPmlycyM/b3N3Iz5pd3gjLX14I08jPmkjTyNQI0RUI1AjbyM+aSNvI3AjRGkjcH4jPmkzcyM/el1RMXMlZ1MlbWAldiFiT1kjPmlZWj9bWl0jPmldXj9bXnIjPmlycyNAc3N3Iz5pd3gjLX14I08jPmkjTyNQI0RUI1AjbyM+aSNvI3AjRGkjcH4jPmkzcyNBT11RMXMlZ1MlbWAldiFiT1kjPmlZWj9bWl0jPmldXj9bXnIjPmlycyNBd3N3Iz5pd3gjLX14I08jPmkjTyNQI0RUI1AjbyM+aSNvI3AjRGkjcH4jPmkzayNCU1pRMXMlZ1MlbWAldiFiT1kjQXdZWkFuWl0jQXddXkFuXncjQXd3eCMkaXgjTyNBdyNPI1AjQnUjUCNvI0F3I28jcCNDWiNwfiNBdzNrI0J6VFExc09ZI0F3WVpBblpdI0F3XV5Bbl5+I0F3M2sjQ2JaUTFzJWdTT1kjJ2dZWjB4Wl0jJ2ddXjB4XncjJ2d3eCMoWngjTyMnZyNPI1AjKW0jUCNvIydnI28jcCNBdyNwfiMnZzNzI0RZVFExc09ZIz5pWVo/W1pdIz5pXV4/W15+Iz5pM3MjRHJdUTFzJWdTJWpXT1kjNFBZWjhiWl0jNFBdXjhiXnIjNFBycyM0e3N3IzRQd3gjNm94I08jNFAjTyNQIzhjI1AjbyM0UCNvI3AjPmkjcH4jNFBKUCNFeF9RMXMlcDdbJWdTJW1gJXYhYk9ZIUZrWVonUFpdIUZrXV4nUF5yIUZrcnMjRndzdyFGa3d4IUd5eCNPIUZrI08jUCM9dSNQI28hRmsjbyNwI0RpI3AjcSFGayNxI3IjPmkjcn4hRmtJdyNHVV1RMXMlcDdbJWdTJW1gJXYhYk9ZI0Z3WVpEdlpdI0Z3XV5Edl53I0Z3d3ghTXd4I08jRncjTyNQI0d9I1AjbyNGdyNvI3AjQ1ojcCNxI0Z3I3EjciNBdyNyfiNGd0l3I0hVWFExcyVwN1tPWSNGd1laRHZaXSNGd11eRHZeI28jRncjbyNwI0F3I3AjcSNGdyNxI3IjQXcjcn4jRndNViNJT19RMXMlcDdbJWpXJXNwJXgjdE9ZI0l9WVpHUVpdI0l9XV5HUV5yI0l9cnMhSl9zdyNJfXd4JCVdeCNPI0l9I08jUCNLXyNQI28jSX0jbyNwJCRaI3AjcSNJfSNxI3IjTFIjcn4jSX1NViNKYF9RMXMlcDdbJWdTJWpXJXNwJXYhYiV4I3RPWSNJfVlaR1FaXSNJfV1eR1FeciNJfXJzIUpfc3cjSX13eCNIcXgjTyNJfSNPI1AjS18jUCNvI0l9I28jcCQkWiNwI3EjSX0jcSNyI0xSI3J+I0l9TVYjS2ZYUTFzJXA3W09ZI0l9WVpHUVpdI0l9XV5HUV4jbyNJfSNvI3AjTFIjcCNxI0l9I3EjciNMUiNyfiNJfTZ5I0xiXVExcyVnUyVqVyVzcCV2IWIleCN0T1kjTFJZWkhoWl0jTFJdXkhoXnIjTFJycyMreXN3I0xSd3gjTVp4I08jTFIjTyNQJCN1I1AjbyNMUiNvI3AkJFojcH4jTFI2eSNNZl1RMXMlalclc3AleCN0T1kjTFJZWkhoWl0jTFJdXkhoXnIjTFJycyMreXN3I0xSd3gjTl94I08jTFIjTyNQJCN1I1AjbyNMUiNvI3AkJFojcH4jTFI2eSNOal1RMXMlalclc3AleCN0T1kjTFJZWkhoWl0jTFJdXkhoXnIjTFJycyMreXN3I0xSd3gkIGN4I08jTFIjTyNQJCN1I1AjbyNMUiNvI3AkJFojcH4jTFI1YyQgbl1RMXMlalclc3AleCN0T1kkIGNZWkp8Wl0kIGNdXkp8XnIkIGNycyMwcXN3JCBjd3gkIGN4I08kIGMjTyNQJCFnI1AjbyQgYyNvI3AkIXsjcH4kIGM1YyQhbFRRMXNPWSQgY1laSnxaXSQgY11eSnxefiQgYzVjJCNTWlExcyVqV09ZIy99WVo2WlpdIy99XV42Wl5yIy99cnMjMHFzI08jL30jTyNQIzJUI1AjbyMvfSNvI3AkIGMjcH4jL302eSQjelRRMXNPWSNMUllaSGhaXSNMUl1eSGhefiNMUjZ5JCRkXVExcyVnUyVqV09ZIzRQWVo4YlpdIzRQXV44Yl5yIzRQcnMjNHtzdyM0UHd4IzZveCNPIzRQI08jUCM4YyNQI28jNFAjbyNwI0xSI3B+IzRQTVYkJWpfUTFzJXA3WyVqVyVzcCV4I3RPWSNJfVlaR1FaXSNJfV1eR1FeciNJfXJzIUpfc3cjSX13eCQmaXgjTyNJfSNPI1AjS18jUCNvI0l9I28jcCQkWiNwI3EjSX0jcSNyI0xSI3J+I0l9S28kJnZfUTFzJXA3WyVqVyVzcCV4I3RPWSQmaVlaTltaXSQmaV1eTlteciQmaXJzIztSc3ckJml3eCQmaXgjTyQmaSNPI1AkJ3UjUCNvJCZpI28jcCQheyNwI3EkJmkjcSNyJCBjI3J+JCZpS28kJ3xYUTFzJXA3W09ZJCZpWVpOW1pdJCZpXV5OW14jbyQmaSNvI3AkIGMjcCNxJCZpI3EjciQgYyNyfiQmaU1nJChwWFExcyVwN1tPWSFDe1laJH1aXSFDe11eJH1eI28hQ3sjbyNwJCldI3AjcSFDeyNxI3IkKV0jcn4hQ3s3WiQpbl1RMXMlZ1MlalclbWAlc3AldiFiJXgjdE9ZJCldWVohIVNaXSQpXV1eISFTXnIkKV1ycyM/b3N3JCldd3gjTVp4I08kKV0jTyNQJCpnI1AjbyQpXSNvI3AkKnsjcH4kKV03WiQqbFRRMXNPWSQpXVlaISFTWl0kKV1dXiEhU15+JCldN1okK1VdUTFzJWdTJWpXT1kjNFBZWjhiWl0jNFBdXjhiXnIjNFBycyM0e3N3IzRQd3gjNm94I08jNFAjTyNQIzhjI1AjbyM0UCNvI3AkKV0jcH4jNFBHeiQsYl0kfVElcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFfJH0hXyFgJC1aIWAjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeiQtblohcyxXJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeiQudF0kd1ElcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFfJH0hXyFgJC1aIWAjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeyQvfF8lcWAlcDdbJWpXJWUsWCVzcCV4I3RPWSQwe1laR1FaXSQwe11eR1FeciQwe3JzJDJdc3ckMHt3eCRKZXgjTyQweyNPI1AkRncjUCNvJDB7I28jcCRJYyNwI3EkMHsjcSNyJEddI3J+JDB7R2skMV5fJXA3WyVnUyVqVyVlLFglc3AldiFiJXgjdE9ZJDB7WVpHUVpdJDB7XV5HUV5yJDB7cnMkMl1zdyQwe3d4JEV3eCNPJDB7I08jUCRGdyNQI28kMHsjbyNwJEljI3AjcSQweyNxI3IkR10jcn4kMHtEVCQyaF8lcDdbJWdTJWUsWCV2IWJPWSQzZ1laKHlaXSQzZ11eKHleciQzZ3JzJEJhc3ckM2d3eCQ0c3gjTyQzZyNPI1AkNW8jUCNvJDNnI28jcCQ9eyNwI3EkM2cjcSNyJDZUI3J+JDNnRFQkM3RfJXA3WyVnUyVqVyVlLFgldiFiT1kkM2dZWih5Wl0kM2ddXih5XnIkM2dycyQyXXN3JDNnd3gkNHN4I08kM2cjTyNQJDVvI1AjbyQzZyNvI3AkPXsjcCNxJDNnI3EjciQ2VCNyfiQzZ0RUJDR8WiVwN1slalclZSxYT3IoeXJzKXdzdyh5d3g7YngjTyh5I08jUDJWI1Ajbyh5I28jcDduI3AjcSh5I3EjcjJrI3J+KHlEVCQ1dFQlcDdbTyNvJDNnI28jcCQ2VCNwI3EkM2cjcSNyJDZUI3J+JDNnLXckNmBdJWdTJWpXJWUsWCV2IWJPWSQ2VFlaMmtaXSQ2VF1eMmteciQ2VHJzJDdYc3ckNlR3eCQ9UngjTyQ2VCNPI1AkPXUjUCNvJDZUI28jcCQ9eyNwfiQ2VC13JDdiXSVnUyVlLFgldiFiT1kkNlRZWjJrWl0kNlRdXjJrXnIkNlRycyQ4WnN3JDZUd3gkPVJ4I08kNlQjTyNQJD11I1AjbyQ2VCNvI3AkPXsjcH4kNlQtdyQ4ZF0lZ1MlZSxYJXYhYk9ZJDZUWVoya1pdJDZUXV4ya15yJDZUcnMkOV1zdyQ2VHd4JD1SeCNPJDZUI08jUCQ9dSNQI28kNlQjbyNwJD17I3B+JDZULW8kOWZaJWdTJWUsWCV2IWJPWSQ5XVlaLmtaXSQ5XV1eLmtedyQ5XXd4JDpYeCNPJDldI08jUCQ6cyNQI28kOV0jbyNwJDp5I3B+JDldLW8kOl5WJWUsWE93Lmt3eC9xeCNPLmsjTyNQMFcjUCNvLmsjbyNwMF4jcH4uay1vJDp2UE9+JDldLW8kO1FaJWdTJWUsWE9ZJDtzWVoweFpdJDtzXV4weF53JDtzd3gkPGd4I08kO3MjTyNQJDx7I1AjbyQ7cyNvI3AkOV0jcH4kO3MsXSQ7elglZ1MlZSxYT1kkO3NZWjB4Wl0kO3NdXjB4XnckO3N3eCQ8Z3gjTyQ7cyNPI1AkPHsjUH4kO3MsXSQ8bFQlZSxYT3cweHd4MXB4I08weCNPI1AyUCNQfjB4LF0kPU9QT34kO3MtdyQ9WVglalclZSxYT3Iya3JzM2FzdzJrd3g1aXgjTzJrI08jUDdoI1AjbzJrI28jcDduI3B+MmstdyQ9eFBPfiQ2VC13JD5VXSVnUyVqVyVlLFhPWSQ+fVlaOGJaXSQ+fV1eOGJeciQ+fXJzJD95c3ckPn13eCRBbXgjTyQ+fSNPI1AkQlojUCNvJD59I28jcCQ2VCNwfiQ+fSxlJD9XWiVnUyVqVyVlLFhPWSQ+fVlaOGJaXSQ+fV1eOGJeciQ+fXJzJD95c3ckPn13eCRBbXgjTyQ+fSNPI1AkQlojUH4kPn0sZSRAUVolZ1MlZSxYT1kkPn1ZWjhiWl0kPn1dXjhiXnIkPn1ycyRAc3N3JD59d3gkQW14I08kPn0jTyNQJEJaI1B+JD59LGUkQHpaJWdTJWUsWE9ZJD59WVo4YlpdJD59XV44Yl5yJD59cnMkO3NzdyQ+fXd4JEFteCNPJD59I08jUCRCWiNQfiQ+fSxlJEF0ViVqVyVlLFhPcjhicnM5T3N3OGJ3eDpweCNPOGIjTyNQO1sjUH44YixlJEJeUE9+JD59RFQkQmxfJXA3WyVnUyVlLFgldiFiT1kkM2dZWih5Wl0kM2ddXih5XnIkM2dycyRDa3N3JDNnd3gkNHN4I08kM2cjTyNQJDVvI1AjbyQzZyNvI3AkPXsjcCNxJDNnI3EjciQ2VCNyfiQzZ0N7JEN2XSVwN1slZ1MlZSxYJXYhYk9ZJENrWVorb1pdJENrXV4rb153JENrd3gkRG94I08kQ2sjTyNQJEVjI1AjbyRDayNvI3AkOnkjcCNxJENrI3EjciQ5XSNyfiRDa0N7JER2WCVwN1slZSxYT3crb3d4LVZ4I08rbyNPI1AuViNQI28rbyNvI3AwXiNwI3ErbyNxI3IuayNyfitvQ3skRWhUJXA3W08jbyRDayNvI3AkOV0jcCNxJENrI3EjciQ5XSNyfiRDa0drJEZVWiVwN1slalclZSxYJXNwJXgjdE9yR1Fycyl3c3dHUXd4TV54I09HUSNPI1BIUyNQI29HUSNvI3BMaiNwI3FHUSNxI3JIaCNyfkdRR2skRnxUJXA3W08jbyQweyNvI3AkR10jcCNxJDB7I3EjciRHXSNyfiQwezFfJEdsXSVnUyVqVyVlLFglc3AldiFiJXgjdE9ZJEddWVpIaFpdJEddXV5IaF5yJEddcnMkN1hzdyRHXXd4JEhleCNPJEddI08jUCRJXSNQI28kR10jbyNwJEljI3B+JEddMV8kSHBYJWpXJWUsWCVzcCV4I3RPckhocnMzYXN3SGh3eEpXeCNPSGgjTyNQTGQjUCNvSGgjbyNwTGojcH5IaDFfJElgUE9+JEddMV8kSWxdJWdTJWpXJWUsWE9ZJD59WVo4YlpdJD59XV44Yl5yJD59cnMkP3lzdyQ+fXd4JEFteCNPJD59I08jUCRCWiNQI28kPn0jbyNwJEddI3B+JD59R2skSnJaJXA3WyVqVyVlLFglc3AleCN0T3JHUXJzKXdzd0dRd3gkS2V4I09HUSNPI1BIUyNQI29HUSNvI3BMaiNwI3FHUSNxI3JIaCNyfkdRR2skS3RaJWghZiVwN1slalclZixYJXNwJXgjdE9yTltycz1Pc3dOW3d4Tlt4I09OWyNPI1AhIFkjUCNvTlsjbyNwS3gjcCNxTlsjcSNySnwjcn5OW0d7JEx6WmYsWCVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4I08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9PHUkTlFaIU9SJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeyUgV19ULFglcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeHokfXp7JSFWeyFfJH0hXyFgJC1aIWAjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeyUhal1fUiVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IV8kfSFfIWAkLVohYCNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd7JSN2XSR6LFglcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFfJH0hXyFgJC1aIWAjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH08dSUlU1p3UiVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4I08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9TWclJlleJHssWCVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IV8kfSFfIWAkLVohYCFhJSdVIWEjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1CXiUnaVomUyZqJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeyUob18hZFElcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFPJH0hTyFQJSluIVAhUSR9IVEhWyUsTyFbI08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3slKlBdJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghTyR9IU8hUCUqeCFQI08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3slK11aIW0sWCVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4I08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3klLGNnIWYsViVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IVEkfSFRIVslLE8hWyFnJH0hZyFoJS16IWghbCR9IWwhbSUyWyFtI08kfSNPI1AhIG4jUCNSJH0jUiNTJSxPI1MjWCR9I1gjWSUteiNZI14kfSNeI18lMlsjXyNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3klLl1hJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3h7JH17fCUvYnx9JH19IU8lL2IhTyFRJH0hUSFbJTBsIVsjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSUvc10lcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFRJH0hUSFbJTBsIVsjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSUxUGMhZixWJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghUSR9IVEhWyUwbCFbIWwkfSFsIW0lMlshbSNPJH0jTyNQISBuI1AjUiR9I1IjUyUwbCNTI14kfSNeI18lMlsjXyNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3klMm9aIWYsViVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4I08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3slM3VfJHxSJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghUCR9IVAhUSU0dCFRIV8kfSFfIWAkLVohYCNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd6JTVYXSVPUSVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IV8kfSFfIWAkLVohYCNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd5JTZldSFmLFYlcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFPJH0hTyFQJTh4IVAhUSR9IVEhWyU6UyFbIWQkfSFkIWUlPFUhZSFnJH0hZyFoJS16IWghbCR9IWwhbSUyWyFtIXEkfSFxIXIlP08hciF6JH0heiF7JUFyIXsjTyR9I08jUCEgbiNQI1IkfSNSI1MlOlMjUyNVJH0jVSNWJTxVI1YjWCR9I1gjWSUteiNZI14kfSNeI18lMlsjXyNjJH0jYyNkJT9PI2QjbCR9I2wjbSVBciNtI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSU5Wl0lcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFRJH0hUSFbJSxPIVsjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSU6Z2khZixWJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghTyR9IU8hUCU4eCFQIVEkfSFRIVslOlMhWyFnJH0hZyFoJS16IWghbCR9IWwhbSUyWyFtI08kfSNPI1AhIG4jUCNSJH0jUiNTJTpTI1MjWCR9I1gjWSUteiNZI14kfSNeI18lMlsjXyNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3klPGdgJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghUSR9IVEhUiU9aSFSIVMlPWkhUyNPJH0jTyNQISBuI1AjUiR9I1IjUyU9aSNTI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSU9fGAhZixWJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghUSR9IVEhUiU9aSFSIVMlPWkhUyNPJH0jTyNQISBuI1AjUiR9I1IjUyU9aSNTI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSU/YV8lcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFRJH0hUSFZJUBgIVkjTyR9I08jUCEgbiNQI1IkfSNSI1MlQGAjUyNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3klQHNfIWYsViVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IVEkfSFRIVklQGAhWSNPJH0jTyNQISBuI1AjUiR9I1IjUyVAYCNTI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSVCVGMlcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFRJH0hUSFbJUNgIVshYyR9IWMhaSVDYCFpI08kfSNPI1AhIG4jUCNSJH0jUiNTJUNgI1MjVCR9I1QjWiVDYCNaI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeSVDc2MhZixWJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghUSR9IVEhWyVDYCFbIWMkfSFjIWklQ2AhaSNPJH0jTyNQISBuI1AjUiR9I1IjUyVDYCNTI1QkfSNUI1olQ2AjWiNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9TWclRWNdeDFzJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghXyR9IV8hYCVGWyFgI08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9PHUlRm9aJVdSJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeyVHdVojXixYJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1HeyVIe19qUiVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IV4kfSFeIV8lSXohXyFgISdtIWAhYSEnbSFhI08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3olSl9dJHhRJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghXyR9IV8hYCQtWiFgI08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9R3slS2tdJVYsWCVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IV8kfSFfIWAhJ20hYCNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd7JUx3XmpSJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghXyR9IV8hYCEnbSFgIWElTXMhYSNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd6JU5XXSR5USVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IV8kfSFfIWAkLVohYCNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd7JiBmXV1RI3RQJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3ghXyR9IV8hYCQtWiFgI08kfSNPI1AhIG4jUCNvJH0jbyNwISNVI3AjcSR9I3EjciEhUyNyfiR9TWcmIXRjJXA3WyVnUyVqVyVkJmolbWAlc3AldiFiJXgjdCVRLFhPciR9cnMmUnN3JH13eEZTeCFRJH0hUSFbJiFfIVshYyR9IWMhfSYhXyF9I08kfSNPI1AhIG4jUCNSJH0jUiNTJiFfI1MjVCR9I1QjbyYhXyNvI3AhI1UjcCNxJH0jcSNyISFTI3IkZyR9JGd+JiFfTWcmJGZnJXA3WyVnUyVqVyVkJmolbWAlc3AldiFiJXgjdCVRLFhPciR9cnMmJX1zdyR9d3gmKVR4IVEkfSFRIVsmIV8hWyFjJH0hYyF0JiFfIXQhdSYsYSF1IX0mIV8hfSNPJH0jTyNQISBuI1AjUiR9I1IjUyYhXyNTI1QkfSNUI2YmIV8jZiNnJixhI2cjbyYhXyNvI3AhI1UjcCNxJH0jcSNyISFTI3IkZyR9JGd+JiFfRGUmJltfJXA3WyVnUyVlLFglbWAldiFiT1khK1hZWidQWl0hK1hdXidQXnIhK1hycyYnWnN3IStYd3ghLWd4I08hK1gjTyNQIT5lI1AjbyErWCNvI3AhQH0jcCNxIStYI3EjciE+eSNyfiErWERlJidoWiVwN1slZ1MlZSxYJW1gJXYhYk9yJ1BycyYoWnN3J1B3eChQeCNPJ1AjTyNQPnYjUCNvJ1AjbyNwQ1UjcCNxJ1AjcSNyP1sjcn4nUERdJihoWCVwN1slZ1MlaSxYJW1gJXYhYk93RHZ3eCxleCNPRHYjTyNQRW4jUCNvRHYjbyNwQmQjcCNxRHYjcSNyQW4jcn5EdkdrJiliXyVwN1slalclZSxYJXNwJXgjdE9ZJDB7WVpHUVpdJDB7XV5HUV5yJDB7cnMkMl1zdyQwe3d4JipheCNPJDB7I08jUCRGdyNQI28kMHsjbyNwJEljI3AjcSQweyNxI3IkR10jcn4kMHtHayYqblolcDdbJWpXJWUsWCVzcCV4I3RPckdRcnMpd3N3R1F3eCYrYXgjT0dRI08jUEhTI1Ajb0dRI28jcExqI3AjcUdRI3EjckhoI3J+R1FGVCYrblolcDdbJWpXJWYsWCVzcCV4I3RPck5bcnM9T3N3Tlt3eE5beCNPTlsjTyNQISBZI1Ajb05bI28jcEt4I3AjcU5bI3Ejckp8I3J+TltNZyYsdmMlcDdbJWdTJWpXJWQmaiVtYCVzcCV2IWIleCN0JVEsWE9yJH1ycyYlfXN3JH13eCYpVHghUSR9IVEhWyYhXyFbIWMkfSFjIX0mIV8hfSNPJH0jTyNQISBuI1AjUiR9I1IjUyYhXyNTI1QkfSNUI28mIV8jbyNwISNVI3AjcSR9I3EjciEhUyNyJGckfSRnfiYhX01nJi5oZyVwN1slZ1MlalclZCZqJW1gJXNwJXYhYiV4I3QlUSxYT3IkfXJzJjBQc3ckfXd4JjJ3eCFRJH0hUSFbJiFfIVshYyR9IWMhdCYhXyF0IXUmNXUhdSF9JiFfIX0jTyR9I08jUCEgbiNQI1IkfSNSI1MmIV8jUyNUJH0jVCNmJiFfI2YjZyY1dSNnI28mIV8jbyNwISNVI3AjcSR9I3EjciEhUyNyJGckfSRnfiYhX0RlJjBeWiVwN1slZ1MlbWAldiFiJXIsWE9yJ1BycyYxUHN3J1B3eChQeCNPJ1AjTyNQPnYjUCNvJ1AjbyNwQ1UjcCNxJ1AjcSNyP1sjcn4nUERlJjFbWiVwN1slZ1MlbWAldiFiT3InUHJzJjF9c3cnUHd4KFB4I08nUCNPI1A+diNQI28nUCNvI3BDVSNwI3EnUCNxI3I/WyNyfidQRF0mMltYJXA3WyVnUyV3LFglbWAldiFiT3dEdnd4LGV4I09EdiNPI1BFbiNQI29EdiNvI3BCZCNwI3FEdiNxI3JBbiNyfkR2R2smM1VaJXA3WyVqVyVzcCV4I3QlbCxYT3JHUXJzKXdzd0dRd3gmM3d4I09HUSNPI1BIUyNQI29HUSNvI3BMaiNwI3FHUSNxI3JIaCNyfkdRR2smNFNaJXA3WyVqVyVzcCV4I3RPckdRcnMpd3N3R1F3eCY0dXgjT0dRI08jUEhTI1Ajb0dRI28jcExqI3AjcUdRI3EjckhoI3J+R1FGVCY1U1olcDdbJWpXJXUsWCVzcCV4I3RPck5bcnM9T3N3Tlt3eE5beCNPTlsjTyNQISBZI1Ajb05bI28jcEt4I3AjcU5bI3Ejckp8I3J+TltNZyY2W2MlcDdbJWdTJWpXJWQmaiVtYCVzcCV2IWIleCN0JVEsWE9yJH1ycyYwUHN3JH13eCYyd3ghUSR9IVEhWyYhXyFbIWMkfSFjIX0mIV8hfSNPJH0jTyNQISBuI1AjUiR9I1IjUyYhXyNTI1QkfSNUI28mIV8jbyNwISNVI3AjcSR9I3EjciEhUyNyJGckfSRnfiYhX01nJjd8ayVwN1slZ1MlalclZCZqJW1gJXNwJXYhYiV4I3QlUSxYT3IkfXJzJiV9c3ckfXd4JilUeCFRJH0hUSFbJiFfIVshYyR9IWMhaCYhXyFoIWkmNXUhaSF0JiFfIXQhdSYsYSF1IX0mIV8hfSNPJH0jTyNQISBuI1AjUiR9I1IjUyYhXyNTI1QkfSNUI1UmIV8jVSNWJixhI1YjWSYhXyNZI1omNXUjWiNvJiFfI28jcCEjVSNwI3EkfSNxI3IhIVMjciRnJH0kZ34mIV9HeyY6VVohVixYJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH08dSY7W1ohV1IlcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd6JjxiXSR2USVwN1slZ1MlalclbWAlc3AldiFiJXgjdE9yJH1ycyZSc3ckfXd4RlN4IV8kfSFfIWAkLVohYCNPJH0jTyNQISBuI1AjbyR9I28jcCEjVSNwI3EkfSNxI3IhIVMjcn4kfUd5Jj1kWCVnUyVqVyFaR21PcjhicnM5T3N3OGJ3eDpVeCNPOGIjTyNQO1sjUCNvOGIjbyNwISFTI3B+OGJHeiY+ZF0kdVElcDdbJWdTJWpXJW1gJXNwJXYhYiV4I3RPciR9cnMmUnN3JH13eEZTeCFfJH0hXyFgJC1aIWAjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH08dSY/blghWzdfJWdTJWpXJW1gJXNwJXYhYiV4I3RPciEhU3JzQFNzdyEhU3d4SWJ4I08hIVMjTyNQISNPI1AjbyEhUyNvI3AhI1UjcH4hIVNHeSZAblolUCxWJXA3WyVnUyVqVyVtYCVzcCV2IWIleCN0T3IkfXJzJlJzdyR9d3hGU3gjTyR9I08jUCEgbiNQI28kfSNvI3AhI1UjcCNxJH0jcSNyISFTI3J+JH1cIixcbiAgdG9rZW5pemVyczogW2xlZ2FjeVByaW50LCBpbmRlbnRhdGlvbiwgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIG5ld2xpbmVzXSxcbiAgdG9wUnVsZXM6IHtcIlNjcmlwdFwiOlswLDNdfSxcbiAgc3BlY2lhbGl6ZWQ6IFt7dGVybTogMTg2LCBnZXQ6IHZhbHVlID0+IHNwZWNfaWRlbnRpZmllclt2YWx1ZV0gfHwgLTF9XSxcbiAgdG9rZW5QcmVjOiA2NTk0XG59KTtcblxuZXhwb3J0cy5wYXJzZXIgPSBwYXJzZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vLyBUaGUgZGVmYXVsdCBtYXhpbXVtIGxlbmd0aCBvZiBhIGBUcmVlQnVmZmVyYCBub2RlLlxuY29uc3QgRGVmYXVsdEJ1ZmZlckxlbmd0aCA9IDEwMjQ7XG5sZXQgbmV4dFByb3BJRCA9IDA7XG5jb25zdCBDYWNoZWROb2RlID0gbmV3IFdlYWtNYXAoKTtcbi8vLyBFYWNoIFtub2RlIHR5cGVdKCN0cmVlLk5vZGVUeXBlKSBjYW4gaGF2ZSBtZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGhcbi8vLyBpdCBpbiBwcm9wcy4gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgcmVwcmVzZW50IHByb3AgbmFtZXMuXG5jbGFzcyBOb2RlUHJvcCB7XG4gICAgLy8vIENyZWF0ZSBhIG5ldyBub2RlIHByb3AgdHlwZS4gWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgYVxuICAgIC8vLyBgZGVzZXJpYWxpemVgIGZ1bmN0aW9uLlxuICAgIGNvbnN0cnVjdG9yKHsgZGVzZXJpYWxpemUgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuaWQgPSBuZXh0UHJvcElEKys7XG4gICAgICAgIHRoaXMuZGVzZXJpYWxpemUgPSBkZXNlcmlhbGl6ZSB8fCAoKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBub2RlIHR5cGUgZG9lc24ndCBkZWZpbmUgYSBkZXNlcmlhbGl6ZSBmdW5jdGlvblwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vLyBDcmVhdGUgYSBzdHJpbmctdmFsdWVkIG5vZGUgcHJvcCB3aG9zZSBkZXNlcmlhbGl6ZSBmdW5jdGlvbiBpc1xuICAgIC8vLyB0aGUgaWRlbnRpdHkgZnVuY3Rpb24uXG4gICAgc3RhdGljIHN0cmluZygpIHsgcmV0dXJuIG5ldyBOb2RlUHJvcCh7IGRlc2VyaWFsaXplOiBzdHIgPT4gc3RyIH0pOyB9XG4gICAgLy8vIENyZWF0ZSBhIG51bWJlci12YWx1ZWQgbm9kZSBwcm9wIHdob3NlIGRlc2VyaWFsaXplIGZ1bmN0aW9uIGlzXG4gICAgLy8vIGp1c3QgYE51bWJlcmAuXG4gICAgc3RhdGljIG51bWJlcigpIHsgcmV0dXJuIG5ldyBOb2RlUHJvcCh7IGRlc2VyaWFsaXplOiBOdW1iZXIgfSk7IH1cbiAgICAvLy8gQ3JlYXRlcyBhIGJvb2xlYW4tdmFsdWVkIG5vZGUgcHJvcCB3aG9zZSBkZXNlcmlhbGl6ZSBmdW5jdGlvblxuICAgIC8vLyByZXR1cm5zIHRydWUgZm9yIGFueSBpbnB1dC5cbiAgICBzdGF0aWMgZmxhZygpIHsgcmV0dXJuIG5ldyBOb2RlUHJvcCh7IGRlc2VyaWFsaXplOiAoKSA9PiB0cnVlIH0pOyB9XG4gICAgLy8vIFN0b3JlIGEgdmFsdWUgZm9yIHRoaXMgcHJvcCBpbiB0aGUgZ2l2ZW4gb2JqZWN0LiBUaGlzIGNhbiBiZVxuICAgIC8vLyB1c2VmdWwgd2hlbiBidWlsZGluZyB1cCBhIHByb3Agb2JqZWN0IHRvIHBhc3MgdG8gdGhlXG4gICAgLy8vIFtgTm9kZVR5cGVgXSgjdHJlZS5Ob2RlVHlwZSkgY29uc3RydWN0b3IuIFJldHVybnMgaXRzIGZpcnN0XG4gICAgLy8vIGFyZ3VtZW50LlxuICAgIHNldChwcm9wT2JqLCB2YWx1ZSkge1xuICAgICAgICBwcm9wT2JqW3RoaXMuaWRdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBwcm9wT2JqO1xuICAgIH1cbiAgICAvLy8gVGhpcyBpcyBtZWFudCB0byBiZSB1c2VkIHdpdGhcbiAgICAvLy8gW2BOb2RlU2V0LmV4dGVuZGBdKCN0cmVlLk5vZGVTZXQuZXh0ZW5kKSBvclxuICAgIC8vLyBbYFBhcnNlci53aXRoUHJvcHNgXSgjbGV6ZXIuUGFyc2VyLndpdGhQcm9wcykgdG8gY29tcHV0ZSBwcm9wXG4gICAgLy8vIHZhbHVlcyBmb3IgZWFjaCBub2RlIHR5cGUgaW4gdGhlIHNldC4gVGFrZXMgYSBbbWF0Y2hcbiAgICAvLy8gb2JqZWN0XSgjdHJlZS5Ob2RlVHlwZV5tYXRjaCkgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHVuZGVmaW5lZFxuICAgIC8vLyBpZiB0aGUgbm9kZSB0eXBlIGRvZXNuJ3QgZ2V0IHRoaXMgcHJvcCwgYW5kIHRoZSBwcm9wJ3MgdmFsdWUgaWZcbiAgICAvLy8gaXQgZG9lcy5cbiAgICBhZGQobWF0Y2gpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtYXRjaCAhPSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICBtYXRjaCA9IE5vZGVUeXBlLm1hdGNoKG1hdGNoKTtcbiAgICAgICAgcmV0dXJuICh0eXBlKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gbWF0Y2godHlwZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBudWxsIDogW3RoaXMsIHJlc3VsdF07XG4gICAgICAgIH07XG4gICAgfVxufVxuLy8vIFByb3AgdGhhdCBpcyB1c2VkIHRvIGRlc2NyaWJlIG1hdGNoaW5nIGRlbGltaXRlcnMuIEZvciBvcGVuaW5nXG4vLy8gZGVsaW1pdGVycywgdGhpcyBob2xkcyBhbiBhcnJheSBvZiBub2RlIG5hbWVzICh3cml0dGVuIGFzIGFcbi8vLyBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5nIHdoZW4gZGVjbGFyaW5nIHRoaXMgcHJvcCBpbiBhIGdyYW1tYXIpXG4vLy8gZm9yIHRoZSBub2RlIHR5cGVzIG9mIGNsb3NpbmcgZGVsaW1pdGVycyB0aGF0IG1hdGNoIGl0LlxuTm9kZVByb3AuY2xvc2VkQnkgPSBuZXcgTm9kZVByb3AoeyBkZXNlcmlhbGl6ZTogc3RyID0+IHN0ci5zcGxpdChcIiBcIikgfSk7XG4vLy8gVGhlIGludmVyc2Ugb2YgW2BvcGVuZWRCeWBdKCN0cmVlLk5vZGVQcm9wXmNsb3NlZEJ5KS4gVGhpcyBpc1xuLy8vIGF0dGFjaGVkIHRvIGNsb3NpbmcgZGVsaW1pdGVycywgaG9sZGluZyBhbiBhcnJheSBvZiBub2RlIG5hbWVzXG4vLy8gb2YgdHlwZXMgb2YgbWF0Y2hpbmcgb3BlbmluZyBkZWxpbWl0ZXJzLlxuTm9kZVByb3Aub3BlbmVkQnkgPSBuZXcgTm9kZVByb3AoeyBkZXNlcmlhbGl6ZTogc3RyID0+IHN0ci5zcGxpdChcIiBcIikgfSk7XG4vLy8gVXNlZCB0byBhc3NpZ24gbm9kZSB0eXBlcyB0byBncm91cHMgKGZvciBleGFtcGxlLCBhbGwgbm9kZVxuLy8vIHR5cGVzIHRoYXQgcmVwcmVzZW50IGFuIGV4cHJlc3Npb24gY291bGQgYmUgdGFnZ2VkIHdpdGggYW5cbi8vLyBgXCJFeHByZXNzaW9uXCJgIGdyb3VwKS5cbk5vZGVQcm9wLmdyb3VwID0gbmV3IE5vZGVQcm9wKHsgZGVzZXJpYWxpemU6IHN0ciA9PiBzdHIuc3BsaXQoXCIgXCIpIH0pO1xuY29uc3Qgbm9Qcm9wcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vLy8gRWFjaCBub2RlIGluIGEgc3ludGF4IHRyZWUgaGFzIGEgbm9kZSB0eXBlIGFzc29jaWF0ZWQgd2l0aCBpdC5cbmNsYXNzIE5vZGVUeXBlIHtcbiAgICAvLy8gQGludGVybmFsXG4gICAgY29uc3RydWN0b3IoXG4gICAgLy8vIFRoZSBuYW1lIG9mIHRoZSBub2RlIHR5cGUuIE5vdCBuZWNlc3NhcmlseSB1bmlxdWUsIGJ1dCBpZiB0aGVcbiAgICAvLy8gZ3JhbW1hciB3YXMgd3JpdHRlbiBwcm9wZXJseSwgZGlmZmVyZW50IG5vZGUgdHlwZXMgd2l0aCB0aGVcbiAgICAvLy8gc2FtZSBuYW1lIHdpdGhpbiBhIG5vZGUgc2V0IHNob3VsZCBwbGF5IHRoZSBzYW1lIHNlbWFudGljXG4gICAgLy8vIHJvbGUuXG4gICAgbmFtZSwgXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHByb3BzLCBcbiAgICAvLy8gVGhlIGlkIG9mIHRoaXMgbm9kZSBpbiBpdHMgc2V0LiBDb3JyZXNwb25kcyB0byB0aGUgdGVybSBpZHNcbiAgICAvLy8gdXNlZCBpbiB0aGUgcGFyc2VyLlxuICAgIGlkLCBcbiAgICAvLy8gQGludGVybmFsXG4gICAgZmxhZ3MgPSAwKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmZsYWdzID0gZmxhZ3M7XG4gICAgfVxuICAgIHN0YXRpYyBkZWZpbmUoc3BlYykge1xuICAgICAgICBsZXQgcHJvcHMgPSBzcGVjLnByb3BzICYmIHNwZWMucHJvcHMubGVuZ3RoID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IG5vUHJvcHM7XG4gICAgICAgIGxldCBmbGFncyA9IChzcGVjLnRvcCA/IDEgLyogVG9wICovIDogMCkgfCAoc3BlYy5za2lwcGVkID8gMiAvKiBTa2lwcGVkICovIDogMCkgfFxuICAgICAgICAgICAgKHNwZWMuZXJyb3IgPyA0IC8qIEVycm9yICovIDogMCkgfCAoc3BlYy5uYW1lID09IG51bGwgPyA4IC8qIEFub255bW91cyAqLyA6IDApO1xuICAgICAgICBsZXQgdHlwZSA9IG5ldyBOb2RlVHlwZShzcGVjLm5hbWUgfHwgXCJcIiwgcHJvcHMsIHNwZWMuaWQsIGZsYWdzKTtcbiAgICAgICAgaWYgKHNwZWMucHJvcHMpXG4gICAgICAgICAgICBmb3IgKGxldCBzcmMgb2Ygc3BlYy5wcm9wcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzcmMpKVxuICAgICAgICAgICAgICAgICAgICBzcmMgPSBzcmModHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNyYylcbiAgICAgICAgICAgICAgICAgICAgc3JjWzBdLnNldChwcm9wcywgc3JjWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICAgIC8vLyBSZXRyaWV2ZXMgYSBub2RlIHByb3AgZm9yIHRoaXMgdHlwZS4gV2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgaWZcbiAgICAvLy8gdGhlIHByb3AgaXNuJ3QgcHJlc2VudCBvbiB0aGlzIG5vZGUuXG4gICAgcHJvcChwcm9wKSB7IHJldHVybiB0aGlzLnByb3BzW3Byb3AuaWRdOyB9XG4gICAgLy8vIFRydWUgd2hlbiB0aGlzIGlzIHRoZSB0b3Agbm9kZSBvZiBhIGdyYW1tYXIuXG4gICAgZ2V0IGlzVG9wKCkgeyByZXR1cm4gKHRoaXMuZmxhZ3MgJiAxIC8qIFRvcCAqLykgPiAwOyB9XG4gICAgLy8vIFRydWUgd2hlbiB0aGlzIG5vZGUgaXMgcHJvZHVjZWQgYnkgYSBza2lwIHJ1bGUuXG4gICAgZ2V0IGlzU2tpcHBlZCgpIHsgcmV0dXJuICh0aGlzLmZsYWdzICYgMiAvKiBTa2lwcGVkICovKSA+IDA7IH1cbiAgICAvLy8gSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhbiBlcnJvciBub2RlLlxuICAgIGdldCBpc0Vycm9yKCkgeyByZXR1cm4gKHRoaXMuZmxhZ3MgJiA0IC8qIEVycm9yICovKSA+IDA7IH1cbiAgICAvLy8gV2hlbiB0cnVlLCB0aGlzIG5vZGUgdHlwZSBkb2Vzbid0IGNvcnJlc3BvbmQgdG8gYSB1c2VyLWRlY2xhcmVkXG4gICAgLy8vIG5hbWVkIG5vZGUsIGZvciBleGFtcGxlIGJlY2F1c2UgaXQgaXMgdXNlZCB0byBjYWNoZSByZXBldGl0aW9uLlxuICAgIGdldCBpc0Fub255bW91cygpIHsgcmV0dXJuICh0aGlzLmZsYWdzICYgOCAvKiBBbm9ueW1vdXMgKi8pID4gMDsgfVxuICAgIC8vLyBSZXR1cm5zIHRydWUgd2hlbiB0aGlzIG5vZGUncyBuYW1lIG9yIG9uZSBvZiBpdHNcbiAgICAvLy8gW2dyb3Vwc10oI3RyZWUuTm9kZVByb3BeZ3JvdXApIG1hdGNoZXMgdGhlIGdpdmVuIHN0cmluZy5cbiAgICBpcyhuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHRoaXMubmFtZSA9PSBuYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5wcm9wKE5vZGVQcm9wLmdyb3VwKTtcbiAgICAgICAgICAgIHJldHVybiBncm91cCA/IGdyb3VwLmluZGV4T2YobmFtZSkgPiAtMSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmlkID09IG5hbWU7XG4gICAgfVxuICAgIC8vLyBDcmVhdGUgYSBmdW5jdGlvbiBmcm9tIG5vZGUgdHlwZXMgdG8gYXJiaXRyYXJ5IHZhbHVlcyBieVxuICAgIC8vLyBzcGVjaWZ5aW5nIGFuIG9iamVjdCB3aG9zZSBwcm9wZXJ0eSBuYW1lcyBhcmUgbm9kZSBvclxuICAgIC8vLyBbZ3JvdXBdKCN0cmVlLk5vZGVQcm9wXmdyb3VwKSBuYW1lcy4gT2Z0ZW4gdXNlZnVsIHdpdGhcbiAgICAvLy8gW2BOb2RlUHJvcC5hZGRgXSgjdHJlZS5Ob2RlUHJvcC5hZGQpLiBZb3UgY2FuIHB1dCBtdWx0aXBsZVxuICAgIC8vLyBuYW1lcywgc2VwYXJhdGVkIGJ5IHNwYWNlcywgaW4gYSBzaW5nbGUgcHJvcGVydHkgbmFtZSB0byBtYXBcbiAgICAvLy8gbXVsdGlwbGUgbm9kZSBuYW1lcyB0byBhIHNpbmdsZSB2YWx1ZS5cbiAgICBzdGF0aWMgbWF0Y2gobWFwKSB7XG4gICAgICAgIGxldCBkaXJlY3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3IgKGxldCBwcm9wIGluIG1hcClcbiAgICAgICAgICAgIGZvciAobGV0IG5hbWUgb2YgcHJvcC5zcGxpdChcIiBcIikpXG4gICAgICAgICAgICAgICAgZGlyZWN0W25hbWVdID0gbWFwW3Byb3BdO1xuICAgICAgICByZXR1cm4gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGdyb3VwcyA9IG5vZGUucHJvcChOb2RlUHJvcC5ncm91cCksIGkgPSAtMTsgaSA8IChncm91cHMgPyBncm91cHMubGVuZ3RoIDogMCk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBmb3VuZCA9IGRpcmVjdFtpIDwgMCA/IG5vZGUubmFtZSA6IGdyb3Vwc1tpXV07XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuLy8vIEFuIGVtcHR5IGR1bW15IG5vZGUgdHlwZSB0byB1c2Ugd2hlbiBubyBhY3R1YWwgdHlwZSBpcyBhdmFpbGFibGUuXG5Ob2RlVHlwZS5ub25lID0gbmV3IE5vZGVUeXBlKFwiXCIsIE9iamVjdC5jcmVhdGUobnVsbCksIDAsIDggLyogQW5vbnltb3VzICovKTtcbi8vLyBBIG5vZGUgc2V0IGhvbGRzIGEgY29sbGVjdGlvbiBvZiBub2RlIHR5cGVzLiBJdCBpcyB1c2VkIHRvXG4vLy8gY29tcGFjdGx5IHJlcHJlc2VudCB0cmVlcyBieSBzdG9yaW5nIHRoZWlyIHR5cGUgaWRzLCByYXRoZXIgdGhhbiBhXG4vLy8gZnVsbCBwb2ludGVyIHRvIHRoZSB0eXBlIG9iamVjdCwgaW4gYSBudW1iZXIgYXJyYXkuIEVhY2ggcGFyc2VyXG4vLy8gW2hhc10oI2xlemVyLlBhcnNlci5ub2RlU2V0KSBhIG5vZGUgc2V0LCBhbmQgW3RyZWVcbi8vLyBidWZmZXJzXSgjdHJlZS5UcmVlQnVmZmVyKSBjYW4gb25seSBzdG9yZSBjb2xsZWN0aW9ucyBvZiBub2Rlc1xuLy8vIGZyb20gdGhlIHNhbWUgc2V0LiBBIHNldCBjYW4gaGF2ZSBhIG1heGltdW0gb2YgMioqMTYgKDY1NTM2KVxuLy8vIG5vZGUgdHlwZXMgaW4gaXQsIHNvIHRoYXQgdGhlIGlkcyBmaXQgaW50byAxNi1iaXQgdHlwZWQgYXJyYXlcbi8vLyBzbG90cy5cbmNsYXNzIE5vZGVTZXQge1xuICAgIC8vLyBDcmVhdGUgYSBzZXQgd2l0aCB0aGUgZ2l2ZW4gdHlwZXMuIFRoZSBgaWRgIHByb3BlcnR5IG9mIGVhY2hcbiAgICAvLy8gdHlwZSBzaG91bGQgY29ycmVzcG9uZCB0byBpdHMgcG9zaXRpb24gd2l0aGluIHRoZSBhcnJheS5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvLy8gVGhlIG5vZGUgdHlwZXMgaW4gdGhpcyBzZXQsIGJ5IGlkLlxuICAgIHR5cGVzKSB7XG4gICAgICAgIHRoaXMudHlwZXMgPSB0eXBlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICh0eXBlc1tpXS5pZCAhPSBpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiTm9kZSB0eXBlIGlkcyBzaG91bGQgY29ycmVzcG9uZCB0byBhcnJheSBwb3NpdGlvbnMgd2hlbiBjcmVhdGluZyBhIG5vZGUgc2V0XCIpO1xuICAgIH1cbiAgICAvLy8gQ3JlYXRlIGEgY29weSBvZiB0aGlzIHNldCB3aXRoIHNvbWUgbm9kZSBwcm9wZXJ0aWVzIGFkZGVkLiBUaGVcbiAgICAvLy8gYXJndW1lbnRzIHRvIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBjcmVhdGVkIHdpdGhcbiAgICAvLy8gW2BOb2RlUHJvcC5hZGRgXSgjdHJlZS5Ob2RlUHJvcC5hZGQpLlxuICAgIGV4dGVuZCguLi5wcm9wcykge1xuICAgICAgICBsZXQgbmV3VHlwZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgdHlwZSBvZiB0aGlzLnR5cGVzKSB7XG4gICAgICAgICAgICBsZXQgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgICAgICAgZm9yIChsZXQgc291cmNlIG9mIHByb3BzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFkZCA9IHNvdXJjZSh0eXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV3UHJvcHMpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHR5cGUucHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICBhZGRbMF0uc2V0KG5ld1Byb3BzLCBhZGRbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1R5cGVzLnB1c2gobmV3UHJvcHMgPyBuZXcgTm9kZVR5cGUodHlwZS5uYW1lLCBuZXdQcm9wcywgdHlwZS5pZCwgdHlwZS5mbGFncykgOiB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE5vZGVTZXQobmV3VHlwZXMpO1xuICAgIH1cbn1cbi8vLyBBIHBpZWNlIG9mIHN5bnRheCB0cmVlLiBUaGVyZSBhcmUgdHdvIHdheXMgdG8gYXBwcm9hY2ggdGhlc2Vcbi8vLyB0cmVlczogdGhlIHdheSB0aGV5IGFyZSBhY3R1YWxseSBzdG9yZWQgaW4gbWVtb3J5LCBhbmQgdGhlXG4vLy8gY29udmVuaWVudCB3YXkuXG4vLy9cbi8vLyBTeW50YXggdHJlZXMgYXJlIHN0b3JlZCBhcyBhIHRyZWUgb2YgYFRyZWVgIGFuZCBgVHJlZUJ1ZmZlcmBcbi8vLyBvYmplY3RzLiBCeSBwYWNraW5nIGRldGFpbCBpbmZvcm1hdGlvbiBpbnRvIGBUcmVlQnVmZmVyYCBsZWFmXG4vLy8gbm9kZXMsIHRoZSByZXByZXNlbnRhdGlvbiBpcyBtYWRlIGEgbG90IG1vcmUgbWVtb3J5LWVmZmljaWVudC5cbi8vL1xuLy8vIEhvd2V2ZXIsIHdoZW4geW91IHdhbnQgdG8gYWN0dWFsbHkgd29yayB3aXRoIHRyZWUgbm9kZXMsIHRoaXNcbi8vLyByZXByZXNlbnRhdGlvbiBpcyB2ZXJ5IGF3a3dhcmQsIHNvIG1vc3QgY2xpZW50IGNvZGUgd2lsbCB3YW50IHRvXG4vLy8gdXNlIHRoZSBgVHJlZUN1cnNvcmAgaW50ZXJmYWNlIGluc3RlYWQsIHdoaWNoIHByb3ZpZGVzIGEgdmlldyBvblxuLy8vIHNvbWUgcGFydCBvZiB0aGlzIGRhdGEgc3RydWN0dXJlLCBhbmQgY2FuIGJlIHVzZWQgdG8gbW92ZSBhcm91bmRcbi8vLyB0byBhZGphY2VudCBub2Rlcy5cbmNsYXNzIFRyZWUge1xuICAgIC8vLyBDb25zdHJ1Y3QgYSBuZXcgdHJlZS4gWW91IHVzdWFsbHkgd2FudCB0byBnbyB0aHJvdWdoXG4gICAgLy8vIFtgVHJlZS5idWlsZGBdKCN0cmVlLlRyZWVeYnVpbGQpIGluc3RlYWQuXG4gICAgY29uc3RydWN0b3IodHlwZSwgXG4gICAgLy8vIFRoZSB0cmVlJ3MgY2hpbGQgbm9kZXMuIENoaWxkcmVuIHNtYWxsIGVub3VnaCB0byBmaXQgaW4gYVxuICAgIC8vLyBgVHJlZUJ1ZmZlciB3aWxsIGJlIHJlcHJlc2VudGVkIGFzIHN1Y2gsIG90aGVyIGNoaWxkcmVuIGNhbiBiZVxuICAgIC8vLyBmdXJ0aGVyIGBUcmVlYCBpbnN0YW5jZXMgd2l0aCB0aGVpciBvd24gaW50ZXJuYWwgc3RydWN0dXJlLlxuICAgIGNoaWxkcmVuLCBcbiAgICAvLy8gVGhlIHBvc2l0aW9ucyAob2Zmc2V0cyByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhpcyB0cmVlKSBvZlxuICAgIC8vLyB0aGUgY2hpbGRyZW4uXG4gICAgcG9zaXRpb25zLCBcbiAgICAvLy8gVGhlIHRvdGFsIGxlbmd0aCBvZiB0aGlzIHRyZWVcbiAgICBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICB0aGlzLnBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5tYXAoYyA9PiBjLnRvU3RyaW5nKCkpLmpvaW4oKTtcbiAgICAgICAgcmV0dXJuICF0aGlzLnR5cGUubmFtZSA/IGNoaWxkcmVuIDpcbiAgICAgICAgICAgICgvXFxXLy50ZXN0KHRoaXMudHlwZS5uYW1lKSAmJiAhdGhpcy50eXBlLmlzRXJyb3IgPyBKU09OLnN0cmluZ2lmeSh0aGlzLnR5cGUubmFtZSkgOiB0aGlzLnR5cGUubmFtZSkgK1xuICAgICAgICAgICAgICAgIChjaGlsZHJlbi5sZW5ndGggPyBcIihcIiArIGNoaWxkcmVuICsgXCIpXCIgOiBcIlwiKTtcbiAgICB9XG4gICAgLy8vIEdldCBhIFt0cmVlIGN1cnNvcl0oI3RyZWUuVHJlZUN1cnNvcikgcm9vdGVkIGF0IHRoaXMgdHJlZS4gV2hlblxuICAgIC8vLyBgcG9zYCBpcyBnaXZlbiwgdGhlIGN1cnNvciBpcyBbbW92ZWRdKCN0cmVlLlRyZWVDdXJzb3IubW92ZVRvKVxuICAgIC8vLyB0byB0aGUgZ2l2ZW4gcG9zaXRpb24gYW5kIHNpZGUuXG4gICAgY3Vyc29yKHBvcywgc2lkZSA9IDApIHtcbiAgICAgICAgbGV0IHNjb3BlID0gKHBvcyAhPSBudWxsICYmIENhY2hlZE5vZGUuZ2V0KHRoaXMpKSB8fCB0aGlzLnRvcE5vZGU7XG4gICAgICAgIGxldCBjdXJzb3IgPSBuZXcgVHJlZUN1cnNvcihzY29wZSk7XG4gICAgICAgIGlmIChwb3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgY3Vyc29yLm1vdmVUbyhwb3MsIHNpZGUpO1xuICAgICAgICAgICAgQ2FjaGVkTm9kZS5zZXQodGhpcywgY3Vyc29yLl90cmVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3Vyc29yO1xuICAgIH1cbiAgICAvLy8gR2V0IGEgW3RyZWUgY3Vyc29yXSgjdHJlZS5UcmVlQ3Vyc29yKSB0aGF0LCB1bmxpa2UgcmVndWxhclxuICAgIC8vLyBjdXJzb3JzLCBkb2Vzbid0IHNraXAgW2Fub255bW91c10oI3RyZWUuTm9kZVR5cGUuaXNBbm9ueW1vdXMpXG4gICAgLy8vIG5vZGVzLlxuICAgIGZ1bGxDdXJzb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJlZUN1cnNvcih0aGlzLnRvcE5vZGUsIHRydWUpO1xuICAgIH1cbiAgICAvLy8gR2V0IGEgW3N5bnRheCBub2RlXSgjdHJlZS5TeW50YXhOb2RlKSBvYmplY3QgZm9yIHRoZSB0b3Agb2YgdGhlXG4gICAgLy8vIHRyZWUuXG4gICAgZ2V0IHRvcE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJlZU5vZGUodGhpcywgMCwgMCwgbnVsbCk7XG4gICAgfVxuICAgIC8vLyBHZXQgdGhlIFtzeW50YXggbm9kZV0oI3RyZWUuU3ludGF4Tm9kZSkgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgIC8vLyBJZiBgc2lkZWAgaXMgLTEsIHRoaXMgd2lsbCBtb3ZlIGludG8gbm9kZXMgdGhhdCBlbmQgYXQgdGhlXG4gICAgLy8vIHBvc2l0aW9uLiBJZiAxLCBpdCdsbCBtb3ZlIGludG8gbm9kZXMgdGhhdCBzdGFydCBhdCB0aGVcbiAgICAvLy8gcG9zaXRpb24uIFdpdGggMCwgaXQnbGwgb25seSBlbnRlciBub2RlcyB0aGF0IGNvdmVyIHRoZSBwb3NpdGlvblxuICAgIC8vLyBmcm9tIGJvdGggc2lkZXMuXG4gICAgcmVzb2x2ZShwb3MsIHNpZGUgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnNvcihwb3MsIHNpZGUpLm5vZGU7XG4gICAgfVxuICAgIC8vLyBJdGVyYXRlIG92ZXIgdGhlIHRyZWUgYW5kIGl0cyBjaGlsZHJlbiwgY2FsbGluZyBgZW50ZXJgIGZvciBhbnlcbiAgICAvLy8gbm9kZSB0aGF0IHRvdWNoZXMgdGhlIGBmcm9tYC9gdG9gIHJlZ2lvbiAoaWYgZ2l2ZW4pIGJlZm9yZVxuICAgIC8vLyBydW5uaW5nIG92ZXIgc3VjaCBhIG5vZGUncyBjaGlsZHJlbiwgYW5kIGBsZWF2ZWAgKGlmIGdpdmVuKSB3aGVuXG4gICAgLy8vIGxlYXZpbmcgdGhlIG5vZGUuIFdoZW4gYGVudGVyYCByZXR1cm5zIGBmYWxzZWAsIHRoZSBnaXZlbiBub2RlXG4gICAgLy8vIHdpbGwgbm90IGhhdmUgaXRzIGNoaWxkcmVuIGl0ZXJhdGVkIG92ZXIgKG9yIGBsZWF2ZWAgY2FsbGVkKS5cbiAgICBpdGVyYXRlKHNwZWMpIHtcbiAgICAgICAgbGV0IHsgZW50ZXIsIGxlYXZlLCBmcm9tID0gMCwgdG8gPSB0aGlzLmxlbmd0aCB9ID0gc3BlYztcbiAgICAgICAgZm9yIChsZXQgYyA9IHRoaXMuY3Vyc29yKCk7Oykge1xuICAgICAgICAgICAgbGV0IG11c3RMZWF2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGMuZnJvbSA8PSB0byAmJiBjLnRvID49IGZyb20gJiYgKGMudHlwZS5pc0Fub255bW91cyB8fCBlbnRlcihjLnR5cGUsIGMuZnJvbSwgYy50bykgIT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGlmIChjLmZpcnN0Q2hpbGQoKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKCFjLnR5cGUuaXNBbm9ueW1vdXMpXG4gICAgICAgICAgICAgICAgICAgIG11c3RMZWF2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgaWYgKG11c3RMZWF2ZSAmJiBsZWF2ZSlcbiAgICAgICAgICAgICAgICAgICAgbGVhdmUoYy50eXBlLCBjLmZyb20sIGMudG8pO1xuICAgICAgICAgICAgICAgIG11c3RMZWF2ZSA9IGMudHlwZS5pc0Fub255bW91cztcbiAgICAgICAgICAgICAgICBpZiAoYy5uZXh0U2libGluZygpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoIWMucGFyZW50KCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBtdXN0TGVhdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vLyBCYWxhbmNlIHRoZSBkaXJlY3QgY2hpbGRyZW4gb2YgdGhpcyB0cmVlLlxuICAgIGJhbGFuY2UobWF4QnVmZmVyTGVuZ3RoID0gRGVmYXVsdEJ1ZmZlckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPD0gQmFsYW5jZUJyYW5jaEZhY3RvciA/IHRoaXNcbiAgICAgICAgICAgIDogYmFsYW5jZVJhbmdlKHRoaXMudHlwZSwgTm9kZVR5cGUubm9uZSwgdGhpcy5jaGlsZHJlbiwgdGhpcy5wb3NpdGlvbnMsIDAsIHRoaXMuY2hpbGRyZW4ubGVuZ3RoLCAwLCBtYXhCdWZmZXJMZW5ndGgsIHRoaXMubGVuZ3RoLCAwKTtcbiAgICB9XG4gICAgLy8vIEJ1aWxkIGEgdHJlZSBmcm9tIGEgcG9zdGZpeC1vcmRlcmVkIGJ1ZmZlciBvZiBub2RlIGluZm9ybWF0aW9uLFxuICAgIC8vLyBvciBhIGN1cnNvciBvdmVyIHN1Y2ggYSBidWZmZXIuXG4gICAgc3RhdGljIGJ1aWxkKGRhdGEpIHsgcmV0dXJuIGJ1aWxkVHJlZShkYXRhKTsgfVxufVxuLy8vIFRoZSBlbXB0eSB0cmVlXG5UcmVlLmVtcHR5ID0gbmV3IFRyZWUoTm9kZVR5cGUubm9uZSwgW10sIFtdLCAwKTtcbi8vIEZvciB0cmVlcyB0aGF0IG5lZWQgYSBjb250ZXh0IGhhc2ggYXR0YWNoZWQsIHdlJ3JlIHVzaW5nIHRoaXNcbi8vIGtsdWRnZSB3aGljaCBhc3NpZ25zIGFuIGV4dHJhIHByb3BlcnR5IGRpcmVjdGx5IGFmdGVyXG4vLyBpbml0aWFsaXphdGlvbiAoY3JlYXRpbmcgYSBzaW5nbGUgbmV3IG9iamVjdCBzaGFwZSkuXG5mdW5jdGlvbiB3aXRoSGFzaCh0cmVlLCBoYXNoKSB7XG4gICAgaWYgKGhhc2gpXG4gICAgICAgIHRyZWUuY29udGV4dEhhc2ggPSBoYXNoO1xuICAgIHJldHVybiB0cmVlO1xufVxuLy8vIFRyZWUgYnVmZmVycyBjb250YWluICh0eXBlLCBzdGFydCwgZW5kLCBlbmRJbmRleCkgcXVhZHMgZm9yIGVhY2hcbi8vLyBub2RlLiBJbiBzdWNoIGEgYnVmZmVyLCBub2RlcyBhcmUgc3RvcmVkIGluIHByZWZpeCBvcmRlciAocGFyZW50c1xuLy8vIGJlZm9yZSBjaGlsZHJlbiwgd2l0aCB0aGUgZW5kSW5kZXggb2YgdGhlIHBhcmVudCBpbmRpY2F0aW5nIHdoaWNoXG4vLy8gY2hpbGRyZW4gYmVsb25nIHRvIGl0KVxuY2xhc3MgVHJlZUJ1ZmZlciB7XG4gICAgLy8vIENyZWF0ZSBhIHRyZWUgYnVmZmVyIEBpbnRlcm5hbFxuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBidWZmZXIsIFxuICAgIC8vIFRoZSB0b3RhbCBsZW5ndGggb2YgdGhlIGdyb3VwIG9mIG5vZGVzIGluIHRoZSBidWZmZXIuXG4gICAgbGVuZ3RoLCBcbiAgICAvLy8gQGludGVybmFsXG4gICAgc2V0LCB0eXBlID0gTm9kZVR5cGUubm9uZSkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuc2V0ID0gc2V0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICAvLy8gQGludGVybmFsXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aDspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuY2hpbGRTdHJpbmcoaW5kZXgpKTtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5idWZmZXJbaW5kZXggKyAzXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oXCIsXCIpO1xuICAgIH1cbiAgICAvLy8gQGludGVybmFsXG4gICAgY2hpbGRTdHJpbmcoaW5kZXgpIHtcbiAgICAgICAgbGV0IGlkID0gdGhpcy5idWZmZXJbaW5kZXhdLCBlbmRJbmRleCA9IHRoaXMuYnVmZmVyW2luZGV4ICsgM107XG4gICAgICAgIGxldCB0eXBlID0gdGhpcy5zZXQudHlwZXNbaWRdLCByZXN1bHQgPSB0eXBlLm5hbWU7XG4gICAgICAgIGlmICgvXFxXLy50ZXN0KHJlc3VsdCkgJiYgIXR5cGUuaXNFcnJvcilcbiAgICAgICAgICAgIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gICAgICAgIGluZGV4ICs9IDQ7XG4gICAgICAgIGlmIChlbmRJbmRleCA9PSBpbmRleClcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmRJbmRleCkge1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkU3RyaW5nKGluZGV4KSk7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuYnVmZmVyW2luZGV4ICsgM107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIFwiKFwiICsgY2hpbGRyZW4uam9pbihcIixcIikgKyBcIilcIjtcbiAgICB9XG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIGZpbmRDaGlsZChzdGFydEluZGV4LCBlbmRJbmRleCwgZGlyLCBhZnRlcikge1xuICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMsIHBpY2sgPSAtMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgIT0gZW5kSW5kZXg7IGkgPSBidWZmZXJbaSArIDNdKSB7XG4gICAgICAgICAgICBpZiAoYWZ0ZXIgIT0gLTEwMDAwMDAwMCAvKiBOb25lICovKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gYnVmZmVyW2kgKyAxXSwgZW5kID0gYnVmZmVyW2kgKyAyXTtcbiAgICAgICAgICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID4gYWZ0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICBwaWNrID0gaTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA+IGFmdGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPCBhZnRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpY2sgPSBpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID49IGFmdGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGljayA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKGRpciA+IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaWNrO1xuICAgIH1cbn1cbmNsYXNzIFRyZWVOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBmcm9tLCBpbmRleCwgX3BhcmVudCkge1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IF9wYXJlbnQ7XG4gICAgfVxuICAgIGdldCB0eXBlKCkgeyByZXR1cm4gdGhpcy5ub2RlLnR5cGU7IH1cbiAgICBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMubm9kZS50eXBlLm5hbWU7IH1cbiAgICBnZXQgdG8oKSB7IHJldHVybiB0aGlzLmZyb20gKyB0aGlzLm5vZGUubGVuZ3RoOyB9XG4gICAgbmV4dENoaWxkKGksIGRpciwgYWZ0ZXIsIGZ1bGwgPSBmYWxzZSkge1xuICAgICAgICBmb3IgKGxldCBwYXJlbnQgPSB0aGlzOzspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHsgY2hpbGRyZW4sIHBvc2l0aW9ucyB9ID0gcGFyZW50Lm5vZGUsIGUgPSBkaXIgPiAwID8gY2hpbGRyZW4ubGVuZ3RoIDogLTE7IGkgIT0gZTsgaSArPSBkaXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGNoaWxkcmVuW2ldLCBzdGFydCA9IHBvc2l0aW9uc1tpXSArIHBhcmVudC5mcm9tO1xuICAgICAgICAgICAgICAgIGlmIChhZnRlciAhPSAtMTAwMDAwMDAwIC8qIE5vbmUgKi8gJiYgKGRpciA8IDAgPyBzdGFydCA+PSBhZnRlciA6IHN0YXJ0ICsgbmV4dC5sZW5ndGggPD0gYWZ0ZXIpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCBpbnN0YW5jZW9mIFRyZWVCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gbmV4dC5maW5kQ2hpbGQoMCwgbmV4dC5idWZmZXIubGVuZ3RoLCBkaXIsIGFmdGVyID09IC0xMDAwMDAwMDAgLyogTm9uZSAqLyA/IC0xMDAwMDAwMDAgLyogTm9uZSAqLyA6IGFmdGVyIC0gc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyTm9kZShuZXcgQnVmZmVyQ29udGV4dChwYXJlbnQsIG5leHQsIGksIHN0YXJ0KSwgbnVsbCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmdWxsIHx8ICghbmV4dC50eXBlLmlzQW5vbnltb3VzIHx8IGhhc0NoaWxkKG5leHQpKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5uZXIgPSBuZXcgVHJlZU5vZGUobmV4dCwgc3RhcnQsIGksIHBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdWxsIHx8ICFpbm5lci50eXBlLmlzQW5vbnltb3VzID8gaW5uZXIgOiBpbm5lci5uZXh0Q2hpbGQoZGlyIDwgMCA/IG5leHQuY2hpbGRyZW4ubGVuZ3RoIC0gMSA6IDAsIGRpciwgYWZ0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmdWxsIHx8ICFwYXJlbnQudHlwZS5pc0Fub255bW91cylcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGkgPSBwYXJlbnQuaW5kZXggKyBkaXI7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX3BhcmVudDtcbiAgICAgICAgICAgIGlmICghcGFyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBmaXJzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5uZXh0Q2hpbGQoMCwgMSwgLTEwMDAwMDAwMCAvKiBOb25lICovKTsgfVxuICAgIGdldCBsYXN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLm5leHRDaGlsZCh0aGlzLm5vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMSwgLTEsIC0xMDAwMDAwMDAgLyogTm9uZSAqLyk7IH1cbiAgICBjaGlsZEFmdGVyKHBvcykgeyByZXR1cm4gdGhpcy5uZXh0Q2hpbGQoMCwgMSwgcG9zKTsgfVxuICAgIGNoaWxkQmVmb3JlKHBvcykgeyByZXR1cm4gdGhpcy5uZXh0Q2hpbGQodGhpcy5ub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDEsIC0xLCBwb3MpOyB9XG4gICAgbmV4dFNpZ25pZmljYW50UGFyZW50KCkge1xuICAgICAgICBsZXQgdmFsID0gdGhpcztcbiAgICAgICAgd2hpbGUgKHZhbC50eXBlLmlzQW5vbnltb3VzICYmIHZhbC5fcGFyZW50KVxuICAgICAgICAgICAgdmFsID0gdmFsLl9wYXJlbnQ7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgPyB0aGlzLl9wYXJlbnQubmV4dFNpZ25pZmljYW50UGFyZW50KCkgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgbmV4dFNpYmxpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgPyB0aGlzLl9wYXJlbnQubmV4dENoaWxkKHRoaXMuaW5kZXggKyAxLCAxLCAtMSkgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgcHJldlNpYmxpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgPyB0aGlzLl9wYXJlbnQubmV4dENoaWxkKHRoaXMuaW5kZXggLSAxLCAtMSwgLTEpIDogbnVsbDtcbiAgICB9XG4gICAgZ2V0IGN1cnNvcigpIHsgcmV0dXJuIG5ldyBUcmVlQ3Vyc29yKHRoaXMpOyB9XG4gICAgcmVzb2x2ZShwb3MsIHNpZGUgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnNvci5tb3ZlVG8ocG9zLCBzaWRlKS5ub2RlO1xuICAgIH1cbiAgICBnZXRDaGlsZCh0eXBlLCBiZWZvcmUgPSBudWxsLCBhZnRlciA9IG51bGwpIHtcbiAgICAgICAgbGV0IHIgPSBnZXRDaGlsZHJlbih0aGlzLCB0eXBlLCBiZWZvcmUsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuIHIubGVuZ3RoID8gclswXSA6IG51bGw7XG4gICAgfVxuICAgIGdldENoaWxkcmVuKHR5cGUsIGJlZm9yZSA9IG51bGwsIGFmdGVyID0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0Q2hpbGRyZW4odGhpcywgdHlwZSwgYmVmb3JlLCBhZnRlcik7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICB0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMubm9kZS50b1N0cmluZygpOyB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZHJlbihub2RlLCB0eXBlLCBiZWZvcmUsIGFmdGVyKSB7XG4gICAgbGV0IGN1ciA9IG5vZGUuY3Vyc29yLCByZXN1bHQgPSBbXTtcbiAgICBpZiAoIWN1ci5maXJzdENoaWxkKCkpXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKGJlZm9yZSAhPSBudWxsKVxuICAgICAgICB3aGlsZSAoIWN1ci50eXBlLmlzKGJlZm9yZSkpXG4gICAgICAgICAgICBpZiAoIWN1ci5uZXh0U2libGluZygpKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAoYWZ0ZXIgIT0gbnVsbCAmJiBjdXIudHlwZS5pcyhhZnRlcikpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBpZiAoY3VyLnR5cGUuaXModHlwZSkpXG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXIubm9kZSk7XG4gICAgICAgIGlmICghY3VyLm5leHRTaWJsaW5nKCkpXG4gICAgICAgICAgICByZXR1cm4gYWZ0ZXIgPT0gbnVsbCA/IHJlc3VsdCA6IFtdO1xuICAgIH1cbn1cbmNsYXNzIEJ1ZmZlckNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgYnVmZmVyLCBpbmRleCwgc3RhcnQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB9XG59XG5jbGFzcyBCdWZmZXJOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBfcGFyZW50LCBpbmRleCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcGFyZW50O1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMudHlwZSA9IGNvbnRleHQuYnVmZmVyLnNldC50eXBlc1tjb250ZXh0LmJ1ZmZlci5idWZmZXJbaW5kZXhdXTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7IHJldHVybiB0aGlzLnR5cGUubmFtZTsgfVxuICAgIGdldCBmcm9tKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LnN0YXJ0ICsgdGhpcy5jb250ZXh0LmJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDFdOyB9XG4gICAgZ2V0IHRvKCkgeyByZXR1cm4gdGhpcy5jb250ZXh0LnN0YXJ0ICsgdGhpcy5jb250ZXh0LmJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDJdOyB9XG4gICAgY2hpbGQoZGlyLCBhZnRlcikge1xuICAgICAgICBsZXQgeyBidWZmZXIgfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgbGV0IGluZGV4ID0gYnVmZmVyLmZpbmRDaGlsZCh0aGlzLmluZGV4ICsgNCwgYnVmZmVyLmJ1ZmZlclt0aGlzLmluZGV4ICsgM10sIGRpciwgYWZ0ZXIgPT0gLTEwMDAwMDAwMCAvKiBOb25lICovID8gLTEwMDAwMDAwMCAvKiBOb25lICovIDogYWZ0ZXIgLSB0aGlzLmNvbnRleHQuc3RhcnQpO1xuICAgICAgICByZXR1cm4gaW5kZXggPCAwID8gbnVsbCA6IG5ldyBCdWZmZXJOb2RlKHRoaXMuY29udGV4dCwgdGhpcywgaW5kZXgpO1xuICAgIH1cbiAgICBnZXQgZmlyc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMuY2hpbGQoMSwgLTEwMDAwMDAwMCAvKiBOb25lICovKTsgfVxuICAgIGdldCBsYXN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLmNoaWxkKC0xLCAtMTAwMDAwMDAwIC8qIE5vbmUgKi8pOyB9XG4gICAgY2hpbGRBZnRlcihwb3MpIHsgcmV0dXJuIHRoaXMuY2hpbGQoMSwgcG9zKTsgfVxuICAgIGNoaWxkQmVmb3JlKHBvcykgeyByZXR1cm4gdGhpcy5jaGlsZCgtMSwgcG9zKTsgfVxuICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgfHwgdGhpcy5jb250ZXh0LnBhcmVudC5uZXh0U2lnbmlmaWNhbnRQYXJlbnQoKTtcbiAgICB9XG4gICAgZXh0ZXJuYWxTaWJsaW5nKGRpcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50ID8gbnVsbCA6IHRoaXMuY29udGV4dC5wYXJlbnQubmV4dENoaWxkKHRoaXMuY29udGV4dC5pbmRleCArIGRpciwgZGlyLCAtMSk7XG4gICAgfVxuICAgIGdldCBuZXh0U2libGluZygpIHtcbiAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGxldCBhZnRlciA9IGJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDNdO1xuICAgICAgICBpZiAoYWZ0ZXIgPCAodGhpcy5fcGFyZW50ID8gYnVmZmVyLmJ1ZmZlclt0aGlzLl9wYXJlbnQuaW5kZXggKyAzXSA6IGJ1ZmZlci5idWZmZXIubGVuZ3RoKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyTm9kZSh0aGlzLmNvbnRleHQsIHRoaXMuX3BhcmVudCwgYWZ0ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlcm5hbFNpYmxpbmcoMSk7XG4gICAgfVxuICAgIGdldCBwcmV2U2libGluZygpIHtcbiAgICAgICAgbGV0IHsgYnVmZmVyIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGxldCBwYXJlbnRTdGFydCA9IHRoaXMuX3BhcmVudCA/IHRoaXMuX3BhcmVudC5pbmRleCArIDQgOiAwO1xuICAgICAgICBpZiAodGhpcy5pbmRleCA9PSBwYXJlbnRTdGFydClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dGVybmFsU2libGluZygtMSk7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyTm9kZSh0aGlzLmNvbnRleHQsIHRoaXMuX3BhcmVudCwgYnVmZmVyLmZpbmRDaGlsZChwYXJlbnRTdGFydCwgdGhpcy5pbmRleCwgLTEsIC0xMDAwMDAwMDAgLyogTm9uZSAqLykpO1xuICAgIH1cbiAgICBnZXQgY3Vyc29yKCkgeyByZXR1cm4gbmV3IFRyZWVDdXJzb3IodGhpcyk7IH1cbiAgICByZXNvbHZlKHBvcywgc2lkZSA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yLm1vdmVUbyhwb3MsIHNpZGUpLm5vZGU7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICB0b1N0cmluZygpIHsgcmV0dXJuIHRoaXMuY29udGV4dC5idWZmZXIuY2hpbGRTdHJpbmcodGhpcy5pbmRleCk7IH1cbiAgICBnZXRDaGlsZCh0eXBlLCBiZWZvcmUgPSBudWxsLCBhZnRlciA9IG51bGwpIHtcbiAgICAgICAgbGV0IHIgPSBnZXRDaGlsZHJlbih0aGlzLCB0eXBlLCBiZWZvcmUsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuIHIubGVuZ3RoID8gclswXSA6IG51bGw7XG4gICAgfVxuICAgIGdldENoaWxkcmVuKHR5cGUsIGJlZm9yZSA9IG51bGwsIGFmdGVyID0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0Q2hpbGRyZW4odGhpcywgdHlwZSwgYmVmb3JlLCBhZnRlcik7XG4gICAgfVxufVxuLy8vIEEgdHJlZSBjdXJzb3Igb2JqZWN0IGZvY3VzZXMgb24gYSBnaXZlbiBub2RlIGluIGEgc3ludGF4IHRyZWUsIGFuZFxuLy8vIGFsbG93cyB5b3UgdG8gbW92ZSB0byBhZGphY2VudCBub2Rlcy5cbmNsYXNzIFRyZWVDdXJzb3Ige1xuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBmdWxsID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5mdWxsID0gZnVsbDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlck5vZGUgPSBudWxsO1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFRyZWVOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnlpZWxkTm9kZShub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3RyZWUgPSBub2RlLmNvbnRleHQucGFyZW50O1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBub2RlLmNvbnRleHQ7XG4gICAgICAgICAgICBmb3IgKGxldCBuID0gbm9kZS5fcGFyZW50OyBuOyBuID0gbi5fcGFyZW50KVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sudW5zaGlmdChuLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB0aGlzLnlpZWxkQnVmKG5vZGUuaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vLyBTaG9ydGhhbmQgZm9yIGAudHlwZS5uYW1lYC5cbiAgICBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMudHlwZS5uYW1lOyB9XG4gICAgeWllbGROb2RlKG5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLl90cmVlID0gbm9kZTtcbiAgICAgICAgdGhpcy50eXBlID0gbm9kZS50eXBlO1xuICAgICAgICB0aGlzLmZyb20gPSBub2RlLmZyb207XG4gICAgICAgIHRoaXMudG8gPSBub2RlLnRvO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgeWllbGRCdWYoaW5kZXgsIHR5cGUpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICBsZXQgeyBzdGFydCwgYnVmZmVyIH0gPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZSB8fCBidWZmZXIuc2V0LnR5cGVzW2J1ZmZlci5idWZmZXJbaW5kZXhdXTtcbiAgICAgICAgdGhpcy5mcm9tID0gc3RhcnQgKyBidWZmZXIuYnVmZmVyW2luZGV4ICsgMV07XG4gICAgICAgIHRoaXMudG8gPSBzdGFydCArIGJ1ZmZlci5idWZmZXJbaW5kZXggKyAyXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHlpZWxkKG5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFRyZWVOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy55aWVsZE5vZGUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXIgPSBub2RlLmNvbnRleHQ7XG4gICAgICAgIHJldHVybiB0aGlzLnlpZWxkQnVmKG5vZGUuaW5kZXgsIG5vZGUudHlwZSk7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyID8gdGhpcy5idWZmZXIuYnVmZmVyLmNoaWxkU3RyaW5nKHRoaXMuaW5kZXgpIDogdGhpcy5fdHJlZS50b1N0cmluZygpO1xuICAgIH1cbiAgICAvLy8gQGludGVybmFsXG4gICAgZW50ZXIoZGlyLCBhZnRlcikge1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGQodGhpcy5fdHJlZS5uZXh0Q2hpbGQoZGlyIDwgMCA/IHRoaXMuX3RyZWUubm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxIDogMCwgZGlyLCBhZnRlciwgdGhpcy5mdWxsKSk7XG4gICAgICAgIGxldCB7IGJ1ZmZlciB9ID0gdGhpcy5idWZmZXI7XG4gICAgICAgIGxldCBpbmRleCA9IGJ1ZmZlci5maW5kQ2hpbGQodGhpcy5pbmRleCArIDQsIGJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDNdLCBkaXIsIGFmdGVyID09IC0xMDAwMDAwMDAgLyogTm9uZSAqLyA/IC0xMDAwMDAwMDAgLyogTm9uZSAqLyA6IGFmdGVyIC0gdGhpcy5idWZmZXIuc3RhcnQpO1xuICAgICAgICBpZiAoaW5kZXggPCAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnN0YWNrLnB1c2godGhpcy5pbmRleCk7XG4gICAgICAgIHJldHVybiB0aGlzLnlpZWxkQnVmKGluZGV4KTtcbiAgICB9XG4gICAgLy8vIE1vdmUgdGhlIGN1cnNvciB0byB0aGlzIG5vZGUncyBmaXJzdCBjaGlsZC4gV2hlbiB0aGlzIHJldHVybnNcbiAgICAvLy8gZmFsc2UsIHRoZSBub2RlIGhhcyBubyBjaGlsZCwgYW5kIHRoZSBjdXJzb3IgaGFzIG5vdCBiZWVuIG1vdmVkLlxuICAgIGZpcnN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLmVudGVyKDEsIC0xMDAwMDAwMDAgLyogTm9uZSAqLyk7IH1cbiAgICAvLy8gTW92ZSB0aGUgY3Vyc29yIHRvIHRoaXMgbm9kZSdzIGxhc3QgY2hpbGQuXG4gICAgbGFzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5lbnRlcigtMSwgLTEwMDAwMDAwMCAvKiBOb25lICovKTsgfVxuICAgIC8vLyBNb3ZlIHRoZSBjdXJzb3IgdG8gdGhlIGZpcnN0IGNoaWxkIHRoYXQgc3RhcnRzIGF0IG9yIGFmdGVyIGBwb3NgLlxuICAgIGNoaWxkQWZ0ZXIocG9zKSB7IHJldHVybiB0aGlzLmVudGVyKDEsIHBvcyk7IH1cbiAgICAvLy8gTW92ZSB0byB0aGUgbGFzdCBjaGlsZCB0aGF0IGVuZHMgYXQgb3IgYmVmb3JlIGBwb3NgLlxuICAgIGNoaWxkQmVmb3JlKHBvcykgeyByZXR1cm4gdGhpcy5lbnRlcigtMSwgcG9zKTsgfVxuICAgIC8vLyBNb3ZlIHRoZSBub2RlJ3MgcGFyZW50IG5vZGUsIGlmIHRoaXMgaXNuJ3QgdGhlIHRvcCBub2RlLlxuICAgIHBhcmVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkTm9kZSh0aGlzLmZ1bGwgPyB0aGlzLl90cmVlLl9wYXJlbnQgOiB0aGlzLl90cmVlLnBhcmVudCk7XG4gICAgICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkQnVmKHRoaXMuc3RhY2sucG9wKCkpO1xuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5mdWxsID8gdGhpcy5idWZmZXIucGFyZW50IDogdGhpcy5idWZmZXIucGFyZW50Lm5leHRTaWduaWZpY2FudFBhcmVudCgpO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLnlpZWxkTm9kZShwYXJlbnQpO1xuICAgIH1cbiAgICAvLy8gQGludGVybmFsXG4gICAgc2libGluZyhkaXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcilcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5fdHJlZS5fcGFyZW50ID8gZmFsc2VcbiAgICAgICAgICAgICAgICA6IHRoaXMueWllbGQodGhpcy5fdHJlZS5fcGFyZW50Lm5leHRDaGlsZCh0aGlzLl90cmVlLmluZGV4ICsgZGlyLCBkaXIsIC0xMDAwMDAwMDAgLyogTm9uZSAqLywgdGhpcy5mdWxsKSk7XG4gICAgICAgIGxldCB7IGJ1ZmZlciB9ID0gdGhpcy5idWZmZXIsIGQgPSB0aGlzLnN0YWNrLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChkaXIgPCAwKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50U3RhcnQgPSBkIDwgMCA/IDAgOiB0aGlzLnN0YWNrW2RdICsgNDtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ICE9IHBhcmVudFN0YXJ0KVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnlpZWxkQnVmKGJ1ZmZlci5maW5kQ2hpbGQocGFyZW50U3RhcnQsIHRoaXMuaW5kZXgsIC0xLCAtMTAwMDAwMDAwIC8qIE5vbmUgKi8pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBhZnRlciA9IGJ1ZmZlci5idWZmZXJbdGhpcy5pbmRleCArIDNdO1xuICAgICAgICAgICAgaWYgKGFmdGVyIDwgKGQgPCAwID8gYnVmZmVyLmJ1ZmZlci5sZW5ndGggOiBidWZmZXIuYnVmZmVyW3RoaXMuc3RhY2tbZF0gKyAzXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWllbGRCdWYoYWZ0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkIDwgMCA/IHRoaXMueWllbGQodGhpcy5idWZmZXIucGFyZW50Lm5leHRDaGlsZCh0aGlzLmJ1ZmZlci5pbmRleCArIGRpciwgZGlyLCAtMTAwMDAwMDAwIC8qIE5vbmUgKi8sIHRoaXMuZnVsbCkpIDogZmFsc2U7XG4gICAgfVxuICAgIC8vLyBNb3ZlIHRvIHRoaXMgbm9kZSdzIG5leHQgc2libGluZywgaWYgYW55LlxuICAgIG5leHRTaWJsaW5nKCkgeyByZXR1cm4gdGhpcy5zaWJsaW5nKDEpOyB9XG4gICAgLy8vIE1vdmUgdG8gdGhpcyBub2RlJ3MgcHJldmlvdXMgc2libGluZywgaWYgYW55LlxuICAgIHByZXZTaWJsaW5nKCkgeyByZXR1cm4gdGhpcy5zaWJsaW5nKC0xKTsgfVxuICAgIGF0TGFzdE5vZGUoZGlyKSB7XG4gICAgICAgIGxldCBpbmRleCwgcGFyZW50LCB7IGJ1ZmZlciB9ID0gdGhpcztcbiAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgaWYgKGRpciA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA8IGJ1ZmZlci5idWZmZXIuYnVmZmVyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmluZGV4OyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIuYnVmZmVyLmJ1ZmZlcltpICsgM10gPCB0aGlzLmluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKHsgaW5kZXgsIHBhcmVudCB9ID0gYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICh7IGluZGV4LCBfcGFyZW50OiBwYXJlbnQgfSA9IHRoaXMuX3RyZWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBwYXJlbnQ7IHsgaW5kZXgsIF9wYXJlbnQ6IHBhcmVudCB9ID0gcGFyZW50KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gaW5kZXggKyBkaXIsIGUgPSBkaXIgPCAwID8gLTEgOiBwYXJlbnQubm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgIT0gZTsgaSArPSBkaXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBwYXJlbnQubm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mdWxsIHx8ICFjaGlsZC50eXBlLmlzQW5vbnltb3VzIHx8IGNoaWxkIGluc3RhbmNlb2YgVHJlZUJ1ZmZlciB8fCBoYXNDaGlsZChjaGlsZCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbW92ZShkaXIpIHtcbiAgICAgICAgaWYgKHRoaXMuZW50ZXIoZGlyLCAtMTAwMDAwMDAwIC8qIE5vbmUgKi8pKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNpYmxpbmcoZGlyKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0TGFzdE5vZGUoZGlyKSB8fCAhdGhpcy5wYXJlbnQoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8vIE1vdmUgdG8gdGhlIG5leHQgbm9kZSBpbiBhXG4gICAgLy8vIFtwcmUtb3JkZXJdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RyZWVfdHJhdmVyc2FsI1ByZS1vcmRlcl8oTkxSKSlcbiAgICAvLy8gdHJhdmVyc2FsLCBnb2luZyBmcm9tIGEgbm9kZSB0byBpdHMgZmlyc3QgY2hpbGQgb3IsIGlmIHRoZVxuICAgIC8vLyBjdXJyZW50IG5vZGUgaXMgZW1wdHksIGl0cyBuZXh0IHNpYmxpbmcgb3IgdGhlIG5leHQgc2libGluZyBvZlxuICAgIC8vLyB0aGUgZmlyc3QgcGFyZW50IG5vZGUgdGhhdCBoYXMgb25lLlxuICAgIG5leHQoKSB7IHJldHVybiB0aGlzLm1vdmUoMSk7IH1cbiAgICAvLy8gTW92ZSB0byB0aGUgbmV4dCBub2RlIGluIGEgbGFzdC10by1maXJzdCBwcmUtb3JkZXIgdHJhdmVyYWwuIEFcbiAgICAvLy8gbm9kZSBpcyBmb2xsb3dlZCBieSBpc3QgbGFzdCBjaGlsZCBvciwgaWYgaXQgaGFzIG5vbmUsIGl0c1xuICAgIC8vLyBwcmV2aW91cyBzaWJsaW5nIG9yIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIHRoZSBmaXJzdCBwYXJlbnRcbiAgICAvLy8gbm9kZSB0aGF0IGhhcyBvbmUuXG4gICAgcHJldigpIHsgcmV0dXJuIHRoaXMubW92ZSgtMSk7IH1cbiAgICAvLy8gTW92ZSB0aGUgY3Vyc29yIHRvIHRoZSBpbm5lcm1vc3Qgbm9kZSB0aGF0IGNvdmVycyBgcG9zYC4gSWZcbiAgICAvLy8gYHNpZGVgIGlzIC0xLCBpdCB3aWxsIGVudGVyIG5vZGVzIHRoYXQgZW5kIGF0IGBwb3NgLiBJZiBpdCBpcyAxLFxuICAgIC8vLyBpdCB3aWxsIGVudGVyIG5vZGVzIHRoYXQgc3RhcnQgYXQgYHBvc2AuXG4gICAgbW92ZVRvKHBvcywgc2lkZSA9IDApIHtcbiAgICAgICAgLy8gTW92ZSB1cCB0byBhIG5vZGUgdGhhdCBhY3R1YWxseSBob2xkcyB0aGUgcG9zaXRpb24sIGlmIHBvc3NpYmxlXG4gICAgICAgIHdoaWxlICh0aGlzLmZyb20gPT0gdGhpcy50byB8fFxuICAgICAgICAgICAgKHNpZGUgPCAxID8gdGhpcy5mcm9tID49IHBvcyA6IHRoaXMuZnJvbSA+IHBvcykgfHxcbiAgICAgICAgICAgIChzaWRlID4gLTEgPyB0aGlzLnRvIDw9IHBvcyA6IHRoaXMudG8gPCBwb3MpKVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCgpKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBUaGVuIHNjYW4gZG93biBpbnRvIGNoaWxkIG5vZGVzIGFzIGZhciBhcyBwb3NzaWJsZVxuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpZiAoc2lkZSA8IDAgPyAhdGhpcy5jaGlsZEJlZm9yZShwb3MpIDogIXRoaXMuY2hpbGRBZnRlcihwb3MpKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgaWYgKHRoaXMuZnJvbSA9PSB0aGlzLnRvIHx8XG4gICAgICAgICAgICAgICAgKHNpZGUgPCAxID8gdGhpcy5mcm9tID49IHBvcyA6IHRoaXMuZnJvbSA+IHBvcykgfHxcbiAgICAgICAgICAgICAgICAoc2lkZSA+IC0xID8gdGhpcy50byA8PSBwb3MgOiB0aGlzLnRvIDwgcG9zKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vLyBHZXQgYSBbc3ludGF4IG5vZGVdKCN0cmVlLlN5bnRheE5vZGUpIGF0IHRoZSBjdXJzb3IncyBjdXJyZW50XG4gICAgLy8vIHBvc2l0aW9uLlxuICAgIGdldCBub2RlKCkge1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyZWU7XG4gICAgICAgIGxldCBjYWNoZSA9IHRoaXMuYnVmZmVyTm9kZSwgcmVzdWx0ID0gbnVsbCwgZGVwdGggPSAwO1xuICAgICAgICBpZiAoY2FjaGUgJiYgY2FjaGUuY29udGV4dCA9PSB0aGlzLmJ1ZmZlcikge1xuICAgICAgICAgICAgc2NhbjogZm9yIChsZXQgaW5kZXggPSB0aGlzLmluZGV4LCBkID0gdGhpcy5zdGFjay5sZW5ndGg7IGQgPj0gMDspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gY2FjaGU7IGM7IGMgPSBjLl9wYXJlbnQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmluZGV4ID09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT0gdGhpcy5pbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGM7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXB0aCA9IGQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgc2NhbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5zdGFja1stLWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBkZXB0aDsgaSA8IHRoaXMuc3RhY2subGVuZ3RoOyBpKyspXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQnVmZmVyTm9kZSh0aGlzLmJ1ZmZlciwgcmVzdWx0LCB0aGlzLnN0YWNrW2ldKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyTm9kZSA9IG5ldyBCdWZmZXJOb2RlKHRoaXMuYnVmZmVyLCByZXN1bHQsIHRoaXMuaW5kZXgpO1xuICAgIH1cbiAgICAvLy8gR2V0IHRoZSBbdHJlZV0oI3RyZWUuVHJlZSkgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IG5vZGUsIGlmXG4gICAgLy8vIGFueS4gV2lsbCByZXR1cm4gbnVsbCB3aGVuIHRoZSBub2RlIGlzIGluIGEgW3RyZWVcbiAgICAvLy8gYnVmZmVyXSgjdHJlZS5UcmVlQnVmZmVyKS5cbiAgICBnZXQgdHJlZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyID8gbnVsbCA6IHRoaXMuX3RyZWUubm9kZTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYXNDaGlsZCh0cmVlKSB7XG4gICAgcmV0dXJuIHRyZWUuY2hpbGRyZW4uc29tZShjaCA9PiAhY2gudHlwZS5pc0Fub255bW91cyB8fCBjaCBpbnN0YW5jZW9mIFRyZWVCdWZmZXIgfHwgaGFzQ2hpbGQoY2gpKTtcbn1cbmNsYXNzIEZsYXRCdWZmZXJDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlciwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgZ2V0IGlkKCkgeyByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5pbmRleCAtIDRdOyB9XG4gICAgZ2V0IHN0YXJ0KCkgeyByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5pbmRleCAtIDNdOyB9XG4gICAgZ2V0IGVuZCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAyXTsgfVxuICAgIGdldCBzaXplKCkgeyByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5pbmRleCAtIDFdOyB9XG4gICAgZ2V0IHBvcygpIHsgcmV0dXJuIHRoaXMuaW5kZXg7IH1cbiAgICBuZXh0KCkgeyB0aGlzLmluZGV4IC09IDQ7IH1cbiAgICBmb3JrKCkgeyByZXR1cm4gbmV3IEZsYXRCdWZmZXJDdXJzb3IodGhpcy5idWZmZXIsIHRoaXMuaW5kZXgpOyB9XG59XG5jb25zdCBCYWxhbmNlQnJhbmNoRmFjdG9yID0gODtcbmZ1bmN0aW9uIGJ1aWxkVHJlZShkYXRhKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCB7IGJ1ZmZlciwgbm9kZVNldCwgdG9wSUQgPSAwLCBtYXhCdWZmZXJMZW5ndGggPSBEZWZhdWx0QnVmZmVyTGVuZ3RoLCByZXVzZWQgPSBbXSwgbWluUmVwZWF0VHlwZSA9IG5vZGVTZXQudHlwZXMubGVuZ3RoIH0gPSBkYXRhO1xuICAgIGxldCBjdXJzb3IgPSBBcnJheS5pc0FycmF5KGJ1ZmZlcikgPyBuZXcgRmxhdEJ1ZmZlckN1cnNvcihidWZmZXIsIGJ1ZmZlci5sZW5ndGgpIDogYnVmZmVyO1xuICAgIGxldCB0eXBlcyA9IG5vZGVTZXQudHlwZXM7XG4gICAgbGV0IGNvbnRleHRIYXNoID0gMDtcbiAgICBmdW5jdGlvbiB0YWtlTm9kZShwYXJlbnRTdGFydCwgbWluUG9zLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBpblJlcGVhdCkge1xuICAgICAgICBsZXQgeyBpZCwgc3RhcnQsIGVuZCwgc2l6ZSB9ID0gY3Vyc29yO1xuICAgICAgICBsZXQgc3RhcnRQb3MgPSBzdGFydCAtIHBhcmVudFN0YXJ0O1xuICAgICAgICBpZiAoc2l6ZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChzaXplID09IC0xKSB7IC8vIFJldXNlZCBub2RlXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChyZXVzZWRbaWRdKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChzdGFydFBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHsgLy8gQ29udGV4dCBjaGFuZ2VcbiAgICAgICAgICAgICAgICBjb250ZXh0SGFzaCA9IGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3Vyc29yLm5leHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdHlwZSA9IHR5cGVzW2lkXSwgbm9kZSwgYnVmZmVyO1xuICAgICAgICBpZiAoZW5kIC0gc3RhcnQgPD0gbWF4QnVmZmVyTGVuZ3RoICYmIChidWZmZXIgPSBmaW5kQnVmZmVyU2l6ZShjdXJzb3IucG9zIC0gbWluUG9zLCBpblJlcGVhdCkpKSB7XG4gICAgICAgICAgICAvLyBTbWFsbCBlbm91Z2ggZm9yIGEgYnVmZmVyLCBhbmQgbm8gcmV1c2VkIG5vZGVzIGluc2lkZVxuICAgICAgICAgICAgbGV0IGRhdGEgPSBuZXcgVWludDE2QXJyYXkoYnVmZmVyLnNpemUgLSBidWZmZXIuc2tpcCk7XG4gICAgICAgICAgICBsZXQgZW5kUG9zID0gY3Vyc29yLnBvcyAtIGJ1ZmZlci5zaXplLCBpbmRleCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpXG4gICAgICAgICAgICAgICAgaW5kZXggPSBjb3B5VG9CdWZmZXIoYnVmZmVyLnN0YXJ0LCBkYXRhLCBpbmRleCwgaW5SZXBlYXQpO1xuICAgICAgICAgICAgbm9kZSA9IG5ldyBUcmVlQnVmZmVyKGRhdGEsIGVuZCAtIGJ1ZmZlci5zdGFydCwgbm9kZVNldCwgaW5SZXBlYXQgPCAwID8gTm9kZVR5cGUubm9uZSA6IHR5cGVzW2luUmVwZWF0XSk7XG4gICAgICAgICAgICBzdGFydFBvcyA9IGJ1ZmZlci5zdGFydCAtIHBhcmVudFN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBNYWtlIGl0IGEgbm9kZVxuICAgICAgICAgICAgbGV0IGVuZFBvcyA9IGN1cnNvci5wb3MgLSBzaXplO1xuICAgICAgICAgICAgY3Vyc29yLm5leHQoKTtcbiAgICAgICAgICAgIGxldCBsb2NhbENoaWxkcmVuID0gW10sIGxvY2FsUG9zaXRpb25zID0gW107XG4gICAgICAgICAgICBsZXQgbG9jYWxJblJlcGVhdCA9IGlkID49IG1pblJlcGVhdFR5cGUgPyBpZCA6IC0xO1xuICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3Vyc29yLmlkID09IGxvY2FsSW5SZXBlYXQpXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0YWtlTm9kZShzdGFydCwgZW5kUG9zLCBsb2NhbENoaWxkcmVuLCBsb2NhbFBvc2l0aW9ucywgbG9jYWxJblJlcGVhdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbENoaWxkcmVuLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGxvY2FsUG9zaXRpb25zLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGlmIChsb2NhbEluUmVwZWF0ID4gLTEgJiYgbG9jYWxDaGlsZHJlbi5sZW5ndGggPiBCYWxhbmNlQnJhbmNoRmFjdG9yKVxuICAgICAgICAgICAgICAgIG5vZGUgPSBiYWxhbmNlUmFuZ2UodHlwZSwgdHlwZSwgbG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMsIDAsIGxvY2FsQ2hpbGRyZW4ubGVuZ3RoLCAwLCBtYXhCdWZmZXJMZW5ndGgsIGVuZCAtIHN0YXJ0LCBjb250ZXh0SGFzaCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbm9kZSA9IHdpdGhIYXNoKG5ldyBUcmVlKHR5cGUsIGxvY2FsQ2hpbGRyZW4sIGxvY2FsUG9zaXRpb25zLCBlbmQgLSBzdGFydCksIGNvbnRleHRIYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChzdGFydFBvcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRCdWZmZXJTaXplKG1heFNpemUsIGluUmVwZWF0KSB7XG4gICAgICAgIC8vIFNjYW4gdGhyb3VnaCB0aGUgYnVmZmVyIHRvIGZpbmQgcHJldmlvdXMgc2libGluZ3MgdGhhdCBmaXRcbiAgICAgICAgLy8gdG9nZXRoZXIgaW4gYSBUcmVlQnVmZmVyLCBhbmQgZG9uJ3QgY29udGFpbiBhbnkgcmV1c2VkIG5vZGVzXG4gICAgICAgIC8vICh3aGljaCBjYW4ndCBiZSBzdG9yZWQgaW4gYSBidWZmZXIpLlxuICAgICAgICAvLyBJZiBgaW5SZXBlYXRgIGlzID4gLTEsIGlnbm9yZSBub2RlIGJvdW5kYXJpZXMgb2YgdGhhdCB0eXBlIGZvclxuICAgICAgICAvLyBuZXN0aW5nLCBidXQgbWFrZSBzdXJlIHRoZSBlbmQgZmFsbHMgZWl0aGVyIGF0IHRoZSBzdGFydFxuICAgICAgICAvLyAoYG1heFNpemVgKSBvciBiZWZvcmUgc3VjaCBhIG5vZGUuXG4gICAgICAgIGxldCBmb3JrID0gY3Vyc29yLmZvcmsoKTtcbiAgICAgICAgbGV0IHNpemUgPSAwLCBzdGFydCA9IDAsIHNraXAgPSAwLCBtaW5TdGFydCA9IGZvcmsuZW5kIC0gbWF4QnVmZmVyTGVuZ3RoO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyBzaXplOiAwLCBzdGFydDogMCwgc2tpcDogMCB9O1xuICAgICAgICBzY2FuOiBmb3IgKGxldCBtaW5Qb3MgPSBmb3JrLnBvcyAtIG1heFNpemU7IGZvcmsucG9zID4gbWluUG9zOykge1xuICAgICAgICAgICAgLy8gUHJldGVuZCBuZXN0ZWQgcmVwZWF0IG5vZGVzIG9mIHRoZSBzYW1lIHR5cGUgZG9uJ3QgZXhpc3RcbiAgICAgICAgICAgIGlmIChmb3JrLmlkID09IGluUmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgLy8gRXhjZXB0IHRoYXQgd2Ugc3RvcmUgdGhlIGN1cnJlbnQgc3RhdGUgYXMgYSB2YWxpZCByZXR1cm5cbiAgICAgICAgICAgICAgICAvLyB2YWx1ZS5cbiAgICAgICAgICAgICAgICByZXN1bHQuc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNraXAgPSBza2lwO1xuICAgICAgICAgICAgICAgIHNraXAgKz0gNDtcbiAgICAgICAgICAgICAgICBzaXplICs9IDQ7XG4gICAgICAgICAgICAgICAgZm9yay5uZXh0KCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbm9kZVNpemUgPSBmb3JrLnNpemUsIHN0YXJ0UG9zID0gZm9yay5wb3MgLSBub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChub2RlU2l6ZSA8IDAgfHwgc3RhcnRQb3MgPCBtaW5Qb3MgfHwgZm9yay5zdGFydCA8IG1pblN0YXJ0KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbGV0IGxvY2FsU2tpcHBlZCA9IGZvcmsuaWQgPj0gbWluUmVwZWF0VHlwZSA/IDQgOiAwO1xuICAgICAgICAgICAgbGV0IG5vZGVTdGFydCA9IGZvcmsuc3RhcnQ7XG4gICAgICAgICAgICBmb3JrLm5leHQoKTtcbiAgICAgICAgICAgIHdoaWxlIChmb3JrLnBvcyA+IHN0YXJ0UG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmsuc2l6ZSA8IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIHNjYW47XG4gICAgICAgICAgICAgICAgaWYgKGZvcmsuaWQgPj0gbWluUmVwZWF0VHlwZSlcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTa2lwcGVkICs9IDQ7XG4gICAgICAgICAgICAgICAgZm9yay5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCA9IG5vZGVTdGFydDtcbiAgICAgICAgICAgIHNpemUgKz0gbm9kZVNpemU7XG4gICAgICAgICAgICBza2lwICs9IGxvY2FsU2tpcHBlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5SZXBlYXQgPCAwIHx8IHNpemUgPT0gbWF4U2l6ZSkge1xuICAgICAgICAgICAgcmVzdWx0LnNpemUgPSBzaXplO1xuICAgICAgICAgICAgcmVzdWx0LnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICByZXN1bHQuc2tpcCA9IHNraXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zaXplID4gNCA/IHJlc3VsdCA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29weVRvQnVmZmVyKGJ1ZmZlclN0YXJ0LCBidWZmZXIsIGluZGV4LCBpblJlcGVhdCkge1xuICAgICAgICBsZXQgeyBpZCwgc3RhcnQsIGVuZCwgc2l6ZSB9ID0gY3Vyc29yO1xuICAgICAgICBjdXJzb3IubmV4dCgpO1xuICAgICAgICBpZiAoaWQgPT0gaW5SZXBlYXQpXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIGxldCBzdGFydEluZGV4ID0gaW5kZXg7XG4gICAgICAgIGlmIChzaXplID4gNCkge1xuICAgICAgICAgICAgbGV0IGVuZFBvcyA9IGN1cnNvci5wb3MgLSAoc2l6ZSAtIDQpO1xuICAgICAgICAgICAgd2hpbGUgKGN1cnNvci5wb3MgPiBlbmRQb3MpXG4gICAgICAgICAgICAgICAgaW5kZXggPSBjb3B5VG9CdWZmZXIoYnVmZmVyU3RhcnQsIGJ1ZmZlciwgaW5kZXgsIGluUmVwZWF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQgPCBtaW5SZXBlYXRUeXBlKSB7IC8vIERvbid0IGNvcHkgcmVwZWF0IG5vZGVzIGludG8gYnVmZmVyc1xuICAgICAgICAgICAgYnVmZmVyWy0taW5kZXhdID0gc3RhcnRJbmRleDtcbiAgICAgICAgICAgIGJ1ZmZlclstLWluZGV4XSA9IGVuZCAtIGJ1ZmZlclN0YXJ0O1xuICAgICAgICAgICAgYnVmZmVyWy0taW5kZXhdID0gc3RhcnQgLSBidWZmZXJTdGFydDtcbiAgICAgICAgICAgIGJ1ZmZlclstLWluZGV4XSA9IGlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gICAgbGV0IGNoaWxkcmVuID0gW10sIHBvc2l0aW9ucyA9IFtdO1xuICAgIHdoaWxlIChjdXJzb3IucG9zID4gMClcbiAgICAgICAgdGFrZU5vZGUoZGF0YS5zdGFydCB8fCAwLCAwLCBjaGlsZHJlbiwgcG9zaXRpb25zLCAtMSk7XG4gICAgbGV0IGxlbmd0aCA9IChfYSA9IGRhdGEubGVuZ3RoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoY2hpbGRyZW4ubGVuZ3RoID8gcG9zaXRpb25zWzBdICsgY2hpbGRyZW5bMF0ubGVuZ3RoIDogMCk7XG4gICAgcmV0dXJuIG5ldyBUcmVlKHR5cGVzW3RvcElEXSwgY2hpbGRyZW4ucmV2ZXJzZSgpLCBwb3NpdGlvbnMucmV2ZXJzZSgpLCBsZW5ndGgpO1xufVxuZnVuY3Rpb24gYmFsYW5jZVJhbmdlKG91dGVyVHlwZSwgaW5uZXJUeXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBmcm9tLCB0bywgc3RhcnQsIG1heEJ1ZmZlckxlbmd0aCwgbGVuZ3RoLCBjb250ZXh0SGFzaCkge1xuICAgIGxldCBsb2NhbENoaWxkcmVuID0gW10sIGxvY2FsUG9zaXRpb25zID0gW107XG4gICAgaWYgKGxlbmd0aCA8PSBtYXhCdWZmZXJMZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPCB0bzsgaSsrKSB7XG4gICAgICAgICAgICBsb2NhbENoaWxkcmVuLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgbG9jYWxQb3NpdGlvbnMucHVzaChwb3NpdGlvbnNbaV0gLSBzdGFydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBtYXhDaGlsZCA9IE1hdGgubWF4KG1heEJ1ZmZlckxlbmd0aCwgTWF0aC5jZWlsKGxlbmd0aCAqIDEuNSAvIEJhbGFuY2VCcmFuY2hGYWN0b3IpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPCB0bzspIHtcbiAgICAgICAgICAgIGxldCBncm91cEZyb20gPSBpLCBncm91cFN0YXJ0ID0gcG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgZm9yICg7IGkgPCB0bzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRFbmQgPSBwb3NpdGlvbnNbaV0gKyBjaGlsZHJlbltpXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRFbmQgLSBncm91cFN0YXJ0ID4gbWF4Q2hpbGQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPT0gZ3JvdXBGcm9tICsgMSkge1xuICAgICAgICAgICAgICAgIGxldCBvbmx5ID0gY2hpbGRyZW5bZ3JvdXBGcm9tXTtcbiAgICAgICAgICAgICAgICBpZiAob25seSBpbnN0YW5jZW9mIFRyZWUgJiYgb25seS50eXBlID09IGlubmVyVHlwZSAmJiBvbmx5Lmxlbmd0aCA+IG1heENoaWxkIDw8IDEpIHsgLy8gVG9vIGJpZywgY29sbGFwc2VcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvbmx5LmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbENoaWxkcmVuLnB1c2gob25seS5jaGlsZHJlbltqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFBvc2l0aW9ucy5wdXNoKG9ubHkucG9zaXRpb25zW2pdICsgZ3JvdXBTdGFydCAtIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxDaGlsZHJlbi5wdXNoKG9ubHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaSA9PSBncm91cEZyb20gKyAxKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxDaGlsZHJlbi5wdXNoKGNoaWxkcmVuW2dyb3VwRnJvbV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGlubmVyID0gYmFsYW5jZVJhbmdlKGlubmVyVHlwZSwgaW5uZXJUeXBlLCBjaGlsZHJlbiwgcG9zaXRpb25zLCBncm91cEZyb20sIGksIGdyb3VwU3RhcnQsIG1heEJ1ZmZlckxlbmd0aCwgcG9zaXRpb25zW2kgLSAxXSArIGNoaWxkcmVuW2kgLSAxXS5sZW5ndGggLSBncm91cFN0YXJ0LCBjb250ZXh0SGFzaCk7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyVHlwZSAhPSBOb2RlVHlwZS5ub25lICYmICFjb250YWluc1R5cGUoaW5uZXIuY2hpbGRyZW4sIGlubmVyVHlwZSkpXG4gICAgICAgICAgICAgICAgICAgIGlubmVyID0gd2l0aEhhc2gobmV3IFRyZWUoTm9kZVR5cGUubm9uZSwgaW5uZXIuY2hpbGRyZW4sIGlubmVyLnBvc2l0aW9ucywgaW5uZXIubGVuZ3RoKSwgY29udGV4dEhhc2gpO1xuICAgICAgICAgICAgICAgIGxvY2FsQ2hpbGRyZW4ucHVzaChpbm5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbFBvc2l0aW9ucy5wdXNoKGdyb3VwU3RhcnQgLSBzdGFydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdpdGhIYXNoKG5ldyBUcmVlKG91dGVyVHlwZSwgbG9jYWxDaGlsZHJlbiwgbG9jYWxQb3NpdGlvbnMsIGxlbmd0aCksIGNvbnRleHRIYXNoKTtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zVHlwZShub2RlcywgdHlwZSkge1xuICAgIGZvciAobGV0IGVsdCBvZiBub2RlcylcbiAgICAgICAgaWYgKGVsdC50eXBlID09IHR5cGUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLy8gVHJlZSBmcmFnbWVudHMgYXJlIHVzZWQgZHVyaW5nIFtpbmNyZW1lbnRhbFxuLy8vIHBhcnNpbmddKCNsZXplci5QYXJzZU9wdGlvbnMuZnJhZ21lbnRzKSB0byB0cmFjayBwYXJ0cyBvZiBvbGRcbi8vLyB0cmVlcyB0aGF0IGNhbiBiZSByZXVzZWQgaW4gYSBuZXcgcGFyc2UuIEFuIGFycmF5IG9mIGZyYWdtZW50cyBpc1xuLy8vIHVzZWQgdG8gdHJhY2sgcmVnaW9ucyBvZiBhbiBvbGQgdHJlZSB3aG9zZSBub2RlcyBtaWdodCBiZSByZXVzZWRcbi8vLyBpbiBuZXcgcGFyc2VzLiBVc2UgdGhlIHN0YXRpY1xuLy8vIFtgYXBwbHlDaGFuZ2VzYF0oI3RyZWUuVHJlZUZyYWdtZW50XmFwcGx5Q2hhbmdlcykgbWV0aG9kIHRvIHVwZGF0ZVxuLy8vIGZyYWdtZW50cyBmb3IgZG9jdW1lbnQgY2hhbmdlcy5cbmNsYXNzIFRyZWVGcmFnbWVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLy8vIFRoZSBzdGFydCBvZiB0aGUgdW5jaGFuZ2VkIHJhbmdlIHBvaW50ZWQgdG8gYnkgdGhpcyBmcmFnbWVudC5cbiAgICAvLy8gVGhpcyByZWZlcnMgdG8gYW4gb2Zmc2V0IGluIHRoZSBfdXBkYXRlZF8gZG9jdW1lbnQgKGFzIG9wcG9zZWRcbiAgICAvLy8gdG8gdGhlIG9yaWdpbmFsIHRyZWUpLlxuICAgIGZyb20sIFxuICAgIC8vLyBUaGUgZW5kIG9mIHRoZSB1bmNoYW5nZWQgcmFuZ2UuXG4gICAgdG8sIFxuICAgIC8vLyBUaGUgdHJlZSB0aGF0IHRoaXMgZnJhZ21lbnQgaXMgYmFzZWQgb24uXG4gICAgdHJlZSwgXG4gICAgLy8vIFRoZSBvZmZzZXQgYmV0d2VlbiB0aGUgZnJhZ21lbnQncyB0cmVlIGFuZCB0aGUgZG9jdW1lbnQgdGhhdFxuICAgIC8vLyB0aGlzIGZyYWdtZW50IGNhbiBiZSB1c2VkIGFnYWluc3QuIEFkZCB0aGlzIHdoZW4gZ29pbmcgZnJvbVxuICAgIC8vLyBkb2N1bWVudCB0byB0cmVlIHBvc2l0aW9ucywgc3VidHJhY3QgaXQgdG8gZ28gZnJvbSB0cmVlIHRvXG4gICAgLy8vIGRvY3VtZW50IHBvc2l0aW9ucy5cbiAgICBvZmZzZXQsIG9wZW4pIHtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLnRyZWUgPSB0cmVlO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5vcGVuID0gb3BlbjtcbiAgICB9XG4gICAgZ2V0IG9wZW5TdGFydCgpIHsgcmV0dXJuICh0aGlzLm9wZW4gJiAxIC8qIFN0YXJ0ICovKSA+IDA7IH1cbiAgICBnZXQgb3BlbkVuZCgpIHsgcmV0dXJuICh0aGlzLm9wZW4gJiAyIC8qIEVuZCAqLykgPiAwOyB9XG4gICAgLy8vIEFwcGx5IGEgc2V0IG9mIGVkaXRzIHRvIGFuIGFycmF5IG9mIGZyYWdtZW50cywgcmVtb3Zpbmcgb3JcbiAgICAvLy8gc3BsaXR0aW5nIGZyYWdtZW50cyBhcyBuZWNlc3NhcnkgdG8gcmVtb3ZlIGVkaXRlZCByYW5nZXMsIGFuZFxuICAgIC8vLyBhZGp1c3Rpbmcgb2Zmc2V0cyBmb3IgZnJhZ21lbnRzIHRoYXQgbW92ZWQuXG4gICAgc3RhdGljIGFwcGx5Q2hhbmdlcyhmcmFnbWVudHMsIGNoYW5nZXMsIG1pbkdhcCA9IDEyOCkge1xuICAgICAgICBpZiAoIWNoYW5nZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50cztcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgZkkgPSAxLCBuZXh0RiA9IGZyYWdtZW50cy5sZW5ndGggPyBmcmFnbWVudHNbMF0gOiBudWxsO1xuICAgICAgICBsZXQgY0kgPSAwLCBwb3MgPSAwLCBvZmYgPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgbmV4dEMgPSBjSSA8IGNoYW5nZXMubGVuZ3RoID8gY2hhbmdlc1tjSSsrXSA6IG51bGw7XG4gICAgICAgICAgICBsZXQgbmV4dFBvcyA9IG5leHRDID8gbmV4dEMuZnJvbUEgOiAxZTk7XG4gICAgICAgICAgICBpZiAobmV4dFBvcyAtIHBvcyA+PSBtaW5HYXApXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHRGICYmIG5leHRGLmZyb20gPCBuZXh0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXQgPSBuZXh0RjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA+PSBjdXQuZnJvbSB8fCBuZXh0UG9zIDw9IGN1dC50byB8fCBvZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmRnJvbSA9IE1hdGgubWF4KGN1dC5mcm9tLCBwb3MpIC0gb2ZmLCBmVG8gPSBNYXRoLm1pbihjdXQudG8sIG5leHRQb3MpIC0gb2ZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3V0ID0gZkZyb20gPj0gZlRvID8gbnVsbCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRyZWVGcmFnbWVudChmRnJvbSwgZlRvLCBjdXQudHJlZSwgY3V0Lm9mZnNldCArIG9mZiwgKGNJID4gMCA/IDEgLyogU3RhcnQgKi8gOiAwKSB8IChuZXh0QyA/IDIgLyogRW5kICovIDogMCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjdXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEYudG8gPiBuZXh0UG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIG5leHRGID0gZkkgPCBmcmFnbWVudHMubGVuZ3RoID8gZnJhZ21lbnRzW2ZJKytdIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5leHRDKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgcG9zID0gbmV4dEMudG9BO1xuICAgICAgICAgICAgb2ZmID0gbmV4dEMudG9BIC0gbmV4dEMudG9CO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vLyBDcmVhdGUgYSBzZXQgb2YgZnJhZ21lbnRzIGZyb20gYSBmcmVzaGx5IHBhcnNlZCB0cmVlLCBvciB1cGRhdGVcbiAgICAvLy8gYW4gZXhpc3Rpbmcgc2V0IG9mIGZyYWdtZW50cyBieSByZXBsYWNpbmcgdGhlIG9uZXMgdGhhdCBvdmVybGFwXG4gICAgLy8vIHdpdGggYSB0cmVlIHdpdGggY29udGVudCBmcm9tIHRoZSBuZXcgdHJlZS4gV2hlbiBgcGFydGlhbGAgaXNcbiAgICAvLy8gdHJ1ZSwgdGhlIHBhcnNlIGlzIHRyZWF0ZWQgYXMgaW5jb21wbGV0ZSwgYW5kIHRoZSB0b2tlbiBhdCBpdHNcbiAgICAvLy8gZW5kIGlzIG5vdCBpbmNsdWRlZCBpbiBbYHNhZmVUb2BdKCN0cmVlLlRyZWVGcmFnbWVudC5zYWZlVG8pLlxuICAgIHN0YXRpYyBhZGRUcmVlKHRyZWUsIGZyYWdtZW50cyA9IFtdLCBwYXJ0aWFsID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtuZXcgVHJlZUZyYWdtZW50KDAsIHRyZWUubGVuZ3RoLCB0cmVlLCAwLCBwYXJ0aWFsID8gMiAvKiBFbmQgKi8gOiAwKV07XG4gICAgICAgIGZvciAobGV0IGYgb2YgZnJhZ21lbnRzKVxuICAgICAgICAgICAgaWYgKGYudG8gPiB0cmVlLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4vLyBDcmVhdGVzIGFuIGBJbnB1dGAgdGhhdCBpcyBiYWNrZWQgYnkgYSBzaW5nbGUsIGZsYXQgc3RyaW5nLlxuZnVuY3Rpb24gc3RyaW5nSW5wdXQoaW5wdXQpIHsgcmV0dXJuIG5ldyBTdHJpbmdJbnB1dChpbnB1dCk7IH1cbmNsYXNzIFN0cmluZ0lucHV0IHtcbiAgICBjb25zdHJ1Y3RvcihzdHJpbmcsIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgIH1cbiAgICBnZXQocG9zKSB7XG4gICAgICAgIHJldHVybiBwb3MgPCAwIHx8IHBvcyA+PSB0aGlzLmxlbmd0aCA/IC0xIDogdGhpcy5zdHJpbmcuY2hhckNvZGVBdChwb3MpO1xuICAgIH1cbiAgICBsaW5lQWZ0ZXIocG9zKSB7XG4gICAgICAgIGlmIChwb3MgPCAwKVxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLnN0cmluZy5pbmRleE9mKFwiXFxuXCIsIHBvcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZy5zbGljZShwb3MsIGVuZCA8IDAgPyB0aGlzLmxlbmd0aCA6IE1hdGgubWluKGVuZCwgdGhpcy5sZW5ndGgpKTtcbiAgICB9XG4gICAgcmVhZChmcm9tLCB0bykgeyByZXR1cm4gdGhpcy5zdHJpbmcuc2xpY2UoZnJvbSwgTWF0aC5taW4odGhpcy5sZW5ndGgsIHRvKSk7IH1cbiAgICBjbGlwKGF0KSB7IHJldHVybiBuZXcgU3RyaW5nSW5wdXQodGhpcy5zdHJpbmcsIGF0KTsgfVxufVxuXG5leHBvcnRzLkRlZmF1bHRCdWZmZXJMZW5ndGggPSBEZWZhdWx0QnVmZmVyTGVuZ3RoO1xuZXhwb3J0cy5Ob2RlUHJvcCA9IE5vZGVQcm9wO1xuZXhwb3J0cy5Ob2RlU2V0ID0gTm9kZVNldDtcbmV4cG9ydHMuTm9kZVR5cGUgPSBOb2RlVHlwZTtcbmV4cG9ydHMuVHJlZSA9IFRyZWU7XG5leHBvcnRzLlRyZWVCdWZmZXIgPSBUcmVlQnVmZmVyO1xuZXhwb3J0cy5UcmVlQ3Vyc29yID0gVHJlZUN1cnNvcjtcbmV4cG9ydHMuVHJlZUZyYWdtZW50ID0gVHJlZUZyYWdtZW50O1xuZXhwb3J0cy5zdHJpbmdJbnB1dCA9IHN0cmluZ0lucHV0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJlZS5janMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBsZXplclRyZWUgPSByZXF1aXJlKCdsZXplci10cmVlJyk7XG5cbi8vLyBBIHBhcnNlIHN0YWNrLiBUaGVzZSBhcmUgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBwYXJzZXIgdG8gdHJhY2tcbi8vLyBwYXJzaW5nIHByb2dyZXNzLiBUaGV5IGFsc28gcHJvdmlkZSBzb21lIHByb3BlcnRpZXMgYW5kIG1ldGhvZHNcbi8vLyB0aGF0IGV4dGVybmFsIGNvZGUgc3VjaCBhcyBhIHRva2VuaXplciBjYW4gdXNlIHRvIGdldCBpbmZvcm1hdGlvblxuLy8vIGFib3V0IHRoZSBwYXJzZSBzdGF0ZS5cbmNsYXNzIFN0YWNrIHtcbiAgICAvLy8gQGludGVybmFsXG4gICAgY29uc3RydWN0b3IoXG4gICAgLy8vIEEgdGhlIHBhcnNlIHRoYXQgdGhpcyBzdGFjayBpcyBwYXJ0IG9mIEBpbnRlcm5hbFxuICAgIHAsIFxuICAgIC8vLyBIb2xkcyBzdGF0ZSwgcG9zLCB2YWx1ZSBzdGFjayBwb3MgKDE1IGJpdHMgYXJyYXkgaW5kZXgsIDE1IGJpdHNcbiAgICAvLy8gYnVmZmVyIGluZGV4KSB0cmlwbGV0cyBmb3IgYWxsIGJ1dCB0aGUgdG9wIHN0YXRlXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHN0YWNrLCBcbiAgICAvLy8gVGhlIGN1cnJlbnQgcGFyc2Ugc3RhdGUgQGludGVybmFsXG4gICAgc3RhdGUsIFxuICAgIC8vIFRoZSBwb3NpdGlvbiBhdCB3aGljaCB0aGUgbmV4dCByZWR1Y2Ugc2hvdWxkIHRha2UgcGxhY2UuIFRoaXNcbiAgICAvLyBjYW4gYmUgbGVzcyB0aGFuIGB0aGlzLnBvc2Agd2hlbiBza2lwcGVkIGV4cHJlc3Npb25zIGhhdmUgYmVlblxuICAgIC8vIGFkZGVkIHRvIHRoZSBzdGFjayAod2hpY2ggc2hvdWxkIGJlIG1vdmVkIG91dHNpZGUgb2YgdGhlIG5leHRcbiAgICAvLyByZWR1Y3Rpb24pXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHJlZHVjZVBvcywgXG4gICAgLy8vIFRoZSBpbnB1dCBwb3NpdGlvbiB1cCB0byB3aGljaCB0aGlzIHN0YWNrIGhhcyBwYXJzZWQuXG4gICAgcG9zLCBcbiAgICAvLy8gVGhlIGR5bmFtaWMgc2NvcmUgb2YgdGhlIHN0YWNrLCBpbmNsdWRpbmcgZHluYW1pYyBwcmVjZWRlbmNlXG4gICAgLy8vIGFuZCBlcnJvci1yZWNvdmVyeSBwZW5hbHRpZXNcbiAgICAvLy8gQGludGVybmFsXG4gICAgc2NvcmUsIFxuICAgIC8vIFRoZSBvdXRwdXQgYnVmZmVyLiBIb2xkcyAodHlwZSwgc3RhcnQsIGVuZCwgc2l6ZSkgcXVhZHNcbiAgICAvLyByZXByZXNlbnRpbmcgbm9kZXMgY3JlYXRlZCBieSB0aGUgcGFyc2VyLCB3aGVyZSBgc2l6ZWAgaXNcbiAgICAvLyBhbW91bnQgb2YgYnVmZmVyIGFycmF5IGVudHJpZXMgY292ZXJlZCBieSB0aGlzIG5vZGUuXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIGJ1ZmZlciwgXG4gICAgLy8gVGhlIGJhc2Ugb2Zmc2V0IG9mIHRoZSBidWZmZXIuIFdoZW4gc3RhY2tzIGFyZSBzcGxpdCwgdGhlIHNwbGl0XG4gICAgLy8gaW5zdGFuY2Ugc2hhcmVkIHRoZSBidWZmZXIgaGlzdG9yeSB3aXRoIGl0cyBwYXJlbnQgdXAgdG9cbiAgICAvLyBgYnVmZmVyQmFzZWAsIHdoaWNoIGlzIHRoZSBhYnNvbHV0ZSBvZmZzZXQgKGluY2x1ZGluZyB0aGVcbiAgICAvLyBvZmZzZXQgb2YgcHJldmlvdXMgc3BsaXRzKSBpbnRvIHRoZSBidWZmZXIgYXQgd2hpY2ggdGhpcyBzdGFja1xuICAgIC8vIHN0YXJ0cyB3cml0aW5nLlxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBidWZmZXJCYXNlLCBcbiAgICAvLy8gQGludGVybmFsXG4gICAgY3VyQ29udGV4dCwgXG4gICAgLy8gQSBwYXJlbnQgc3RhY2sgZnJvbSB3aGljaCB0aGlzIHdhcyBzcGxpdCBvZmYsIGlmIGFueS4gVGhpcyBpc1xuICAgIC8vIHNldCB1cCBzbyB0aGF0IGl0IGFsd2F5cyBwb2ludHMgdG8gYSBzdGFjayB0aGF0IGhhcyBzb21lXG4gICAgLy8gYWRkaXRpb25hbCBidWZmZXIgY29udGVudCwgbmV2ZXIgdG8gYSBzdGFjayB3aXRoIGFuIGVxdWFsXG4gICAgLy8gYGJ1ZmZlckJhc2VgLlxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5wID0gcDtcbiAgICAgICAgdGhpcy5zdGFjayA9IHN0YWNrO1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMucmVkdWNlUG9zID0gcmVkdWNlUG9zO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5zY29yZSA9IHNjb3JlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5idWZmZXJCYXNlID0gYnVmZmVyQmFzZTtcbiAgICAgICAgdGhpcy5jdXJDb250ZXh0ID0gY3VyQ29udGV4dDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBbJHt0aGlzLnN0YWNrLmZpbHRlcigoXywgaSkgPT4gaSAlIDMgPT0gMCkuY29uY2F0KHRoaXMuc3RhdGUpfV1AJHt0aGlzLnBvc30ke3RoaXMuc2NvcmUgPyBcIiFcIiArIHRoaXMuc2NvcmUgOiBcIlwifWA7XG4gICAgfVxuICAgIC8vIFN0YXJ0IGFuIGVtcHR5IHN0YWNrXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHN0YXRpYyBzdGFydChwLCBzdGF0ZSwgcG9zID0gMCkge1xuICAgICAgICBsZXQgY3ggPSBwLnBhcnNlci5jb250ZXh0O1xuICAgICAgICByZXR1cm4gbmV3IFN0YWNrKHAsIFtdLCBzdGF0ZSwgcG9zLCBwb3MsIDAsIFtdLCAwLCBjeCA/IG5ldyBTdGFja0NvbnRleHQoY3gsIGN4LnN0YXJ0KSA6IG51bGwsIG51bGwpO1xuICAgIH1cbiAgICAvLy8gVGhlIHN0YWNrJ3MgY3VycmVudCBbY29udGV4dF0oI2xlemVyLkNvbnRleHRUcmFja2VyKSB2YWx1ZSwgaWZcbiAgICAvLy8gYW55LiBJdHMgdHlwZSB3aWxsIGRlcGVuZCBvbiB0aGUgY29udGV4dCB0cmFja2VyJ3MgdHlwZVxuICAgIC8vLyBwYXJhbWV0ZXIsIG9yIGl0IHdpbGwgYmUgYG51bGxgIGlmIHRoZXJlIGlzIG5vIGNvbnRleHRcbiAgICAvLy8gdHJhY2tlci5cbiAgICBnZXQgY29udGV4dCgpIHsgcmV0dXJuIHRoaXMuY3VyQ29udGV4dCA/IHRoaXMuY3VyQ29udGV4dC5jb250ZXh0IDogbnVsbDsgfVxuICAgIC8vIFB1c2ggYSBzdGF0ZSBvbnRvIHRoZSBzdGFjaywgdHJhY2tpbmcgaXRzIHN0YXJ0IHBvc2l0aW9uIGFzIHdlbGxcbiAgICAvLyBhcyB0aGUgYnVmZmVyIGJhc2UgYXQgdGhhdCBwb2ludC5cbiAgICAvLy8gQGludGVybmFsXG4gICAgcHVzaFN0YXRlKHN0YXRlLCBzdGFydCkge1xuICAgICAgICB0aGlzLnN0YWNrLnB1c2godGhpcy5zdGF0ZSwgc3RhcnQsIHRoaXMuYnVmZmVyQmFzZSArIHRoaXMuYnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB9XG4gICAgLy8gQXBwbHkgYSByZWR1Y2UgYWN0aW9uXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHJlZHVjZShhY3Rpb24pIHtcbiAgICAgICAgbGV0IGRlcHRoID0gYWN0aW9uID4+IDE5IC8qIFJlZHVjZURlcHRoU2hpZnQgKi8sIHR5cGUgPSBhY3Rpb24gJiA2NTUzNSAvKiBWYWx1ZU1hc2sgKi87XG4gICAgICAgIGxldCB7IHBhcnNlciB9ID0gdGhpcy5wO1xuICAgICAgICBsZXQgZFByZWMgPSBwYXJzZXIuZHluYW1pY1ByZWNlZGVuY2UodHlwZSk7XG4gICAgICAgIGlmIChkUHJlYylcbiAgICAgICAgICAgIHRoaXMuc2NvcmUgKz0gZFByZWM7XG4gICAgICAgIGlmIChkZXB0aCA9PSAwKSB7XG4gICAgICAgICAgICAvLyBaZXJvLWRlcHRoIHJlZHVjdGlvbnMgYXJlIGEgc3BlY2lhbCBjYXNl4oCUdGhleSBhZGQgc3R1ZmYgdG9cbiAgICAgICAgICAgIC8vIHRoZSBzdGFjayB3aXRob3V0IHBvcHBpbmcgYW55dGhpbmcgb2ZmLlxuICAgICAgICAgICAgaWYgKHR5cGUgPCBwYXJzZXIubWluUmVwZWF0VGVybSlcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlTm9kZSh0eXBlLCB0aGlzLnJlZHVjZVBvcywgdGhpcy5yZWR1Y2VQb3MsIDQsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5wdXNoU3RhdGUocGFyc2VyLmdldEdvdG8odGhpcy5zdGF0ZSwgdHlwZSwgdHJ1ZSksIHRoaXMucmVkdWNlUG9zKTtcbiAgICAgICAgICAgIHRoaXMucmVkdWNlQ29udGV4dCh0eXBlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaW5kIHRoZSBiYXNlIGluZGV4IGludG8gYHRoaXMuc3RhY2tgLCBjb250ZW50IGFmdGVyIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgZHJvcHBlZC4gTm90ZSB0aGF0IHdpdGggYFN0YXlGbGFnYCByZWR1Y3Rpb25zIHdlIG5lZWQgdG9cbiAgICAgICAgLy8gY29uc3VtZSB0d28gZXh0cmEgZnJhbWVzICh0aGUgZHVtbXkgcGFyZW50IG5vZGUgZm9yIHRoZSBza2lwcGVkXG4gICAgICAgIC8vIGV4cHJlc3Npb24gYW5kIHRoZSBzdGF0ZSB0aGF0IHdlJ2xsIGJlIHN0YXlpbmcgaW4sIHdoaWNoIHNob3VsZFxuICAgICAgICAvLyBiZSBtb3ZlZCB0byBgdGhpcy5zdGF0ZWApLlxuICAgICAgICBsZXQgYmFzZSA9IHRoaXMuc3RhY2subGVuZ3RoIC0gKChkZXB0aCAtIDEpICogMykgLSAoYWN0aW9uICYgMjYyMTQ0IC8qIFN0YXlGbGFnICovID8gNiA6IDApO1xuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnN0YWNrW2Jhc2UgLSAyXTtcbiAgICAgICAgbGV0IGJ1ZmZlckJhc2UgPSB0aGlzLnN0YWNrW2Jhc2UgLSAxXSwgY291bnQgPSB0aGlzLmJ1ZmZlckJhc2UgKyB0aGlzLmJ1ZmZlci5sZW5ndGggLSBidWZmZXJCYXNlO1xuICAgICAgICAvLyBTdG9yZSBub3JtYWwgdGVybXMgb3IgYFIgLT4gUiBSYCByZXBlYXQgcmVkdWN0aW9uc1xuICAgICAgICBpZiAodHlwZSA8IHBhcnNlci5taW5SZXBlYXRUZXJtIHx8IChhY3Rpb24gJiAxMzEwNzIgLyogUmVwZWF0RmxhZyAqLykpIHtcbiAgICAgICAgICAgIGxldCBwb3MgPSBwYXJzZXIuc3RhdGVGbGFnKHRoaXMuc3RhdGUsIDEgLyogU2tpcHBlZCAqLykgPyB0aGlzLnBvcyA6IHRoaXMucmVkdWNlUG9zO1xuICAgICAgICAgICAgdGhpcy5zdG9yZU5vZGUodHlwZSwgc3RhcnQsIHBvcywgY291bnQgKyA0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uICYgMjYyMTQ0IC8qIFN0YXlGbGFnICovKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGFja1tiYXNlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBiYXNlU3RhdGVJRCA9IHRoaXMuc3RhY2tbYmFzZSAtIDNdO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHBhcnNlci5nZXRHb3RvKGJhc2VTdGF0ZUlELCB0eXBlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGggPiBiYXNlKVxuICAgICAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgdGhpcy5yZWR1Y2VDb250ZXh0KHR5cGUpO1xuICAgIH1cbiAgICAvLyBTaGlmdCBhIHZhbHVlIGludG8gdGhlIGJ1ZmZlclxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBzdG9yZU5vZGUodGVybSwgc3RhcnQsIGVuZCwgc2l6ZSA9IDQsIGlzUmVkdWNlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRlcm0gPT0gMCAvKiBFcnIgKi8pIHsgLy8gVHJ5IHRvIG9taXQvbWVyZ2UgYWRqYWNlbnQgZXJyb3Igbm9kZXNcbiAgICAgICAgICAgIGxldCBjdXIgPSB0aGlzLCB0b3AgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICBpZiAodG9wID09IDAgJiYgY3VyLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRvcCA9IGN1ci5idWZmZXJCYXNlIC0gY3VyLnBhcmVudC5idWZmZXJCYXNlO1xuICAgICAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9wID4gMCAmJiBjdXIuYnVmZmVyW3RvcCAtIDRdID09IDAgLyogRXJyICovICYmIGN1ci5idWZmZXJbdG9wIC0gMV0gPiAtMSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PSBlbmQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoY3VyLmJ1ZmZlclt0b3AgLSAyXSA+PSBzdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBjdXIuYnVmZmVyW3RvcCAtIDJdID0gZW5kO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNSZWR1Y2UgfHwgdGhpcy5wb3MgPT0gZW5kKSB7IC8vIFNpbXBsZSBjYXNlLCBqdXN0IGFwcGVuZFxuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCh0ZXJtLCBzdGFydCwgZW5kLCBzaXplKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgLy8gVGhlcmUgbWF5IGJlIHNraXBwZWQgbm9kZXMgdGhhdCBoYXZlIHRvIGJlIG1vdmVkIGZvcndhcmRcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDAgJiYgdGhpcy5idWZmZXJbaW5kZXggLSA0XSAhPSAwIC8qIEVyciAqLylcbiAgICAgICAgICAgICAgICB3aGlsZSAoaW5kZXggPiAwICYmIHRoaXMuYnVmZmVyW2luZGV4IC0gMl0gPiBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSB0aGlzIHJlY29yZCBmb3J3YXJkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyW2luZGV4XSA9IHRoaXMuYnVmZmVyW2luZGV4IC0gNF07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyW2luZGV4ICsgMV0gPSB0aGlzLmJ1ZmZlcltpbmRleCAtIDNdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltpbmRleCArIDJdID0gdGhpcy5idWZmZXJbaW5kZXggLSAyXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJbaW5kZXggKyAzXSA9IHRoaXMuYnVmZmVyW2luZGV4IC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGluZGV4IC09IDQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplID4gNClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgLT0gNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcltpbmRleF0gPSB0ZXJtO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJbaW5kZXggKyAxXSA9IHN0YXJ0O1xuICAgICAgICAgICAgdGhpcy5idWZmZXJbaW5kZXggKyAyXSA9IGVuZDtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyW2luZGV4ICsgM10gPSBzaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFwcGx5IGEgc2hpZnQgYWN0aW9uXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHNoaWZ0KGFjdGlvbiwgbmV4dCwgbmV4dEVuZCkge1xuICAgICAgICBpZiAoYWN0aW9uICYgMTMxMDcyIC8qIEdvdG9GbGFnICovKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2hTdGF0ZShhY3Rpb24gJiA2NTUzNSAvKiBWYWx1ZU1hc2sgKi8sIHRoaXMucG9zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYWN0aW9uICYgMjYyMTQ0IC8qIFN0YXlGbGFnICovKSA9PSAwKSB7IC8vIFJlZ3VsYXIgc2hpZnRcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMucG9zLCBuZXh0U3RhdGUgPSBhY3Rpb24sIHsgcGFyc2VyIH0gPSB0aGlzLnA7XG4gICAgICAgICAgICBpZiAobmV4dEVuZCA+IHRoaXMucG9zIHx8IG5leHQgPD0gcGFyc2VyLm1heE5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IG5leHRFbmQ7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZXIuc3RhdGVGbGFnKG5leHRTdGF0ZSwgMSAvKiBTa2lwcGVkICovKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWR1Y2VQb3MgPSBuZXh0RW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wdXNoU3RhdGUobmV4dFN0YXRlLCBzdGFydCk7XG4gICAgICAgICAgICBpZiAobmV4dCA8PSBwYXJzZXIubWF4Tm9kZSlcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKG5leHQsIHN0YXJ0LCBuZXh0RW5kLCA0KTtcbiAgICAgICAgICAgIHRoaXMuc2hpZnRDb250ZXh0KG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBTaGlmdC1hbmQtc3RheSwgd2hpY2ggbWVhbnMgdGhpcyBpcyBhIHNraXBwZWQgdG9rZW5cbiAgICAgICAgICAgIGlmIChuZXh0IDw9IHRoaXMucC5wYXJzZXIubWF4Tm9kZSlcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKG5leHQsIHRoaXMucG9zLCBuZXh0RW5kLCA0KTtcbiAgICAgICAgICAgIHRoaXMucG9zID0gbmV4dEVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBcHBseSBhbiBhY3Rpb25cbiAgICAvLy8gQGludGVybmFsXG4gICAgYXBwbHkoYWN0aW9uLCBuZXh0LCBuZXh0RW5kKSB7XG4gICAgICAgIGlmIChhY3Rpb24gJiA2NTUzNiAvKiBSZWR1Y2VGbGFnICovKVxuICAgICAgICAgICAgdGhpcy5yZWR1Y2UoYWN0aW9uKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5zaGlmdChhY3Rpb24sIG5leHQsIG5leHRFbmQpO1xuICAgIH1cbiAgICAvLyBBZGQgYSBwcmVidWlsdCBub2RlIGludG8gdGhlIGJ1ZmZlci4gVGhpcyBtYXkgYmUgYSByZXVzZWQgbm9kZSBvclxuICAgIC8vIHRoZSByZXN1bHQgb2YgcnVubmluZyBhIG5lc3RlZCBwYXJzZXIuXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHVzZU5vZGUodmFsdWUsIG5leHQpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5wLnJldXNlZC5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMucC5yZXVzZWRbaW5kZXhdICE9IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnAucmV1c2VkLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnBvcztcbiAgICAgICAgdGhpcy5yZWR1Y2VQb3MgPSB0aGlzLnBvcyA9IHN0YXJ0ICsgdmFsdWUubGVuZ3RoO1xuICAgICAgICB0aGlzLnB1c2hTdGF0ZShuZXh0LCBzdGFydCk7XG4gICAgICAgIHRoaXMuYnVmZmVyLnB1c2goaW5kZXgsIHN0YXJ0LCB0aGlzLnJlZHVjZVBvcywgLTEgLyogc2l6ZSA8IDAgbWVhbnMgdGhpcyBpcyBhIHJldXNlZCB2YWx1ZSAqLyk7XG4gICAgICAgIGlmICh0aGlzLmN1ckNvbnRleHQpXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHQodGhpcy5jdXJDb250ZXh0LnRyYWNrZXIucmV1c2UodGhpcy5jdXJDb250ZXh0LmNvbnRleHQsIHZhbHVlLCB0aGlzLnAuaW5wdXQsIHRoaXMpKTtcbiAgICB9XG4gICAgLy8gU3BsaXQgdGhlIHN0YWNrLiBEdWUgdG8gdGhlIGJ1ZmZlciBzaGFyaW5nIGFuZCB0aGUgZmFjdFxuICAgIC8vIHRoYXQgYHRoaXMuc3RhY2tgIHRlbmRzIHRvIHN0YXkgcXVpdGUgc2hhbGxvdywgdGhpcyBpc24ndCB2ZXJ5XG4gICAgLy8gZXhwZW5zaXZlLlxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBzcGxpdCgpIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IHRoaXM7XG4gICAgICAgIGxldCBvZmYgPSBwYXJlbnQuYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgLy8gQmVjYXVzZSB0aGUgdG9wIG9mIHRoZSBidWZmZXIgKGFmdGVyIHRoaXMucG9zKSBtYXkgYmUgbXV0YXRlZFxuICAgICAgICAvLyB0byByZW9yZGVyIHJlZHVjdGlvbnMgYW5kIHNraXBwZWQgdG9rZW5zLCBhbmQgc2hhcmVkIGJ1ZmZlcnNcbiAgICAgICAgLy8gc2hvdWxkIGJlIGltbXV0YWJsZSwgdGhpcyBjb3BpZXMgYW55IG91dHN0YW5kaW5nIHNraXBwZWQgdG9rZW5zXG4gICAgICAgIC8vIHRvIHRoZSBuZXcgYnVmZmVyLCBhbmQgcHV0cyB0aGUgYmFzZSBwb2ludGVyIGJlZm9yZSB0aGVtLlxuICAgICAgICB3aGlsZSAob2ZmID4gMCAmJiBwYXJlbnQuYnVmZmVyW29mZiAtIDJdID4gcGFyZW50LnJlZHVjZVBvcylcbiAgICAgICAgICAgIG9mZiAtPSA0O1xuICAgICAgICBsZXQgYnVmZmVyID0gcGFyZW50LmJ1ZmZlci5zbGljZShvZmYpLCBiYXNlID0gcGFyZW50LmJ1ZmZlckJhc2UgKyBvZmY7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBwYXJlbnQgcG9pbnRzIHRvIGFuIGFjdHVhbCBwYXJlbnQgd2l0aCBjb250ZW50LCBpZiB0aGVyZSBpcyBzdWNoIGEgcGFyZW50LlxuICAgICAgICB3aGlsZSAocGFyZW50ICYmIGJhc2UgPT0gcGFyZW50LmJ1ZmZlckJhc2UpXG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICByZXR1cm4gbmV3IFN0YWNrKHRoaXMucCwgdGhpcy5zdGFjay5zbGljZSgpLCB0aGlzLnN0YXRlLCB0aGlzLnJlZHVjZVBvcywgdGhpcy5wb3MsIHRoaXMuc2NvcmUsIGJ1ZmZlciwgYmFzZSwgdGhpcy5jdXJDb250ZXh0LCBwYXJlbnQpO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gcmVjb3ZlciBmcm9tIGFuIGVycm9yIGJ5ICdkZWxldGluZycgKGlnbm9yaW5nKSBvbmUgdG9rZW4uXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHJlY292ZXJCeURlbGV0ZShuZXh0LCBuZXh0RW5kKSB7XG4gICAgICAgIGxldCBpc05vZGUgPSBuZXh0IDw9IHRoaXMucC5wYXJzZXIubWF4Tm9kZTtcbiAgICAgICAgaWYgKGlzTm9kZSlcbiAgICAgICAgICAgIHRoaXMuc3RvcmVOb2RlKG5leHQsIHRoaXMucG9zLCBuZXh0RW5kKTtcbiAgICAgICAgdGhpcy5zdG9yZU5vZGUoMCAvKiBFcnIgKi8sIHRoaXMucG9zLCBuZXh0RW5kLCBpc05vZGUgPyA4IDogNCk7XG4gICAgICAgIHRoaXMucG9zID0gdGhpcy5yZWR1Y2VQb3MgPSBuZXh0RW5kO1xuICAgICAgICB0aGlzLnNjb3JlIC09IDIwMCAvKiBUb2tlbiAqLztcbiAgICB9XG4gICAgLy8vIENoZWNrIGlmIHRoZSBnaXZlbiB0ZXJtIHdvdWxkIGJlIGFibGUgdG8gYmUgc2hpZnRlZCAob3B0aW9uYWxseVxuICAgIC8vLyBhZnRlciBzb21lIHJlZHVjdGlvbnMpIG9uIHRoaXMgc3RhY2suIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3JcbiAgICAvLy8gZXh0ZXJuYWwgdG9rZW5pemVycyB0aGF0IHdhbnQgdG8gbWFrZSBzdXJlIHRoZXkgb25seSBwcm92aWRlIGFcbiAgICAvLy8gZ2l2ZW4gdG9rZW4gd2hlbiBpdCBhcHBsaWVzLlxuICAgIGNhblNoaWZ0KHRlcm0pIHtcbiAgICAgICAgZm9yIChsZXQgc2ltID0gbmV3IFNpbXVsYXRlZFN0YWNrKHRoaXMpOzspIHtcbiAgICAgICAgICAgIGxldCBhY3Rpb24gPSB0aGlzLnAucGFyc2VyLnN0YXRlU2xvdChzaW0udG9wLCA0IC8qIERlZmF1bHRSZWR1Y2UgKi8pIHx8IHRoaXMucC5wYXJzZXIuaGFzQWN0aW9uKHNpbS50b3AsIHRlcm0pO1xuICAgICAgICAgICAgaWYgKChhY3Rpb24gJiA2NTUzNiAvKiBSZWR1Y2VGbGFnICovKSA9PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHNpbS5yZWR1Y2UoYWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLy8gRmluZCB0aGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJ1bGUgdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgcGFyc2VkLlxuICAgIGdldCBydWxlU3RhcnQoKSB7XG4gICAgICAgIGZvciAobGV0IHN0YXRlID0gdGhpcy5zdGF0ZSwgYmFzZSA9IHRoaXMuc3RhY2subGVuZ3RoOzspIHtcbiAgICAgICAgICAgIGxldCBmb3JjZSA9IHRoaXMucC5wYXJzZXIuc3RhdGVTbG90KHN0YXRlLCA1IC8qIEZvcmNlZFJlZHVjZSAqLyk7XG4gICAgICAgICAgICBpZiAoIShmb3JjZSAmIDY1NTM2IC8qIFJlZHVjZUZsYWcgKi8pKVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgYmFzZSAtPSAzICogKGZvcmNlID4+IDE5IC8qIFJlZHVjZURlcHRoU2hpZnQgKi8pO1xuICAgICAgICAgICAgaWYgKChmb3JjZSAmIDY1NTM1IC8qIFZhbHVlTWFzayAqLykgPCB0aGlzLnAucGFyc2VyLm1pblJlcGVhdFRlcm0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbYmFzZSArIDFdO1xuICAgICAgICAgICAgc3RhdGUgPSB0aGlzLnN0YWNrW2Jhc2VdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vLyBGaW5kIHRoZSBzdGFydCBwb3NpdGlvbiBvZiBhbiBpbnN0YW5jZSBvZiBhbnkgb2YgdGhlIGdpdmVuIHRlcm1cbiAgICAvLy8gdHlwZXMsIG9yIHJldHVybiBgbnVsbGAgd2hlbiBub25lIG9mIHRoZW0gYXJlIGZvdW5kLlxuICAgIC8vL1xuICAgIC8vLyAqKk5vdGU6KiogdGhpcyBpcyBvbmx5IHJlbGlhYmxlIHdoZW4gdGhlcmUgaXMgYXQgbGVhc3Qgc29tZVxuICAgIC8vLyBzdGF0ZSB0aGF0IHVuYW1iaWd1b3VzbHkgbWF0Y2hlcyB0aGUgZ2l2ZW4gcnVsZSBvbiB0aGUgc3RhY2suXG4gICAgLy8vIEkuZS4gaWYgeW91IGhhdmUgYSBncmFtbWFyIGxpa2UgdGhpcywgd2hlcmUgdGhlIGRpZmZlcmVuY2VcbiAgICAvLy8gYmV0d2VlbiBgYWAgYW5kIGBiYCBpcyBvbmx5IGFwcGFyZW50IGF0IHRoZSB0aGlyZCB0b2tlbjpcbiAgICAvLy9cbiAgICAvLy8gICAgIGEgeyBiIHwgYyB9XG4gICAgLy8vICAgICBiIHsgXCJ4XCIgXCJ5XCIgXCJ4XCIgfVxuICAgIC8vLyAgICAgYyB7IFwieFwiIFwieVwiIFwielwiIH1cbiAgICAvLy9cbiAgICAvLy8gVGhlbiBhIHBhcnNlIHN0YXRlIGFmdGVyIGBcInhcImAgd2lsbCBub3QgcmVsaWFibHkgdGVsbCB5b3UgdGhhdFxuICAgIC8vLyBgYmAgaXMgb24gdGhlIHN0YWNrLiBZb3UgX2Nhbl8gcGFzcyBgW2IsIGNdYCB0byByZWxpYWJseSBjaGVja1xuICAgIC8vLyBmb3IgZWl0aGVyIG9mIHRob3NlIHR3byBydWxlcyAoYXNzdW1pbmcgdGhhdCBgYWAgaXNuJ3QgcGFydCBvZlxuICAgIC8vLyBzb21lIHJ1bGUgdGhhdCBpbmNsdWRlcyBvdGhlciB0aGluZ3Mgc3RhcnRpbmcgd2l0aCBgXCJ4XCJgKS5cbiAgICAvLy9cbiAgICAvLy8gV2hlbiBgYmVmb3JlYCBpcyBnaXZlbiwgdGhpcyBrZWVwcyBzY2FubmluZyB1cCB0aGUgc3RhY2sgdW50aWxcbiAgICAvLy8gaXQgZmluZHMgYSBtYXRjaCB0aGF0IHN0YXJ0cyBiZWZvcmUgdGhhdCBwb3NpdGlvbi5cbiAgICAvLy9cbiAgICAvLy8gTm90ZSB0aGF0IHlvdSBoYXZlIHRvIGJlIGNhcmVmdWwgd2hlbiB1c2luZyB0aGlzIGluIHRva2VuaXplcnMsXG4gICAgLy8vIHNpbmNlIGl0J3MgcmVsYXRpdmVseSBlYXN5IHRvIGludHJvZHVjZSBkYXRhIGRlcGVuZGVuY2llcyB0aGF0XG4gICAgLy8vIGJyZWFrIGluY3JlbWVudGFsIHBhcnNpbmcgYnkgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAgc3RhcnRPZih0eXBlcywgYmVmb3JlKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGUsIGZyYW1lID0gdGhpcy5zdGFjay5sZW5ndGgsIHsgcGFyc2VyIH0gPSB0aGlzLnA7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGxldCBmb3JjZSA9IHBhcnNlci5zdGF0ZVNsb3Qoc3RhdGUsIDUgLyogRm9yY2VkUmVkdWNlICovKTtcbiAgICAgICAgICAgIGxldCBkZXB0aCA9IGZvcmNlID4+IDE5IC8qIFJlZHVjZURlcHRoU2hpZnQgKi8sIHRlcm0gPSBmb3JjZSAmIDY1NTM1IC8qIFZhbHVlTWFzayAqLztcbiAgICAgICAgICAgIGlmICh0eXBlcy5pbmRleE9mKHRlcm0pID4gLTEpIHtcbiAgICAgICAgICAgICAgICBsZXQgYmFzZSA9IGZyYW1lIC0gKDMgKiAoZm9yY2UgPj4gMTkgLyogUmVkdWNlRGVwdGhTaGlmdCAqLykpLCBwb3MgPSB0aGlzLnN0YWNrW2Jhc2UgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAoYmVmb3JlID09IG51bGwgfHwgYmVmb3JlID4gcG9zKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZyYW1lID09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGZyYW1lIC09IDM7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzLnN0YWNrW2ZyYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZyYW1lIC09IDMgKiAoZGVwdGggLSAxKTtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHBhcnNlci5nZXRHb3RvKHRoaXMuc3RhY2tbZnJhbWUgLSAzXSwgdGVybSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQXBwbHkgdXAgdG8gUmVjb3Zlci5NYXhOZXh0IHJlY292ZXJ5IGFjdGlvbnMgdGhhdCBjb25jZXB0dWFsbHlcbiAgICAvLyBpbnNlcnRzIHNvbWUgbWlzc2luZyB0b2tlbiBvciBydWxlLlxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICByZWNvdmVyQnlJbnNlcnQobmV4dCkge1xuICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPj0gMzAwIC8qIE1heEluc2VydFN0YWNrRGVwdGggKi8pXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIGxldCBuZXh0U3RhdGVzID0gdGhpcy5wLnBhcnNlci5uZXh0U3RhdGVzKHRoaXMuc3RhdGUpO1xuICAgICAgICBpZiAobmV4dFN0YXRlcy5sZW5ndGggPiA0IC8qIE1heE5leHQgKi8gPDwgMSB8fCB0aGlzLnN0YWNrLmxlbmd0aCA+PSAxMjAgLyogRGFtcGVuSW5zZXJ0U3RhY2tEZXB0aCAqLykge1xuICAgICAgICAgICAgbGV0IGJlc3QgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBzOyBpIDwgbmV4dFN0YXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIGlmICgocyA9IG5leHRTdGF0ZXNbaSArIDFdKSAhPSB0aGlzLnN0YXRlICYmIHRoaXMucC5wYXJzZXIuaGFzQWN0aW9uKHMsIG5leHQpKVxuICAgICAgICAgICAgICAgICAgICBiZXN0LnB1c2gobmV4dFN0YXRlc1tpXSwgcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPCAxMjAgLyogRGFtcGVuSW5zZXJ0U3RhY2tEZXB0aCAqLylcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgYmVzdC5sZW5ndGggPCA0IC8qIE1heE5leHQgKi8gPDwgMSAmJiBpIDwgbmV4dFN0YXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IG5leHRTdGF0ZXNbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJlc3Quc29tZSgodiwgaSkgPT4gKGkgJiAxKSAmJiB2ID09IHMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdC5wdXNoKG5leHRTdGF0ZXNbaV0sIHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHRTdGF0ZXMgPSBiZXN0O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0U3RhdGVzLmxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgNCAvKiBNYXhOZXh0ICovOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGxldCBzID0gbmV4dFN0YXRlc1tpICsgMV07XG4gICAgICAgICAgICBpZiAocyA9PSB0aGlzLnN0YXRlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IHN0YWNrID0gdGhpcy5zcGxpdCgpO1xuICAgICAgICAgICAgc3RhY2suc3RvcmVOb2RlKDAgLyogRXJyICovLCBzdGFjay5wb3MsIHN0YWNrLnBvcywgNCwgdHJ1ZSk7XG4gICAgICAgICAgICBzdGFjay5wdXNoU3RhdGUocywgdGhpcy5wb3MpO1xuICAgICAgICAgICAgc3RhY2suc2hpZnRDb250ZXh0KG5leHRTdGF0ZXNbaV0pO1xuICAgICAgICAgICAgc3RhY2suc2NvcmUgLT0gMjAwIC8qIFRva2VuICovO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIEZvcmNlIGEgcmVkdWNlLCBpZiBwb3NzaWJsZS4gUmV0dXJuIGZhbHNlIGlmIHRoYXQgY2FuJ3RcbiAgICAvLyBiZSBkb25lLlxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBmb3JjZVJlZHVjZSgpIHtcbiAgICAgICAgbGV0IHJlZHVjZSA9IHRoaXMucC5wYXJzZXIuc3RhdGVTbG90KHRoaXMuc3RhdGUsIDUgLyogRm9yY2VkUmVkdWNlICovKTtcbiAgICAgICAgaWYgKChyZWR1Y2UgJiA2NTUzNiAvKiBSZWR1Y2VGbGFnICovKSA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIXRoaXMucC5wYXJzZXIudmFsaWRBY3Rpb24odGhpcy5zdGF0ZSwgcmVkdWNlKSkge1xuICAgICAgICAgICAgdGhpcy5zdG9yZU5vZGUoMCAvKiBFcnIgKi8sIHRoaXMucmVkdWNlUG9zLCB0aGlzLnJlZHVjZVBvcywgNCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNjb3JlIC09IDEwMCAvKiBSZWR1Y2UgKi87XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWR1Y2UocmVkdWNlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBmb3JjZUFsbCgpIHtcbiAgICAgICAgd2hpbGUgKCF0aGlzLnAucGFyc2VyLnN0YXRlRmxhZyh0aGlzLnN0YXRlLCAyIC8qIEFjY2VwdGluZyAqLykgJiYgdGhpcy5mb3JjZVJlZHVjZSgpKSB7IH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vLyBDaGVjayB3aGV0aGVyIHRoaXMgc3RhdGUgaGFzIG5vIGZ1cnRoZXIgYWN0aW9ucyAoYXNzdW1lZCB0byBiZSBhIGRpcmVjdCBkZXNjZW5kYW50IG9mIHRoZVxuICAgIC8vLyB0b3Agc3RhdGUsIHNpbmNlIGFueSBvdGhlciBzdGF0ZXMgbXVzdCBiZSBhYmxlIHRvIGNvbnRpbnVlXG4gICAgLy8vIHNvbWVob3cpLiBAaW50ZXJuYWxcbiAgICBnZXQgZGVhZEVuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoICE9IDMpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCB7IHBhcnNlciB9ID0gdGhpcy5wO1xuICAgICAgICByZXR1cm4gcGFyc2VyLmRhdGFbcGFyc2VyLnN0YXRlU2xvdCh0aGlzLnN0YXRlLCAxIC8qIEFjdGlvbnMgKi8pXSA9PSA2NTUzNSAvKiBFbmQgKi8gJiZcbiAgICAgICAgICAgICFwYXJzZXIuc3RhdGVTbG90KHRoaXMuc3RhdGUsIDQgLyogRGVmYXVsdFJlZHVjZSAqLyk7XG4gICAgfVxuICAgIC8vLyBSZXN0YXJ0IHRoZSBzdGFjayAocHV0IGl0IGJhY2sgaW4gaXRzIHN0YXJ0IHN0YXRlKS4gT25seSBzYWZlXG4gICAgLy8vIHdoZW4gdGhpcy5zdGFjay5sZW5ndGggPT0gMyAoc3RhdGUgaXMgZGlyZWN0bHkgYmVsb3cgdGhlIHRvcFxuICAgIC8vLyBzdGF0ZSkuIEBpbnRlcm5hbFxuICAgIHJlc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnN0YWNrWzBdO1xuICAgICAgICB0aGlzLnN0YWNrLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBzYW1lU3RhdGUob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT0gb3RoZXIuc3RhdGUgfHwgdGhpcy5zdGFjay5sZW5ndGggIT0gb3RoZXIuc3RhY2subGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhY2subGVuZ3RoOyBpICs9IDMpXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFja1tpXSAhPSBvdGhlci5zdGFja1tpXSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLy8gR2V0IHRoZSBwYXJzZXIgdXNlZCBieSB0aGlzIHN0YWNrLlxuICAgIGdldCBwYXJzZXIoKSB7IHJldHVybiB0aGlzLnAucGFyc2VyOyB9XG4gICAgLy8vIFRlc3Qgd2hldGhlciBhIGdpdmVuIGRpYWxlY3QgKGJ5IG51bWVyaWMgSUQsIGFzIGV4cG9ydGVkIGZyb21cbiAgICAvLy8gdGhlIHRlcm1zIGZpbGUpIGlzIGVuYWJsZWQuXG4gICAgZGlhbGVjdEVuYWJsZWQoZGlhbGVjdElEKSB7IHJldHVybiB0aGlzLnAucGFyc2VyLmRpYWxlY3QuZmxhZ3NbZGlhbGVjdElEXTsgfVxuICAgIHNoaWZ0Q29udGV4dCh0ZXJtKSB7XG4gICAgICAgIGlmICh0aGlzLmN1ckNvbnRleHQpXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHQodGhpcy5jdXJDb250ZXh0LnRyYWNrZXIuc2hpZnQodGhpcy5jdXJDb250ZXh0LmNvbnRleHQsIHRlcm0sIHRoaXMucC5pbnB1dCwgdGhpcykpO1xuICAgIH1cbiAgICByZWR1Y2VDb250ZXh0KHRlcm0pIHtcbiAgICAgICAgaWYgKHRoaXMuY3VyQ29udGV4dClcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGV4dCh0aGlzLmN1ckNvbnRleHQudHJhY2tlci5yZWR1Y2UodGhpcy5jdXJDb250ZXh0LmNvbnRleHQsIHRlcm0sIHRoaXMucC5pbnB1dCwgdGhpcykpO1xuICAgIH1cbiAgICAvLy8gQGludGVybmFsXG4gICAgZW1pdENvbnRleHQoKSB7XG4gICAgICAgIGxldCBjeCA9IHRoaXMuY3VyQ29udGV4dDtcbiAgICAgICAgaWYgKCFjeC50cmFja2VyLnN0cmljdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IGxhc3QgPSB0aGlzLmJ1ZmZlci5sZW5ndGggLSAxO1xuICAgICAgICBpZiAobGFzdCA8IDAgfHwgdGhpcy5idWZmZXJbbGFzdF0gIT0gLTIpXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGN4Lmhhc2gsIHRoaXMucmVkdWNlUG9zLCB0aGlzLnJlZHVjZVBvcywgLTIpO1xuICAgIH1cbiAgICB1cGRhdGVDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgIT0gdGhpcy5jdXJDb250ZXh0LmNvbnRleHQpIHtcbiAgICAgICAgICAgIGxldCBuZXdDeCA9IG5ldyBTdGFja0NvbnRleHQodGhpcy5jdXJDb250ZXh0LnRyYWNrZXIsIGNvbnRleHQpO1xuICAgICAgICAgICAgaWYgKG5ld0N4Lmhhc2ggIT0gdGhpcy5jdXJDb250ZXh0Lmhhc2gpXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q29udGV4dCgpO1xuICAgICAgICAgICAgdGhpcy5jdXJDb250ZXh0ID0gbmV3Q3g7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBTdGFja0NvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHRyYWNrZXIsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy50cmFja2VyID0gdHJhY2tlcjtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5oYXNoID0gdHJhY2tlci5oYXNoKGNvbnRleHQpO1xuICAgIH1cbn1cbnZhciBSZWNvdmVyO1xuKGZ1bmN0aW9uIChSZWNvdmVyKSB7XG4gICAgUmVjb3ZlcltSZWNvdmVyW1wiVG9rZW5cIl0gPSAyMDBdID0gXCJUb2tlblwiO1xuICAgIFJlY292ZXJbUmVjb3ZlcltcIlJlZHVjZVwiXSA9IDEwMF0gPSBcIlJlZHVjZVwiO1xuICAgIFJlY292ZXJbUmVjb3ZlcltcIk1heE5leHRcIl0gPSA0XSA9IFwiTWF4TmV4dFwiO1xuICAgIFJlY292ZXJbUmVjb3ZlcltcIk1heEluc2VydFN0YWNrRGVwdGhcIl0gPSAzMDBdID0gXCJNYXhJbnNlcnRTdGFja0RlcHRoXCI7XG4gICAgUmVjb3ZlcltSZWNvdmVyW1wiRGFtcGVuSW5zZXJ0U3RhY2tEZXB0aFwiXSA9IDEyMF0gPSBcIkRhbXBlbkluc2VydFN0YWNrRGVwdGhcIjtcbn0pKFJlY292ZXIgfHwgKFJlY292ZXIgPSB7fSkpO1xuLy8gVXNlZCB0byBjaGVhcGx5IHJ1biBzb21lIHJlZHVjdGlvbnMgdG8gc2NhbiBhaGVhZCB3aXRob3V0IG11dGF0aW5nXG4vLyBhbiBlbnRpcmUgc3RhY2tcbmNsYXNzIFNpbXVsYXRlZFN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcihzdGFjaykge1xuICAgICAgICB0aGlzLnN0YWNrID0gc3RhY2s7XG4gICAgICAgIHRoaXMudG9wID0gc3RhY2suc3RhdGU7XG4gICAgICAgIHRoaXMucmVzdCA9IHN0YWNrLnN0YWNrO1xuICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMucmVzdC5sZW5ndGg7XG4gICAgfVxuICAgIHJlZHVjZShhY3Rpb24pIHtcbiAgICAgICAgbGV0IHRlcm0gPSBhY3Rpb24gJiA2NTUzNSAvKiBWYWx1ZU1hc2sgKi8sIGRlcHRoID0gYWN0aW9uID4+IDE5IC8qIFJlZHVjZURlcHRoU2hpZnQgKi87XG4gICAgICAgIGlmIChkZXB0aCA9PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN0ID09IHRoaXMuc3RhY2suc3RhY2spXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN0ID0gdGhpcy5yZXN0LnNsaWNlKCk7XG4gICAgICAgICAgICB0aGlzLnJlc3QucHVzaCh0aGlzLnRvcCwgMCwgMCk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgLT0gKGRlcHRoIC0gMSkgKiAzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBnb3RvID0gdGhpcy5zdGFjay5wLnBhcnNlci5nZXRHb3RvKHRoaXMucmVzdFt0aGlzLm9mZnNldCAtIDNdLCB0ZXJtLCB0cnVlKTtcbiAgICAgICAgdGhpcy50b3AgPSBnb3RvO1xuICAgIH1cbn1cbi8vIFRoaXMgaXMgZ2l2ZW4gdG8gYFRyZWUuYnVpbGRgIHRvIGJ1aWxkIGEgYnVmZmVyLCBhbmQgZW5jYXBzdWxhdGVzXG4vLyB0aGUgcGFyZW50LXN0YWNrLXdhbGtpbmcgbmVjZXNzYXJ5IHRvIHJlYWQgdGhlIG5vZGVzLlxuY2xhc3MgU3RhY2tCdWZmZXJDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKHN0YWNrLCBwb3MsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBzdGFjay5idWZmZXI7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ID09IDApXG4gICAgICAgICAgICB0aGlzLm1heWJlTmV4dCgpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKHN0YWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RhY2tCdWZmZXJDdXJzb3Ioc3RhY2ssIHN0YWNrLmJ1ZmZlckJhc2UgKyBzdGFjay5idWZmZXIubGVuZ3RoLCBzdGFjay5idWZmZXIubGVuZ3RoKTtcbiAgICB9XG4gICAgbWF5YmVOZXh0KCkge1xuICAgICAgICBsZXQgbmV4dCA9IHRoaXMuc3RhY2sucGFyZW50O1xuICAgICAgICBpZiAobmV4dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5zdGFjay5idWZmZXJCYXNlIC0gbmV4dC5idWZmZXJCYXNlO1xuICAgICAgICAgICAgdGhpcy5zdGFjayA9IG5leHQ7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5leHQuYnVmZmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpZCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSA0XTsgfVxuICAgIGdldCBzdGFydCgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAzXTsgfVxuICAgIGdldCBlbmQoKSB7IHJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLmluZGV4IC0gMl07IH1cbiAgICBnZXQgc2l6ZSgpIHsgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMuaW5kZXggLSAxXTsgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIHRoaXMuaW5kZXggLT0gNDtcbiAgICAgICAgdGhpcy5wb3MgLT0gNDtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPT0gMClcbiAgICAgICAgICAgIHRoaXMubWF5YmVOZXh0KCk7XG4gICAgfVxuICAgIGZvcmsoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RhY2tCdWZmZXJDdXJzb3IodGhpcy5zdGFjaywgdGhpcy5wb3MsIHRoaXMuaW5kZXgpO1xuICAgIH1cbn1cblxuLy8vIFRva2VuaXplcnMgd3JpdGUgdGhlIHRva2VucyB0aGV5IHJlYWQgaW50byBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcy5cbmNsYXNzIFRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8vIFRoZSBzdGFydCBvZiB0aGUgdG9rZW4uIFRoaXMgaXMgc2V0IGJ5IHRoZSBwYXJzZXIsIGFuZCBzaG91bGQgbm90XG4gICAgICAgIC8vLyBiZSBtdXRhdGVkIGJ5IHRoZSB0b2tlbml6ZXIuXG4gICAgICAgIHRoaXMuc3RhcnQgPSAtMTtcbiAgICAgICAgLy8vIFRoaXMgc3RhcnRzIGF0IC0xLCBhbmQgc2hvdWxkIGJlIHVwZGF0ZWQgdG8gYSB0ZXJtIGlkIHdoZW4gYVxuICAgICAgICAvLy8gbWF0Y2hpbmcgdG9rZW4gaXMgZm91bmQuXG4gICAgICAgIHRoaXMudmFsdWUgPSAtMTtcbiAgICAgICAgLy8vIFdoZW4gc2V0dGluZyBgLnZhbHVlYCwgeW91IHNob3VsZCBhbHNvIHNldCBgLmVuZGAgdG8gdGhlIGVuZFxuICAgICAgICAvLy8gcG9zaXRpb24gb2YgdGhlIHRva2VuLiAoWW91J2xsIHVzdWFsbHkgd2FudCB0byB1c2UgdGhlIGBhY2NlcHRgXG4gICAgICAgIC8vLyBtZXRob2QuKVxuICAgICAgICB0aGlzLmVuZCA9IC0xO1xuICAgIH1cbiAgICAvLy8gQWNjZXB0IGEgdG9rZW4sIHNldHRpbmcgYHZhbHVlYCBhbmQgYGVuZGAgdG8gdGhlIGdpdmVuIHZhbHVlcy5cbiAgICBhY2NlcHQodmFsdWUsIGVuZCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cbn1cbi8vLyBAaW50ZXJuYWxcbmNsYXNzIFRva2VuR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGlkKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICB9XG4gICAgdG9rZW4oaW5wdXQsIHRva2VuLCBzdGFjaykgeyByZWFkVG9rZW4odGhpcy5kYXRhLCBpbnB1dCwgdG9rZW4sIHN0YWNrLCB0aGlzLmlkKTsgfVxufVxuVG9rZW5Hcm91cC5wcm90b3R5cGUuY29udGV4dHVhbCA9IFRva2VuR3JvdXAucHJvdG90eXBlLmZhbGxiYWNrID0gVG9rZW5Hcm91cC5wcm90b3R5cGUuZXh0ZW5kID0gZmFsc2U7XG4vLy8gRXhwb3J0cyB0aGF0IGFyZSB1c2VkIGZvciBgQGV4dGVybmFsIHRva2Vuc2AgaW4gdGhlIGdyYW1tYXIgc2hvdWxkXG4vLy8gZXhwb3J0IGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG5jbGFzcyBFeHRlcm5hbFRva2VuaXplciB7XG4gICAgLy8vIENyZWF0ZSBhIHRva2VuaXplci4gVGhlIGZpcnN0IGFyZ3VtZW50IGlzIHRoZSBmdW5jdGlvbiB0aGF0LFxuICAgIC8vLyBnaXZlbiBhbiBpbnB1dCBzdHJlYW0gYW5kIGEgdG9rZW4gb2JqZWN0LFxuICAgIC8vLyBbZmlsbHNdKCNsZXplci5Ub2tlbi5hY2NlcHQpIHRoZSB0b2tlbiBvYmplY3QgaWYgaXQgcmVjb2duaXplcyBhXG4gICAgLy8vIHRva2VuLiBgdG9rZW4uc3RhcnRgIHNob3VsZCBiZSB1c2VkIGFzIHRoZSBzdGFydCBwb3NpdGlvbiB0b1xuICAgIC8vLyBzY2FuIGZyb20uXG4gICAgY29uc3RydWN0b3IoXG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHRva2VuLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLmNvbnRleHR1YWwgPSAhIW9wdGlvbnMuY29udGV4dHVhbDtcbiAgICAgICAgdGhpcy5mYWxsYmFjayA9ICEhb3B0aW9ucy5mYWxsYmFjaztcbiAgICAgICAgdGhpcy5leHRlbmQgPSAhIW9wdGlvbnMuZXh0ZW5kO1xuICAgIH1cbn1cbi8vIFRva2VuaXplciBkYXRhIGlzIHN0b3JlZCBhIGJpZyB1aW50MTYgYXJyYXkgY29udGFpbmluZywgZm9yIGVhY2hcbi8vIHN0YXRlOlxuLy9cbi8vICAtIEEgZ3JvdXAgYml0bWFzaywgaW5kaWNhdGluZyB3aGF0IHRva2VuIGdyb3VwcyBhcmUgcmVhY2hhYmxlIGZyb21cbi8vICAgIHRoaXMgc3RhdGUsIHNvIHRoYXQgcGF0aHMgdGhhdCBjYW4gb25seSBsZWFkIHRvIHRva2VucyBub3QgaW5cbi8vICAgIGFueSBvZiB0aGUgY3VycmVudCBncm91cHMgY2FuIGJlIGN1dCBvZmYgZWFybHkuXG4vL1xuLy8gIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBlbmQgb2YgdGhlIHN0YXRlJ3Mgc2VxdWVuY2Ugb2YgYWNjZXB0aW5nXG4vLyAgICB0b2tlbnNcbi8vXG4vLyAgLSBUaGUgbnVtYmVyIG9mIG91dGdvaW5nIGVkZ2VzIGZvciB0aGUgc3RhdGVcbi8vXG4vLyAgLSBUaGUgYWNjZXB0aW5nIHRva2VucywgYXMgKHRva2VuIGlkLCBncm91cCBtYXNrKSBwYWlyc1xuLy9cbi8vICAtIFRoZSBvdXRnb2luZyBlZGdlcywgYXMgKHN0YXJ0IGNoYXJhY3RlciwgZW5kIGNoYXJhY3Rlciwgc3RhdGVcbi8vICAgIGluZGV4KSB0cmlwbGVzLCB3aXRoIGVuZCBjaGFyYWN0ZXIgYmVpbmcgZXhjbHVzaXZlXG4vL1xuLy8gVGhpcyBmdW5jdGlvbiBpbnRlcnByZXRzIHRoYXQgZGF0YSwgcnVubmluZyB0aHJvdWdoIGEgc3RyZWFtIGFzXG4vLyBsb25nIGFzIG5ldyBzdGF0ZXMgd2l0aCB0aGUgYSBtYXRjaGluZyBncm91cCBtYXNrIGNhbiBiZSByZWFjaGVkLFxuLy8gYW5kIHVwZGF0aW5nIGB0b2tlbmAgd2hlbiBpdCBtYXRjaGVzIGEgdG9rZW4uXG5mdW5jdGlvbiByZWFkVG9rZW4oZGF0YSwgaW5wdXQsIHRva2VuLCBzdGFjaywgZ3JvdXApIHtcbiAgICBsZXQgc3RhdGUgPSAwLCBncm91cE1hc2sgPSAxIDw8IGdyb3VwLCBkaWFsZWN0ID0gc3RhY2sucC5wYXJzZXIuZGlhbGVjdDtcbiAgICBzY2FuOiBmb3IgKGxldCBwb3MgPSB0b2tlbi5zdGFydDs7KSB7XG4gICAgICAgIGlmICgoZ3JvdXBNYXNrICYgZGF0YVtzdGF0ZV0pID09IDApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbGV0IGFjY0VuZCA9IGRhdGFbc3RhdGUgKyAxXTtcbiAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGlzIHN0YXRlIGNhbiBsZWFkIHRvIGEgdG9rZW4gaW4gdGhlIGN1cnJlbnQgZ3JvdXBcbiAgICAgICAgLy8gQWNjZXB0IHRva2VucyBpbiB0aGlzIHN0YXRlLCBwb3NzaWJseSBvdmVyd3JpdGluZ1xuICAgICAgICAvLyBsb3dlci1wcmVjZWRlbmNlIC8gc2hvcnRlciB0b2tlbnNcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXRlICsgMzsgaSA8IGFjY0VuZDsgaSArPSAyKVxuICAgICAgICAgICAgaWYgKChkYXRhW2kgKyAxXSAmIGdyb3VwTWFzaykgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRlcm0gPSBkYXRhW2ldO1xuICAgICAgICAgICAgICAgIGlmIChkaWFsZWN0LmFsbG93cyh0ZXJtKSAmJlxuICAgICAgICAgICAgICAgICAgICAodG9rZW4udmFsdWUgPT0gLTEgfHwgdG9rZW4udmFsdWUgPT0gdGVybSB8fCBzdGFjay5wLnBhcnNlci5vdmVycmlkZXModGVybSwgdG9rZW4udmFsdWUpKSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5hY2NlcHQodGVybSwgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBsZXQgbmV4dCA9IGlucHV0LmdldChwb3MrKyk7XG4gICAgICAgIC8vIERvIGEgYmluYXJ5IHNlYXJjaCBvbiB0aGUgc3RhdGUncyBlZGdlc1xuICAgICAgICBmb3IgKGxldCBsb3cgPSAwLCBoaWdoID0gZGF0YVtzdGF0ZSArIDJdOyBsb3cgPCBoaWdoOykge1xuICAgICAgICAgICAgbGV0IG1pZCA9IChsb3cgKyBoaWdoKSA+PiAxO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gYWNjRW5kICsgbWlkICsgKG1pZCA8PCAxKTtcbiAgICAgICAgICAgIGxldCBmcm9tID0gZGF0YVtpbmRleF0sIHRvID0gZGF0YVtpbmRleCArIDFdO1xuICAgICAgICAgICAgaWYgKG5leHQgPCBmcm9tKVxuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgICBlbHNlIGlmIChuZXh0ID49IHRvKVxuICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGRhdGFbaW5kZXggKyAyXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZSBzY2FuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxuLy8gU2VlIGxlemVyLWdlbmVyYXRvci9zcmMvZW5jb2RlLnRzIGZvciBjb21tZW50cyBhYm91dCB0aGUgZW5jb2Rpbmdcbi8vIHVzZWQgaGVyZVxuZnVuY3Rpb24gZGVjb2RlQXJyYXkoaW5wdXQsIFR5cGUgPSBVaW50MTZBcnJheSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIGxldCBhcnJheSA9IG51bGw7XG4gICAgZm9yIChsZXQgcG9zID0gMCwgb3V0ID0gMDsgcG9zIDwgaW5wdXQubGVuZ3RoOykge1xuICAgICAgICBsZXQgdmFsdWUgPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQocG9zKyspLCBzdG9wID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAobmV4dCA9PSAxMjYgLyogQmlnVmFsQ29kZSAqLykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gNjU1MzUgLyogQmlnVmFsICovO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHQgPj0gOTIgLyogR2FwMiAqLylcbiAgICAgICAgICAgICAgICBuZXh0LS07XG4gICAgICAgICAgICBpZiAobmV4dCA+PSAzNCAvKiBHYXAxICovKVxuICAgICAgICAgICAgICAgIG5leHQtLTtcbiAgICAgICAgICAgIGxldCBkaWdpdCA9IG5leHQgLSAzMiAvKiBTdGFydCAqLztcbiAgICAgICAgICAgIGlmIChkaWdpdCA+PSA0NiAvKiBCYXNlICovKSB7XG4gICAgICAgICAgICAgICAgZGlnaXQgLT0gNDYgLyogQmFzZSAqLztcbiAgICAgICAgICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlICs9IGRpZ2l0O1xuICAgICAgICAgICAgaWYgKHN0b3ApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB2YWx1ZSAqPSA0NiAvKiBCYXNlICovO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcnJheSlcbiAgICAgICAgICAgIGFycmF5W291dCsrXSA9IHZhbHVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhcnJheSA9IG5ldyBUeXBlKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vLyBGSVhNRSBmaW5kIHNvbWUgd2F5IHRvIHJlZHVjZSByZWNvdmVyeSB3b3JrIGRvbmUgd2hlbiB0aGUgaW5wdXRcbi8vIGRvZXNuJ3QgbWF0Y2ggdGhlIGdyYW1tYXIgYXQgYWxsLlxuLy8gRW52aXJvbm1lbnQgdmFyaWFibGUgdXNlZCB0byBjb250cm9sIGNvbnNvbGUgb3V0cHV0XG5jb25zdCB2ZXJib3NlID0gdHlwZW9mIHByb2Nlc3MgIT0gXCJ1bmRlZmluZWRcIiAmJiAvXFxicGFyc2VcXGIvLnRlc3QocHJvY2Vzcy5lbnYuTE9HKTtcbmxldCBzdGFja0lEcyA9IG51bGw7XG5mdW5jdGlvbiBjdXRBdCh0cmVlLCBwb3MsIHNpZGUpIHtcbiAgICBsZXQgY3Vyc29yID0gdHJlZS5jdXJzb3IocG9zKTtcbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmICghKHNpZGUgPCAwID8gY3Vyc29yLmNoaWxkQmVmb3JlKHBvcykgOiBjdXJzb3IuY2hpbGRBZnRlcihwb3MpKSlcbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBpZiAoKHNpZGUgPCAwID8gY3Vyc29yLnRvIDwgcG9zIDogY3Vyc29yLmZyb20gPiBwb3MpICYmICFjdXJzb3IudHlwZS5pc0Vycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2lkZSA8IDAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbihjdXJzb3IudG8gLSAxLCBwb3MgLSA1KSkgOiBNYXRoLm1pbih0cmVlLmxlbmd0aCwgTWF0aC5tYXgoY3Vyc29yLmZyb20gKyAxLCBwb3MgKyA1KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNpZGUgPCAwID8gY3Vyc29yLnByZXZTaWJsaW5nKCkgOiBjdXJzb3IubmV4dFNpYmxpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJzb3IucGFyZW50KCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWRlIDwgMCA/IDAgOiB0cmVlLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBGcmFnbWVudEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoZnJhZ21lbnRzKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRzID0gZnJhZ21lbnRzO1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zYWZlRnJvbSA9IC0xO1xuICAgICAgICB0aGlzLnNhZmVUbyA9IC0xO1xuICAgICAgICB0aGlzLnRyZWVzID0gW107XG4gICAgICAgIHRoaXMuc3RhcnQgPSBbXTtcbiAgICAgICAgdGhpcy5pbmRleCA9IFtdO1xuICAgICAgICB0aGlzLm5leHRGcmFnbWVudCgpO1xuICAgIH1cbiAgICBuZXh0RnJhZ21lbnQoKSB7XG4gICAgICAgIGxldCBmciA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLmkgPT0gdGhpcy5mcmFnbWVudHMubGVuZ3RoID8gbnVsbCA6IHRoaXMuZnJhZ21lbnRzW3RoaXMuaSsrXTtcbiAgICAgICAgaWYgKGZyKSB7XG4gICAgICAgICAgICB0aGlzLnNhZmVGcm9tID0gZnIub3BlblN0YXJ0ID8gY3V0QXQoZnIudHJlZSwgZnIuZnJvbSArIGZyLm9mZnNldCwgMSkgLSBmci5vZmZzZXQgOiBmci5mcm9tO1xuICAgICAgICAgICAgdGhpcy5zYWZlVG8gPSBmci5vcGVuRW5kID8gY3V0QXQoZnIudHJlZSwgZnIudG8gKyBmci5vZmZzZXQsIC0xKSAtIGZyLm9mZnNldCA6IGZyLnRvO1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMudHJlZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmVlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0LnBvcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRyZWVzLnB1c2goZnIudHJlZSk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0LnB1c2goLWZyLm9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLmluZGV4LnB1c2goMCk7XG4gICAgICAgICAgICB0aGlzLm5leHRTdGFydCA9IHRoaXMuc2FmZUZyb207XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5leHRTdGFydCA9IDFlOTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBgcG9zYCBtdXN0IGJlID49IGFueSBwcmV2aW91c2x5IGdpdmVuIGBwb3NgIGZvciB0aGlzIGN1cnNvclxuICAgIG5vZGVBdChwb3MpIHtcbiAgICAgICAgaWYgKHBvcyA8IHRoaXMubmV4dFN0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHdoaWxlICh0aGlzLmZyYWdtZW50ICYmIHRoaXMuc2FmZVRvIDw9IHBvcylcbiAgICAgICAgICAgIHRoaXMubmV4dEZyYWdtZW50KCk7XG4gICAgICAgIGlmICghdGhpcy5mcmFnbWVudClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMudHJlZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmIChsYXN0IDwgMCkgeyAvLyBFbmQgb2YgdHJlZVxuICAgICAgICAgICAgICAgIHRoaXMubmV4dEZyYWdtZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdG9wID0gdGhpcy50cmVlc1tsYXN0XSwgaW5kZXggPSB0aGlzLmluZGV4W2xhc3RdO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09IHRvcC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQucG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleC5wb3AoKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXh0ID0gdG9wLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMuc3RhcnRbbGFzdF0gKyB0b3AucG9zaXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChzdGFydCA+IHBvcykge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dFN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydCA9PSBwb3MgJiYgc3RhcnQgKyBuZXh0Lmxlbmd0aCA8PSB0aGlzLnNhZmVUbykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydCA9PSBwb3MgJiYgc3RhcnQgPj0gdGhpcy5zYWZlRnJvbSA/IG5leHQgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBsZXplclRyZWUuVHJlZUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhbbGFzdF0rKztcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRTdGFydCA9IHN0YXJ0ICsgbmV4dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4W2xhc3RdKys7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ICsgbmV4dC5sZW5ndGggPj0gcG9zKSB7IC8vIEVudGVyIHRoaXMgbm9kZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVzLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQucHVzaChzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgucHVzaCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBDYWNoZWRUb2tlbiBleHRlbmRzIFRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5leHRlbmRlZCA9IC0xO1xuICAgICAgICB0aGlzLm1hc2sgPSAwO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSAwO1xuICAgIH1cbiAgICBjbGVhcihzdGFydCkge1xuICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmV4dGVuZGVkID0gLTE7XG4gICAgfVxufVxuY29uc3QgZHVtbXlUb2tlbiA9IG5ldyBUb2tlbjtcbmNsYXNzIFRva2VuQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlcikge1xuICAgICAgICB0aGlzLnRva2VucyA9IFtdO1xuICAgICAgICB0aGlzLm1haW5Ub2tlbiA9IGR1bW15VG9rZW47XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLnRva2VucyA9IHBhcnNlci50b2tlbml6ZXJzLm1hcChfID0+IG5ldyBDYWNoZWRUb2tlbik7XG4gICAgfVxuICAgIGdldEFjdGlvbnMoc3RhY2ssIGlucHV0KSB7XG4gICAgICAgIGxldCBhY3Rpb25JbmRleCA9IDA7XG4gICAgICAgIGxldCBtYWluID0gbnVsbDtcbiAgICAgICAgbGV0IHsgcGFyc2VyIH0gPSBzdGFjay5wLCB7IHRva2VuaXplcnMgfSA9IHBhcnNlcjtcbiAgICAgICAgbGV0IG1hc2sgPSBwYXJzZXIuc3RhdGVTbG90KHN0YWNrLnN0YXRlLCAzIC8qIFRva2VuaXplck1hc2sgKi8pO1xuICAgICAgICBsZXQgY29udGV4dCA9IHN0YWNrLmN1ckNvbnRleHQgPyBzdGFjay5jdXJDb250ZXh0Lmhhc2ggOiAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoKDEgPDwgaSkgJiBtYXNrKSA9PSAwKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IHRva2VuaXplciA9IHRva2VuaXplcnNbaV0sIHRva2VuID0gdGhpcy50b2tlbnNbaV07XG4gICAgICAgICAgICBpZiAobWFpbiAmJiAhdG9rZW5pemVyLmZhbGxiYWNrKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHRva2VuaXplci5jb250ZXh0dWFsIHx8IHRva2VuLnN0YXJ0ICE9IHN0YWNrLnBvcyB8fCB0b2tlbi5tYXNrICE9IG1hc2sgfHwgdG9rZW4uY29udGV4dCAhPSBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDYWNoZWRUb2tlbih0b2tlbiwgdG9rZW5pemVyLCBzdGFjaywgaW5wdXQpO1xuICAgICAgICAgICAgICAgIHRva2VuLm1hc2sgPSBtYXNrO1xuICAgICAgICAgICAgICAgIHRva2VuLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlICE9IDAgLyogRXJyICovKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBhY3Rpb25JbmRleDtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4uZXh0ZW5kZWQgPiAtMSlcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uSW5kZXggPSB0aGlzLmFkZEFjdGlvbnMoc3RhY2ssIHRva2VuLmV4dGVuZGVkLCB0b2tlbi5lbmQsIGFjdGlvbkluZGV4KTtcbiAgICAgICAgICAgICAgICBhY3Rpb25JbmRleCA9IHRoaXMuYWRkQWN0aW9ucyhzdGFjaywgdG9rZW4udmFsdWUsIHRva2VuLmVuZCwgYWN0aW9uSW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmICghdG9rZW5pemVyLmV4dGVuZCkge1xuICAgICAgICAgICAgICAgICAgICBtYWluID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb25JbmRleCA+IHN0YXJ0SW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHRoaXMuYWN0aW9ucy5sZW5ndGggPiBhY3Rpb25JbmRleClcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucy5wb3AoKTtcbiAgICAgICAgaWYgKCFtYWluKSB7XG4gICAgICAgICAgICBtYWluID0gZHVtbXlUb2tlbjtcbiAgICAgICAgICAgIG1haW4uc3RhcnQgPSBzdGFjay5wb3M7XG4gICAgICAgICAgICBpZiAoc3RhY2sucG9zID09IGlucHV0Lmxlbmd0aClcbiAgICAgICAgICAgICAgICBtYWluLmFjY2VwdChzdGFjay5wLnBhcnNlci5lb2ZUZXJtLCBzdGFjay5wb3MpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG1haW4uYWNjZXB0KDAgLyogRXJyICovLCBzdGFjay5wb3MgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1haW5Ub2tlbiA9IG1haW47XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbnM7XG4gICAgfVxuICAgIHVwZGF0ZUNhY2hlZFRva2VuKHRva2VuLCB0b2tlbml6ZXIsIHN0YWNrLCBpbnB1dCkge1xuICAgICAgICB0b2tlbi5jbGVhcihzdGFjay5wb3MpO1xuICAgICAgICB0b2tlbml6ZXIudG9rZW4oaW5wdXQsIHRva2VuLCBzdGFjayk7XG4gICAgICAgIGlmICh0b2tlbi52YWx1ZSA+IC0xKSB7XG4gICAgICAgICAgICBsZXQgeyBwYXJzZXIgfSA9IHN0YWNrLnA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlci5zcGVjaWFsaXplZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VyLnNwZWNpYWxpemVkW2ldID09IHRva2VuLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBwYXJzZXIuc3BlY2lhbGl6ZXJzW2ldKGlucHV0LnJlYWQodG9rZW4uc3RhcnQsIHRva2VuLmVuZCksIHN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA+PSAwICYmIHN0YWNrLnAucGFyc2VyLmRpYWxlY3QuYWxsb3dzKHJlc3VsdCA+PiAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyZXN1bHQgJiAxKSA9PSAwIC8qIFNwZWNpYWxpemUgKi8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4udmFsdWUgPSByZXN1bHQgPj4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5leHRlbmRlZCA9IHJlc3VsdCA+PiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhY2sucG9zID09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdG9rZW4uYWNjZXB0KHN0YWNrLnAucGFyc2VyLmVvZlRlcm0sIHN0YWNrLnBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b2tlbi5hY2NlcHQoMCAvKiBFcnIgKi8sIHN0YWNrLnBvcyArIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1dEFjdGlvbihhY3Rpb24sIHRva2VuLCBlbmQsIGluZGV4KSB7XG4gICAgICAgIC8vIERvbid0IGFkZCBkdXBsaWNhdGUgYWN0aW9uc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpICs9IDMpXG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25zW2ldID09IGFjdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIHRoaXMuYWN0aW9uc1tpbmRleCsrXSA9IGFjdGlvbjtcbiAgICAgICAgdGhpcy5hY3Rpb25zW2luZGV4KytdID0gdG9rZW47XG4gICAgICAgIHRoaXMuYWN0aW9uc1tpbmRleCsrXSA9IGVuZDtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICBhZGRBY3Rpb25zKHN0YWNrLCB0b2tlbiwgZW5kLCBpbmRleCkge1xuICAgICAgICBsZXQgeyBzdGF0ZSB9ID0gc3RhY2ssIHsgcGFyc2VyIH0gPSBzdGFjay5wLCB7IGRhdGEgfSA9IHBhcnNlcjtcbiAgICAgICAgZm9yIChsZXQgc2V0ID0gMDsgc2V0IDwgMjsgc2V0KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBwYXJzZXIuc3RhdGVTbG90KHN0YXRlLCBzZXQgPyAyIC8qIFNraXAgKi8gOiAxIC8qIEFjdGlvbnMgKi8pOzsgaSArPSAzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFbaV0gPT0gNjU1MzUgLyogRW5kICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2kgKyAxXSA9PSAxIC8qIE5leHQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBwYWlyKGRhdGEsIGkgKyAyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAwICYmIGRhdGFbaSArIDFdID09IDIgLyogT3RoZXIgKi8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLnB1dEFjdGlvbihwYWlyKGRhdGEsIGkgKyAxKSwgdG9rZW4sIGVuZCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFbaV0gPT0gdG9rZW4pXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5wdXRBY3Rpb24ocGFpcihkYXRhLCBpICsgMSksIHRva2VuLCBlbmQsIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxufVxudmFyIFJlYztcbihmdW5jdGlvbiAoUmVjKSB7XG4gICAgUmVjW1JlY1tcIkRpc3RhbmNlXCJdID0gNV0gPSBcIkRpc3RhbmNlXCI7XG4gICAgUmVjW1JlY1tcIk1heFJlbWFpbmluZ1BlclN0ZXBcIl0gPSAzXSA9IFwiTWF4UmVtYWluaW5nUGVyU3RlcFwiO1xuICAgIFJlY1tSZWNbXCJNaW5CdWZmZXJMZW5ndGhQcnVuZVwiXSA9IDIwMF0gPSBcIk1pbkJ1ZmZlckxlbmd0aFBydW5lXCI7XG4gICAgUmVjW1JlY1tcIkZvcmNlUmVkdWNlTGltaXRcIl0gPSAxMF0gPSBcIkZvcmNlUmVkdWNlTGltaXRcIjtcbn0pKFJlYyB8fCAoUmVjID0ge30pKTtcbi8vLyBBIHBhcnNlIGNvbnRleHQgY2FuIGJlIHVzZWQgZm9yIHN0ZXAtYnktc3RlcCBwYXJzaW5nLiBBZnRlclxuLy8vIGNyZWF0aW5nIGl0LCB5b3UgcmVwZWF0ZWRseSBjYWxsIGAuYWR2YW5jZSgpYCB1bnRpbCBpdCByZXR1cm5zIGFcbi8vLyB0cmVlIHRvIGluZGljYXRlIGl0IGhhcyByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHBhcnNlLlxuY2xhc3MgUGFyc2Uge1xuICAgIGNvbnN0cnVjdG9yKHBhcnNlciwgaW5wdXQsIHN0YXJ0UG9zLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuc3RhcnRQb3MgPSBzdGFydFBvcztcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgLy8gVGhlIHBvc2l0aW9uIHRvIHdoaWNoIHRoZSBwYXJzZSBoYXMgYWR2YW5jZWQuXG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5yZWNvdmVyaW5nID0gMDtcbiAgICAgICAgdGhpcy5uZXh0U3RhY2tJRCA9IDB4MjY1NDtcbiAgICAgICAgdGhpcy5uZXN0ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLm5lc3RFbmQgPSAwO1xuICAgICAgICB0aGlzLm5lc3RXcmFwID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZXVzZWQgPSBbXTtcbiAgICAgICAgdGhpcy50b2tlbnMgPSBuZXcgVG9rZW5DYWNoZShwYXJzZXIpO1xuICAgICAgICB0aGlzLnRvcFRlcm0gPSBwYXJzZXIudG9wWzFdO1xuICAgICAgICB0aGlzLnN0YWNrcyA9IFtTdGFjay5zdGFydCh0aGlzLCBwYXJzZXIudG9wWzBdLCB0aGlzLnN0YXJ0UG9zKV07XG4gICAgICAgIGxldCBmcmFnbWVudHMgPSBjb250ZXh0ID09PSBudWxsIHx8IGNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRleHQuZnJhZ21lbnRzO1xuICAgICAgICB0aGlzLmZyYWdtZW50cyA9IGZyYWdtZW50cyAmJiBmcmFnbWVudHMubGVuZ3RoID8gbmV3IEZyYWdtZW50Q3Vyc29yKGZyYWdtZW50cykgOiBudWxsO1xuICAgIH1cbiAgICAvLyBNb3ZlIHRoZSBwYXJzZXIgZm9yd2FyZC4gVGhpcyB3aWxsIHByb2Nlc3MgYWxsIHBhcnNlIHN0YWNrcyBhdFxuICAgIC8vIGB0aGlzLnBvc2AgYW5kIHRyeSB0byBhZHZhbmNlIHRoZW0gdG8gYSBmdXJ0aGVyIHBvc2l0aW9uLiBJZiBub1xuICAgIC8vIHN0YWNrIGZvciBzdWNoIGEgcG9zaXRpb24gaXMgZm91bmQsIGl0J2xsIHN0YXJ0IGVycm9yLXJlY292ZXJ5LlxuICAgIC8vXG4gICAgLy8gV2hlbiB0aGUgcGFyc2UgaXMgZmluaXNoZWQsIHRoaXMgd2lsbCByZXR1cm4gYSBzeW50YXggdHJlZS4gV2hlblxuICAgIC8vIG5vdCwgaXQgcmV0dXJucyBgbnVsbGAuXG4gICAgYWR2YW5jZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubmVzdGVkKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5uZXN0ZWQuYWR2YW5jZSgpO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSB0aGlzLm5lc3RlZC5wb3M7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maW5pc2hOZXN0ZWQodGhpcy5zdGFja3NbMF0sIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXN0ZWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YWNrcyA9IHRoaXMuc3RhY2tzLCBwb3MgPSB0aGlzLnBvcztcbiAgICAgICAgLy8gVGhpcyB3aWxsIGhvbGQgc3RhY2tzIGJleW9uZCBgcG9zYC5cbiAgICAgICAgbGV0IG5ld1N0YWNrcyA9IHRoaXMuc3RhY2tzID0gW107XG4gICAgICAgIGxldCBzdG9wcGVkLCBzdG9wcGVkVG9rZW5zO1xuICAgICAgICBsZXQgbWF5YmVOZXN0O1xuICAgICAgICAvLyBLZWVwIGFkdmFuY2luZyBhbnkgc3RhY2tzIGF0IGBwb3NgIHVudGlsIHRoZXkgZWl0aGVyIG1vdmVcbiAgICAgICAgLy8gZm9yd2FyZCBvciBjYW4ndCBiZSBhZHZhbmNlZC4gR2F0aGVyIHN0YWNrcyB0aGF0IGNhbid0IGJlXG4gICAgICAgIC8vIGFkdmFuY2VkIGZ1cnRoZXIgaW4gYHN0b3BwZWRgLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHN0YWNrID0gc3RhY2tzW2ldLCBuZXN0O1xuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIGlmIChzdGFjay5wb3MgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhY2tzLnB1c2goc3RhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXN0ID0gdGhpcy5jaGVja05lc3Qoc3RhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF5YmVOZXN0IHx8IG1heWJlTmVzdC5zdGFjay5zY29yZSA8IHN0YWNrLnNjb3JlKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVOZXN0ID0gbmVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5hZHZhbmNlU3RhY2soc3RhY2ssIG5ld1N0YWNrcywgc3RhY2tzKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcHBlZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcHBlZFRva2VucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0b3BwZWQucHVzaChzdGFjayk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0b2sgPSB0aGlzLnRva2Vucy5tYWluVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHN0b3BwZWRUb2tlbnMucHVzaCh0b2sudmFsdWUsIHRvay5lbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF5YmVOZXN0KSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0TmVzdGVkKG1heWJlTmVzdCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5ld1N0YWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBmaW5pc2hlZCA9IHN0b3BwZWQgJiYgZmluZEZpbmlzaGVkKHN0b3BwZWQpO1xuICAgICAgICAgICAgaWYgKGZpbmlzaGVkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YWNrVG9UcmVlKGZpbmlzaGVkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcnNlci5zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSAmJiBzdG9wcGVkKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0dWNrIHdpdGggdG9rZW4gXCIgKyB0aGlzLnBhcnNlci5nZXROYW1lKHRoaXMudG9rZW5zLm1haW5Ub2tlbi52YWx1ZSkpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIk5vIHBhcnNlIGF0IFwiICsgcG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5yZWNvdmVyaW5nKVxuICAgICAgICAgICAgICAgIHRoaXMucmVjb3ZlcmluZyA9IDUgLyogRGlzdGFuY2UgKi87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVjb3ZlcmluZyAmJiBzdG9wcGVkKSB7XG4gICAgICAgICAgICBsZXQgZmluaXNoZWQgPSB0aGlzLnJ1blJlY292ZXJ5KHN0b3BwZWQsIHN0b3BwZWRUb2tlbnMsIG5ld1N0YWNrcyk7XG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tUb1RyZWUoZmluaXNoZWQuZm9yY2VBbGwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVjb3ZlcmluZykge1xuICAgICAgICAgICAgbGV0IG1heFJlbWFpbmluZyA9IHRoaXMucmVjb3ZlcmluZyA9PSAxID8gMSA6IHRoaXMucmVjb3ZlcmluZyAqIDMgLyogTWF4UmVtYWluaW5nUGVyU3RlcCAqLztcbiAgICAgICAgICAgIGlmIChuZXdTdGFja3MubGVuZ3RoID4gbWF4UmVtYWluaW5nKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhY2tzLnNvcnQoKGEsIGIpID0+IGIuc2NvcmUgLSBhLnNjb3JlKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV3U3RhY2tzLmxlbmd0aCA+IG1heFJlbWFpbmluZylcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhY2tzLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1N0YWNrcy5zb21lKHMgPT4gcy5yZWR1Y2VQb3MgPiBwb3MpKVxuICAgICAgICAgICAgICAgIHRoaXMucmVjb3ZlcmluZy0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5ld1N0YWNrcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvLyBQcnVuZSBzdGFja3MgdGhhdCBhcmUgaW4gdGhlIHNhbWUgc3RhdGUsIG9yIHRoYXQgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBydW5uaW5nIHdpdGhvdXQgc3BsaXR0aW5nIGZvciBhIHdoaWxlLCB0byBhdm9pZCBnZXR0aW5nIHN0dWNrXG4gICAgICAgICAgICAvLyB3aXRoIG11bHRpcGxlIHN1Y2Nlc3NmdWwgc3RhY2tzIHJ1bm5pbmcgZW5kbGVzc2x5IG9uLlxuICAgICAgICAgICAgb3V0ZXI6IGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U3RhY2tzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzdGFjayA9IG5ld1N0YWNrc1tpXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBuZXdTdGFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG90aGVyID0gbmV3U3RhY2tzW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2suc2FtZVN0YXRlKG90aGVyKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2suYnVmZmVyLmxlbmd0aCA+IDIwMCAvKiBNaW5CdWZmZXJMZW5ndGhQcnVuZSAqLyAmJiBvdGhlci5idWZmZXIubGVuZ3RoID4gMjAwIC8qIE1pbkJ1ZmZlckxlbmd0aFBydW5lICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKChzdGFjay5zY29yZSAtIG90aGVyLnNjb3JlKSB8fCAoc3RhY2suYnVmZmVyLmxlbmd0aCAtIG90aGVyLmJ1ZmZlci5sZW5ndGgpKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFja3Muc3BsaWNlKGotLSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFja3Muc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3MgPSBuZXdTdGFja3NbMF0ucG9zO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG5ld1N0YWNrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChuZXdTdGFja3NbaV0ucG9zIDwgdGhpcy5wb3MpXG4gICAgICAgICAgICAgICAgdGhpcy5wb3MgPSBuZXdTdGFja3NbaV0ucG9zO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhbiB1cGRhdGVkIHZlcnNpb24gb2YgdGhlIGdpdmVuIHN0YWNrLCBvciBudWxsIGlmIHRoZVxuICAgIC8vIHN0YWNrIGNhbid0IGFkdmFuY2Ugbm9ybWFsbHkuIFdoZW4gYHNwbGl0YCBhbmQgYHN0YWNrc2AgYXJlXG4gICAgLy8gZ2l2ZW4sIHN0YWNrcyBzcGxpdCBvZmYgYnkgYW1iaWd1b3VzIG9wZXJhdGlvbnMgd2lsbCBiZSBwdXNoZWQgdG9cbiAgICAvLyBgc3BsaXRgLCBvciBhZGRlZCB0byBgc3RhY2tzYCBpZiB0aGV5IG1vdmUgYHBvc2AgZm9yd2FyZC5cbiAgICBhZHZhbmNlU3RhY2soc3RhY2ssIHN0YWNrcywgc3BsaXQpIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gc3RhY2sucG9zLCB7IGlucHV0LCBwYXJzZXIgfSA9IHRoaXM7XG4gICAgICAgIGxldCBiYXNlID0gdmVyYm9zZSA/IHRoaXMuc3RhY2tJRChzdGFjaykgKyBcIiAtPiBcIiA6IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLmZyYWdtZW50cykge1xuICAgICAgICAgICAgbGV0IHN0cmljdEN4ID0gc3RhY2suY3VyQ29udGV4dCAmJiBzdGFjay5jdXJDb250ZXh0LnRyYWNrZXIuc3RyaWN0LCBjeEhhc2ggPSBzdHJpY3RDeCA/IHN0YWNrLmN1ckNvbnRleHQuaGFzaCA6IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBjYWNoZWQgPSB0aGlzLmZyYWdtZW50cy5ub2RlQXQoc3RhcnQpOyBjYWNoZWQ7KSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5wYXJzZXIubm9kZVNldC50eXBlc1tjYWNoZWQudHlwZS5pZF0gPT0gY2FjaGVkLnR5cGUgPyBwYXJzZXIuZ2V0R290byhzdGFjay5zdGF0ZSwgY2FjaGVkLnR5cGUuaWQpIDogLTE7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoID4gLTEgJiYgY2FjaGVkLmxlbmd0aCAmJiAoIXN0cmljdEN4IHx8IChjYWNoZWQuY29udGV4dEhhc2ggfHwgMCkgPT0gY3hIYXNoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay51c2VOb2RlKGNhY2hlZCwgbWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJhc2UgKyB0aGlzLnN0YWNrSUQoc3RhY2spICsgYCAodmlhIHJldXNlIG9mICR7cGFyc2VyLmdldE5hbWUoY2FjaGVkLnR5cGUuaWQpfSlgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKGNhY2hlZCBpbnN0YW5jZW9mIGxlemVyVHJlZS5UcmVlKSB8fCBjYWNoZWQuY2hpbGRyZW4ubGVuZ3RoID09IDAgfHwgY2FjaGVkLnBvc2l0aW9uc1swXSA+IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGxldCBpbm5lciA9IGNhY2hlZC5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIgaW5zdGFuY2VvZiBsZXplclRyZWUuVHJlZSlcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVkID0gaW5uZXI7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVmYXVsdFJlZHVjZSA9IHBhcnNlci5zdGF0ZVNsb3Qoc3RhY2suc3RhdGUsIDQgLyogRGVmYXVsdFJlZHVjZSAqLyk7XG4gICAgICAgIGlmIChkZWZhdWx0UmVkdWNlID4gMCkge1xuICAgICAgICAgICAgc3RhY2sucmVkdWNlKGRlZmF1bHRSZWR1Y2UpO1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChzdGFjaykgKyBgICh2aWEgYWx3YXlzLXJlZHVjZSAke3BhcnNlci5nZXROYW1lKGRlZmF1bHRSZWR1Y2UgJiA2NTUzNSAvKiBWYWx1ZU1hc2sgKi8pfSlgKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhY3Rpb25zID0gdGhpcy50b2tlbnMuZ2V0QWN0aW9ucyhzdGFjaywgaW5wdXQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGlvbnMubGVuZ3RoOykge1xuICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGFjdGlvbnNbaSsrXSwgdGVybSA9IGFjdGlvbnNbaSsrXSwgZW5kID0gYWN0aW9uc1tpKytdO1xuICAgICAgICAgICAgbGV0IGxhc3QgPSBpID09IGFjdGlvbnMubGVuZ3RoIHx8ICFzcGxpdDtcbiAgICAgICAgICAgIGxldCBsb2NhbFN0YWNrID0gbGFzdCA/IHN0YWNrIDogc3RhY2suc3BsaXQoKTtcbiAgICAgICAgICAgIGxvY2FsU3RhY2suYXBwbHkoYWN0aW9uLCB0ZXJtLCBlbmQpO1xuICAgICAgICAgICAgaWYgKHZlcmJvc2UpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChsb2NhbFN0YWNrKSArIGAgKHZpYSAkeyhhY3Rpb24gJiA2NTUzNiAvKiBSZWR1Y2VGbGFnICovKSA9PSAwID8gXCJzaGlmdFwiXG4gICAgICAgICAgICAgICAgICAgIDogYHJlZHVjZSBvZiAke3BhcnNlci5nZXROYW1lKGFjdGlvbiAmIDY1NTM1IC8qIFZhbHVlTWFzayAqLyl9YH0gZm9yICR7cGFyc2VyLmdldE5hbWUodGVybSl9IEAgJHtzdGFydH0ke2xvY2FsU3RhY2sgPT0gc3RhY2sgPyBcIlwiIDogXCIsIHNwbGl0XCJ9KWApO1xuICAgICAgICAgICAgaWYgKGxhc3QpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChsb2NhbFN0YWNrLnBvcyA+IHN0YXJ0KVxuICAgICAgICAgICAgICAgIHN0YWNrcy5wdXNoKGxvY2FsU3RhY2spO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNwbGl0LnB1c2gobG9jYWxTdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBBZHZhbmNlIGEgZ2l2ZW4gc3RhY2sgZm9yd2FyZCBhcyBmYXIgYXMgaXQgd2lsbCBnby4gUmV0dXJucyB0aGVcbiAgICAvLyAocG9zc2libHkgdXBkYXRlZCkgc3RhY2sgaWYgaXQgZ290IHN0dWNrLCBvciBudWxsIGlmIGl0IG1vdmVkXG4gICAgLy8gZm9yd2FyZCBhbmQgd2FzIGdpdmVuIHRvIGBwdXNoU3RhY2tEZWR1cGAuXG4gICAgYWR2YW5jZUZ1bGx5KHN0YWNrLCBuZXdTdGFja3MpIHtcbiAgICAgICAgbGV0IHBvcyA9IHN0YWNrLnBvcztcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgbGV0IG5lc3QgPSB0aGlzLmNoZWNrTmVzdChzdGFjayk7XG4gICAgICAgICAgICBpZiAobmVzdClcbiAgICAgICAgICAgICAgICByZXR1cm4gbmVzdDtcbiAgICAgICAgICAgIGlmICghdGhpcy5hZHZhbmNlU3RhY2soc3RhY2ssIG51bGwsIG51bGwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzdGFjay5wb3MgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICBwdXNoU3RhY2tEZWR1cChzdGFjaywgbmV3U3RhY2tzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBydW5SZWNvdmVyeShzdGFja3MsIHRva2VucywgbmV3U3RhY2tzKSB7XG4gICAgICAgIGxldCBmaW5pc2hlZCA9IG51bGwsIHJlc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgbWF5YmVOZXN0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHN0YWNrID0gc3RhY2tzW2ldLCB0b2tlbiA9IHRva2Vuc1tpIDw8IDFdLCB0b2tlbkVuZCA9IHRva2Vuc1soaSA8PCAxKSArIDFdO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSB2ZXJib3NlID8gdGhpcy5zdGFja0lEKHN0YWNrKSArIFwiIC0+IFwiIDogXCJcIjtcbiAgICAgICAgICAgIGlmIChzdGFjay5kZWFkRW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3RhcnRlZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgcmVzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdGFjay5yZXN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHZlcmJvc2UpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJhc2UgKyB0aGlzLnN0YWNrSUQoc3RhY2spICsgXCIgKHJlc3RhcnRlZClcIik7XG4gICAgICAgICAgICAgICAgbGV0IGRvbmUgPSB0aGlzLmFkdmFuY2VGdWxseShzdGFjaywgbmV3U3RhY2tzKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTmVzdCA9IGRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmb3JjZSA9IHN0YWNrLnNwbGl0KCksIGZvcmNlQmFzZSA9IGJhc2U7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgZm9yY2UuZm9yY2VSZWR1Y2UoKSAmJiBqIDwgMTAgLyogRm9yY2VSZWR1Y2VMaW1pdCAqLzsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZlcmJvc2UpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvcmNlQmFzZSArIHRoaXMuc3RhY2tJRChmb3JjZSkgKyBcIiAodmlhIGZvcmNlLXJlZHVjZSlcIik7XG4gICAgICAgICAgICAgICAgbGV0IGRvbmUgPSB0aGlzLmFkdmFuY2VGdWxseShmb3JjZSwgbmV3U3RhY2tzKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSAhPT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTmVzdCA9IGRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSlcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VCYXNlID0gdGhpcy5zdGFja0lEKGZvcmNlKSArIFwiIC0+IFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaW5zZXJ0IG9mIHN0YWNrLnJlY292ZXJCeUluc2VydCh0b2tlbikpIHtcbiAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSlcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChpbnNlcnQpICsgXCIgKHZpYSByZWNvdmVyLWluc2VydClcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlRnVsbHkoaW5zZXJ0LCBuZXdTdGFja3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXQubGVuZ3RoID4gc3RhY2sucG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuRW5kID09IHN0YWNrLnBvcykge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbkVuZCsrO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IDAgLyogRXJyICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGFjay5yZWNvdmVyQnlEZWxldGUodG9rZW4sIHRva2VuRW5kKTtcbiAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSlcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYmFzZSArIHRoaXMuc3RhY2tJRChzdGFjaykgKyBgICh2aWEgcmVjb3Zlci1kZWxldGUgJHt0aGlzLnBhcnNlci5nZXROYW1lKHRva2VuKX0pYCk7XG4gICAgICAgICAgICAgICAgcHVzaFN0YWNrRGVkdXAoc3RhY2ssIG5ld1N0YWNrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghZmluaXNoZWQgfHwgZmluaXNoZWQuc2NvcmUgPCBzdGFjay5zY29yZSkge1xuICAgICAgICAgICAgICAgIGZpbmlzaGVkID0gc3RhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbmlzaGVkKVxuICAgICAgICAgICAgcmV0dXJuIGZpbmlzaGVkO1xuICAgICAgICBpZiAobWF5YmVOZXN0KVxuICAgICAgICAgICAgZm9yIChsZXQgcyBvZiB0aGlzLnN0YWNrcylcbiAgICAgICAgICAgICAgICBpZiAocy5zY29yZSA+IG1heWJlTmVzdC5zdGFjay5zY29yZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXliZU5lc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgaWYgKG1heWJlTmVzdClcbiAgICAgICAgICAgIHRoaXMuc3RhcnROZXN0ZWQobWF5YmVOZXN0KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZvcmNlRmluaXNoKCkge1xuICAgICAgICBsZXQgc3RhY2sgPSB0aGlzLnN0YWNrc1swXS5zcGxpdCgpO1xuICAgICAgICBpZiAodGhpcy5uZXN0ZWQpXG4gICAgICAgICAgICB0aGlzLmZpbmlzaE5lc3RlZChzdGFjaywgdGhpcy5uZXN0ZWQuZm9yY2VGaW5pc2goKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YWNrVG9UcmVlKHN0YWNrLmZvcmNlQWxsKCkpO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IHRoZSBzdGFjaydzIGJ1ZmZlciB0byBhIHN5bnRheCB0cmVlLlxuICAgIHN0YWNrVG9UcmVlKHN0YWNrLCBwb3MgPSBzdGFjay5wb3MpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyc2VyLmNvbnRleHQpXG4gICAgICAgICAgICBzdGFjay5lbWl0Q29udGV4dCgpO1xuICAgICAgICByZXR1cm4gbGV6ZXJUcmVlLlRyZWUuYnVpbGQoeyBidWZmZXI6IFN0YWNrQnVmZmVyQ3Vyc29yLmNyZWF0ZShzdGFjayksXG4gICAgICAgICAgICBub2RlU2V0OiB0aGlzLnBhcnNlci5ub2RlU2V0LFxuICAgICAgICAgICAgdG9wSUQ6IHRoaXMudG9wVGVybSxcbiAgICAgICAgICAgIG1heEJ1ZmZlckxlbmd0aDogdGhpcy5wYXJzZXIuYnVmZmVyTGVuZ3RoLFxuICAgICAgICAgICAgcmV1c2VkOiB0aGlzLnJldXNlZCxcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0UG9zLFxuICAgICAgICAgICAgbGVuZ3RoOiBwb3MgLSB0aGlzLnN0YXJ0UG9zLFxuICAgICAgICAgICAgbWluUmVwZWF0VHlwZTogdGhpcy5wYXJzZXIubWluUmVwZWF0VGVybSB9KTtcbiAgICB9XG4gICAgY2hlY2tOZXN0KHN0YWNrKSB7XG4gICAgICAgIGxldCBpbmZvID0gdGhpcy5wYXJzZXIuZmluZE5lc3RlZChzdGFjay5zdGF0ZSk7XG4gICAgICAgIGlmICghaW5mbylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgc3BlYyA9IGluZm8udmFsdWU7XG4gICAgICAgIGlmICh0eXBlb2Ygc3BlYyA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICBzcGVjID0gc3BlYyh0aGlzLmlucHV0LCBzdGFjayk7XG4gICAgICAgIHJldHVybiBzcGVjID8geyBzdGFjaywgaW5mbywgc3BlYyB9IDogbnVsbDtcbiAgICB9XG4gICAgc3RhcnROZXN0ZWQobmVzdCkge1xuICAgICAgICBsZXQgeyBzdGFjaywgaW5mbywgc3BlYyB9ID0gbmVzdDtcbiAgICAgICAgdGhpcy5zdGFja3MgPSBbc3RhY2tdO1xuICAgICAgICB0aGlzLm5lc3RFbmQgPSB0aGlzLnNjYW5Gb3JOZXN0RW5kKHN0YWNrLCBpbmZvLmVuZCwgc3BlYy5maWx0ZXJFbmQpO1xuICAgICAgICB0aGlzLm5lc3RXcmFwID0gdHlwZW9mIHNwZWMud3JhcFR5cGUgPT0gXCJudW1iZXJcIiA/IHRoaXMucGFyc2VyLm5vZGVTZXQudHlwZXNbc3BlYy53cmFwVHlwZV0gOiBzcGVjLndyYXBUeXBlIHx8IG51bGw7XG4gICAgICAgIGlmIChzcGVjLnN0YXJ0UGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMubmVzdGVkID0gc3BlYy5zdGFydFBhcnNlKHRoaXMuaW5wdXQuY2xpcCh0aGlzLm5lc3RFbmQpLCBzdGFjay5wb3MsIHRoaXMuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaE5lc3RlZChzdGFjayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2NhbkZvck5lc3RFbmQoc3RhY2ssIGVuZFRva2VuLCBmaWx0ZXIpIHtcbiAgICAgICAgZm9yIChsZXQgcG9zID0gc3RhY2sucG9zOyBwb3MgPCB0aGlzLmlucHV0Lmxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgICAgIGR1bW15VG9rZW4uc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICBkdW1teVRva2VuLnZhbHVlID0gLTE7XG4gICAgICAgICAgICBlbmRUb2tlbi50b2tlbih0aGlzLmlucHV0LCBkdW1teVRva2VuLCBzdGFjayk7XG4gICAgICAgICAgICBpZiAoZHVtbXlUb2tlbi52YWx1ZSA+IC0xICYmICghZmlsdGVyIHx8IGZpbHRlcih0aGlzLmlucHV0LnJlYWQocG9zLCBkdW1teVRva2VuLmVuZCkpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0Lmxlbmd0aDtcbiAgICB9XG4gICAgZmluaXNoTmVzdGVkKHN0YWNrLCB0cmVlKSB7XG4gICAgICAgIGlmICh0aGlzLm5lc3RXcmFwKVxuICAgICAgICAgICAgdHJlZSA9IG5ldyBsZXplclRyZWUuVHJlZSh0aGlzLm5lc3RXcmFwLCB0cmVlID8gW3RyZWVdIDogW10sIHRyZWUgPyBbMF0gOiBbXSwgdGhpcy5uZXN0RW5kIC0gc3RhY2sucG9zKTtcbiAgICAgICAgZWxzZSBpZiAoIXRyZWUpXG4gICAgICAgICAgICB0cmVlID0gbmV3IGxlemVyVHJlZS5UcmVlKGxlemVyVHJlZS5Ob2RlVHlwZS5ub25lLCBbXSwgW10sIHRoaXMubmVzdEVuZCAtIHN0YWNrLnBvcyk7XG4gICAgICAgIGxldCBpbmZvID0gdGhpcy5wYXJzZXIuZmluZE5lc3RlZChzdGFjay5zdGF0ZSk7XG4gICAgICAgIHN0YWNrLnVzZU5vZGUodHJlZSwgdGhpcy5wYXJzZXIuZ2V0R290byhzdGFjay5zdGF0ZSwgaW5mby5wbGFjZWhvbGRlciwgdHJ1ZSkpO1xuICAgICAgICBpZiAodmVyYm9zZSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhY2tJRChzdGFjaykgKyBgICh2aWEgdW5uZXN0KWApO1xuICAgIH1cbiAgICBzdGFja0lEKHN0YWNrKSB7XG4gICAgICAgIGxldCBpZCA9IChzdGFja0lEcyB8fCAoc3RhY2tJRHMgPSBuZXcgV2Vha01hcCkpLmdldChzdGFjayk7XG4gICAgICAgIGlmICghaWQpXG4gICAgICAgICAgICBzdGFja0lEcy5zZXQoc3RhY2ssIGlkID0gU3RyaW5nLmZyb21Db2RlUG9pbnQodGhpcy5uZXh0U3RhY2tJRCsrKSk7XG4gICAgICAgIHJldHVybiBpZCArIHN0YWNrO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHB1c2hTdGFja0RlZHVwKHN0YWNrLCBuZXdTdGFja3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1N0YWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgb3RoZXIgPSBuZXdTdGFja3NbaV07XG4gICAgICAgIGlmIChvdGhlci5wb3MgPT0gc3RhY2sucG9zICYmIG90aGVyLnNhbWVTdGF0ZShzdGFjaykpIHtcbiAgICAgICAgICAgIGlmIChuZXdTdGFja3NbaV0uc2NvcmUgPCBzdGFjay5zY29yZSlcbiAgICAgICAgICAgICAgICBuZXdTdGFja3NbaV0gPSBzdGFjaztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXdTdGFja3MucHVzaChzdGFjayk7XG59XG5jbGFzcyBEaWFsZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UsIGZsYWdzLCBkaXNhYmxlZCkge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5mbGFncyA9IGZsYWdzO1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICAgIGFsbG93cyh0ZXJtKSB7IHJldHVybiAhdGhpcy5kaXNhYmxlZCB8fCB0aGlzLmRpc2FibGVkW3Rlcm1dID09IDA7IH1cbn1cbmNvbnN0IGlkID0geCA9PiB4O1xuLy8vIENvbnRleHQgdHJhY2tlcnMgYXJlIHVzZWQgdG8gdHJhY2sgc3RhdGVmdWwgY29udGV4dCAoc3VjaCBhc1xuLy8vIGluZGVudGF0aW9uIGluIHRoZSBQeXRob24gZ3JhbW1hciwgb3IgcGFyZW50IGVsZW1lbnRzIGluIHRoZSBYTUxcbi8vLyBncmFtbWFyKSBuZWVkZWQgYnkgZXh0ZXJuYWwgdG9rZW5pemVycy4gWW91IGRlY2xhcmUgdGhlbSBpbiBhXG4vLy8gZ3JhbW1hciBmaWxlIGFzIGBAY29udGV4dCBleHBvcnROYW1lIGZyb20gXCJtb2R1bGVcImAuXG4vLy9cbi8vLyBDb250ZXh0IHZhbHVlcyBzaG91bGQgYmUgaW1tdXRhYmxlLCBhbmQgY2FuIGJlIHVwZGF0ZWQgKHJlcGxhY2VkKVxuLy8vIG9uIHNoaWZ0IG9yIHJlZHVjZSBhY3Rpb25zLlxuY2xhc3MgQ29udGV4dFRyYWNrZXIge1xuICAgIC8vLyBUaGUgZXhwb3J0IHVzZWQgaW4gYSBgQGNvbnRleHRgIGRlY2xhcmF0aW9uIHNob3VsZCBiZSBvZiB0aGlzXG4gICAgLy8vIHR5cGUuXG4gICAgY29uc3RydWN0b3Ioc3BlYykge1xuICAgICAgICB0aGlzLnN0YXJ0ID0gc3BlYy5zdGFydDtcbiAgICAgICAgdGhpcy5zaGlmdCA9IHNwZWMuc2hpZnQgfHwgaWQ7XG4gICAgICAgIHRoaXMucmVkdWNlID0gc3BlYy5yZWR1Y2UgfHwgaWQ7XG4gICAgICAgIHRoaXMucmV1c2UgPSBzcGVjLnJldXNlIHx8IGlkO1xuICAgICAgICB0aGlzLmhhc2ggPSBzcGVjLmhhc2g7XG4gICAgICAgIHRoaXMuc3RyaWN0ID0gc3BlYy5zdHJpY3QgIT09IGZhbHNlO1xuICAgIH1cbn1cbi8vLyBBIHBhcnNlciBob2xkcyB0aGUgcGFyc2UgdGFibGVzIGZvciBhIGdpdmVuIGdyYW1tYXIsIGFzIGdlbmVyYXRlZFxuLy8vIGJ5IGBsZXplci1nZW5lcmF0b3JgLlxuY2xhc3MgUGFyc2VyIHtcbiAgICAvLy8gQGludGVybmFsXG4gICAgY29uc3RydWN0b3Ioc3BlYykge1xuICAgICAgICAvLy8gQGludGVybmFsXG4gICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gbGV6ZXJUcmVlLkRlZmF1bHRCdWZmZXJMZW5ndGg7XG4gICAgICAgIC8vLyBAaW50ZXJuYWxcbiAgICAgICAgdGhpcy5zdHJpY3QgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYWNoZWREaWFsZWN0ID0gbnVsbDtcbiAgICAgICAgaWYgKHNwZWMudmVyc2lvbiAhPSAxMyAvKiBWZXJzaW9uICovKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFBhcnNlciB2ZXJzaW9uICgke3NwZWMudmVyc2lvbn0pIGRvZXNuJ3QgbWF0Y2ggcnVudGltZSB2ZXJzaW9uICgkezEzIC8qIFZlcnNpb24gKi99KWApO1xuICAgICAgICBsZXQgdG9rZW5BcnJheSA9IGRlY29kZUFycmF5KHNwZWMudG9rZW5EYXRhKTtcbiAgICAgICAgbGV0IG5vZGVOYW1lcyA9IHNwZWMubm9kZU5hbWVzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgdGhpcy5taW5SZXBlYXRUZXJtID0gbm9kZU5hbWVzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gc3BlYy5jb250ZXh0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwZWMucmVwZWF0Tm9kZUNvdW50OyBpKyspXG4gICAgICAgICAgICBub2RlTmFtZXMucHVzaChcIlwiKTtcbiAgICAgICAgbGV0IG5vZGVQcm9wcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVOYW1lcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIG5vZGVQcm9wcy5wdXNoKFtdKTtcbiAgICAgICAgZnVuY3Rpb24gc2V0UHJvcChub2RlSUQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBub2RlUHJvcHNbbm9kZUlEXS5wdXNoKFtwcm9wLCBwcm9wLmRlc2VyaWFsaXplKFN0cmluZyh2YWx1ZSkpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwZWMubm9kZVByb3BzKVxuICAgICAgICAgICAgZm9yIChsZXQgcHJvcFNwZWMgb2Ygc3BlYy5ub2RlUHJvcHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcCA9IHByb3BTcGVjWzBdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvcFNwZWMubGVuZ3RoOykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHByb3BTcGVjW2krK107XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByb3AobmV4dCwgcHJvcCwgcHJvcFNwZWNbaSsrXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwcm9wU3BlY1tpICsgLW5leHRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IC1uZXh0OyBqID4gMDsgai0tKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFByb3AocHJvcFNwZWNbaSsrXSwgcHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB0aGlzLnNwZWNpYWxpemVkID0gbmV3IFVpbnQxNkFycmF5KHNwZWMuc3BlY2lhbGl6ZWQgPyBzcGVjLnNwZWNpYWxpemVkLmxlbmd0aCA6IDApO1xuICAgICAgICB0aGlzLnNwZWNpYWxpemVycyA9IFtdO1xuICAgICAgICBpZiAoc3BlYy5zcGVjaWFsaXplZClcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BlYy5zcGVjaWFsaXplZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3BlY2lhbGl6ZWRbaV0gPSBzcGVjLnNwZWNpYWxpemVkW2ldLnRlcm07XG4gICAgICAgICAgICAgICAgdGhpcy5zcGVjaWFsaXplcnNbaV0gPSBzcGVjLnNwZWNpYWxpemVkW2ldLmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBkZWNvZGVBcnJheShzcGVjLnN0YXRlcywgVWludDMyQXJyYXkpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkZWNvZGVBcnJheShzcGVjLnN0YXRlRGF0YSk7XG4gICAgICAgIHRoaXMuZ290byA9IGRlY29kZUFycmF5KHNwZWMuZ290byk7XG4gICAgICAgIGxldCB0b3BUZXJtcyA9IE9iamVjdC5rZXlzKHNwZWMudG9wUnVsZXMpLm1hcChyID0+IHNwZWMudG9wUnVsZXNbcl1bMV0pO1xuICAgICAgICB0aGlzLm5vZGVTZXQgPSBuZXcgbGV6ZXJUcmVlLk5vZGVTZXQobm9kZU5hbWVzLm1hcCgobmFtZSwgaSkgPT4gbGV6ZXJUcmVlLk5vZGVUeXBlLmRlZmluZSh7XG4gICAgICAgICAgICBuYW1lOiBpID49IHRoaXMubWluUmVwZWF0VGVybSA/IHVuZGVmaW5lZCA6IG5hbWUsXG4gICAgICAgICAgICBpZDogaSxcbiAgICAgICAgICAgIHByb3BzOiBub2RlUHJvcHNbaV0sXG4gICAgICAgICAgICB0b3A6IHRvcFRlcm1zLmluZGV4T2YoaSkgPiAtMSxcbiAgICAgICAgICAgIGVycm9yOiBpID09IDAsXG4gICAgICAgICAgICBza2lwcGVkOiBzcGVjLnNraXBwZWROb2RlcyAmJiBzcGVjLnNraXBwZWROb2Rlcy5pbmRleE9mKGkpID4gLTFcbiAgICAgICAgfSkpKTtcbiAgICAgICAgdGhpcy5tYXhUZXJtID0gc3BlYy5tYXhUZXJtO1xuICAgICAgICB0aGlzLnRva2VuaXplcnMgPSBzcGVjLnRva2VuaXplcnMubWFwKHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiID8gbmV3IFRva2VuR3JvdXAodG9rZW5BcnJheSwgdmFsdWUpIDogdmFsdWUpO1xuICAgICAgICB0aGlzLnRvcFJ1bGVzID0gc3BlYy50b3BSdWxlcztcbiAgICAgICAgdGhpcy5uZXN0ZWQgPSAoc3BlYy5uZXN0ZWQgfHwgW10pLm1hcCgoW25hbWUsIHZhbHVlLCBlbmRUb2tlbiwgcGxhY2Vob2xkZXJdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyBuYW1lLCB2YWx1ZSwgZW5kOiBuZXcgVG9rZW5Hcm91cChkZWNvZGVBcnJheShlbmRUb2tlbiksIDApLCBwbGFjZWhvbGRlciB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaWFsZWN0cyA9IHNwZWMuZGlhbGVjdHMgfHwge307XG4gICAgICAgIHRoaXMuZHluYW1pY1ByZWNlZGVuY2VzID0gc3BlYy5keW5hbWljUHJlY2VkZW5jZXMgfHwgbnVsbDtcbiAgICAgICAgdGhpcy50b2tlblByZWNUYWJsZSA9IHNwZWMudG9rZW5QcmVjO1xuICAgICAgICB0aGlzLnRlcm1OYW1lcyA9IHNwZWMudGVybU5hbWVzIHx8IG51bGw7XG4gICAgICAgIHRoaXMubWF4Tm9kZSA9IHRoaXMubm9kZVNldC50eXBlcy5sZW5ndGggLSAxO1xuICAgICAgICB0aGlzLmRpYWxlY3QgPSB0aGlzLnBhcnNlRGlhbGVjdCgpO1xuICAgICAgICB0aGlzLnRvcCA9IHRoaXMudG9wUnVsZXNbT2JqZWN0LmtleXModGhpcy50b3BSdWxlcylbMF1dO1xuICAgIH1cbiAgICAvLy8gUGFyc2UgYSBnaXZlbiBzdHJpbmcgb3Igc3RyZWFtLlxuICAgIHBhcnNlKGlucHV0LCBzdGFydFBvcyA9IDAsIGNvbnRleHQgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICBpbnB1dCA9IGxlemVyVHJlZS5zdHJpbmdJbnB1dChpbnB1dCk7XG4gICAgICAgIGxldCBjeCA9IG5ldyBQYXJzZSh0aGlzLCBpbnB1dCwgc3RhcnRQb3MsIGNvbnRleHQpO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgZG9uZSA9IGN4LmFkdmFuY2UoKTtcbiAgICAgICAgICAgIGlmIChkb25lKVxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vLyBTdGFydCBhbiBpbmNyZW1lbnRhbCBwYXJzZS5cbiAgICBzdGFydFBhcnNlKGlucHV0LCBzdGFydFBvcyA9IDAsIGNvbnRleHQgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICBpbnB1dCA9IGxlemVyVHJlZS5zdHJpbmdJbnB1dChpbnB1dCk7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2UodGhpcywgaW5wdXQsIHN0YXJ0UG9zLCBjb250ZXh0KTtcbiAgICB9XG4gICAgLy8vIEdldCBhIGdvdG8gdGFibGUgZW50cnkgQGludGVybmFsXG4gICAgZ2V0R290byhzdGF0ZSwgdGVybSwgbG9vc2UgPSBmYWxzZSkge1xuICAgICAgICBsZXQgdGFibGUgPSB0aGlzLmdvdG87XG4gICAgICAgIGlmICh0ZXJtID49IHRhYmxlWzBdKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSB0YWJsZVt0ZXJtICsgMV07Oykge1xuICAgICAgICAgICAgbGV0IGdyb3VwVGFnID0gdGFibGVbcG9zKytdLCBsYXN0ID0gZ3JvdXBUYWcgJiAxO1xuICAgICAgICAgICAgbGV0IHRhcmdldCA9IHRhYmxlW3BvcysrXTtcbiAgICAgICAgICAgIGlmIChsYXN0ICYmIGxvb3NlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgICAgICBmb3IgKGxldCBlbmQgPSBwb3MgKyAoZ3JvdXBUYWcgPj4gMSk7IHBvcyA8IGVuZDsgcG9zKyspXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlW3Bvc10gPT0gc3RhdGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgICAgICBpZiAobGFzdClcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8vIENoZWNrIGlmIHRoaXMgc3RhdGUgaGFzIGFuIGFjdGlvbiBmb3IgYSBnaXZlbiB0ZXJtaW5hbCBAaW50ZXJuYWxcbiAgICBoYXNBY3Rpb24oc3RhdGUsIHRlcm1pbmFsKSB7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICBmb3IgKGxldCBzZXQgPSAwOyBzZXQgPCAyOyBzZXQrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3RhdGVTbG90KHN0YXRlLCBzZXQgPyAyIC8qIFNraXAgKi8gOiAxIC8qIEFjdGlvbnMgKi8pLCBuZXh0OzsgaSArPSAzKSB7XG4gICAgICAgICAgICAgICAgaWYgKChuZXh0ID0gZGF0YVtpXSkgPT0gNjU1MzUgLyogRW5kICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2kgKyAxXSA9PSAxIC8qIE5leHQgKi8pXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gZGF0YVtpID0gcGFpcihkYXRhLCBpICsgMildO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhW2kgKyAxXSA9PSAyIC8qIE90aGVyICovKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhaXIoZGF0YSwgaSArIDIpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT0gdGVybWluYWwgfHwgbmV4dCA9PSAwIC8qIEVyciAqLylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhaXIoZGF0YSwgaSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvLy8gQGludGVybmFsXG4gICAgc3RhdGVTbG90KHN0YXRlLCBzbG90KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlc1soc3RhdGUgKiA2IC8qIFNpemUgKi8pICsgc2xvdF07XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBzdGF0ZUZsYWcoc3RhdGUsIGZsYWcpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnN0YXRlU2xvdChzdGF0ZSwgMCAvKiBGbGFncyAqLykgJiBmbGFnKSA+IDA7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBmaW5kTmVzdGVkKHN0YXRlKSB7XG4gICAgICAgIGxldCBmbGFncyA9IHRoaXMuc3RhdGVTbG90KHN0YXRlLCAwIC8qIEZsYWdzICovKTtcbiAgICAgICAgcmV0dXJuIGZsYWdzICYgNCAvKiBTdGFydE5lc3QgKi8gPyB0aGlzLm5lc3RlZFtmbGFncyA+PiAxMCAvKiBOZXN0U2hpZnQgKi9dIDogbnVsbDtcbiAgICB9XG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIHZhbGlkQWN0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbiA9PSB0aGlzLnN0YXRlU2xvdChzdGF0ZSwgNCAvKiBEZWZhdWx0UmVkdWNlICovKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGF0ZVNsb3Qoc3RhdGUsIDEgLyogQWN0aW9ucyAqLyk7OyBpICs9IDMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFbaV0gPT0gNjU1MzUgLyogRW5kICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVtpICsgMV0gPT0gMSAvKiBOZXh0ICovKVxuICAgICAgICAgICAgICAgICAgICBpID0gcGFpcih0aGlzLmRhdGEsIGkgKyAyKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhY3Rpb24gPT0gcGFpcih0aGlzLmRhdGEsIGkgKyAxKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLy8gR2V0IHRoZSBzdGF0ZXMgdGhhdCBjYW4gZm9sbG93IHRoaXMgb25lIHRocm91Z2ggc2hpZnQgYWN0aW9ucyBvclxuICAgIC8vLyBnb3RvIGp1bXBzLiBAaW50ZXJuYWxcbiAgICBuZXh0U3RhdGVzKHN0YXRlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3RhdGVTbG90KHN0YXRlLCAxIC8qIEFjdGlvbnMgKi8pOzsgaSArPSAzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhW2ldID09IDY1NTM1IC8qIEVuZCAqLykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFbaSArIDFdID09IDEgLyogTmV4dCAqLylcbiAgICAgICAgICAgICAgICAgICAgaSA9IHBhaXIodGhpcy5kYXRhLCBpICsgMik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGhpcy5kYXRhW2kgKyAyXSAmICg2NTUzNiAvKiBSZWR1Y2VGbGFnICovID4+IDE2KSkgPT0gMCkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZGF0YVtpICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc29tZSgodiwgaSkgPT4gKGkgJiAxKSAmJiB2ID09IHZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5kYXRhW2ldLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIG92ZXJyaWRlcyh0b2tlbiwgcHJldikge1xuICAgICAgICBsZXQgaVByZXYgPSBmaW5kT2Zmc2V0KHRoaXMuZGF0YSwgdGhpcy50b2tlblByZWNUYWJsZSwgcHJldik7XG4gICAgICAgIHJldHVybiBpUHJldiA8IDAgfHwgZmluZE9mZnNldCh0aGlzLmRhdGEsIHRoaXMudG9rZW5QcmVjVGFibGUsIHRva2VuKSA8IGlQcmV2O1xuICAgIH1cbiAgICAvLy8gQ29uZmlndXJlIHRoZSBwYXJzZXIuIFJldHVybnMgYSBuZXcgcGFyc2VyIGluc3RhbmNlIHRoYXQgaGFzIHRoZVxuICAgIC8vLyBnaXZlbiBzZXR0aW5ncyBtb2RpZmllZC4gU2V0dGluZ3Mgbm90IHByb3ZpZGVkIGluIGBjb25maWdgIGFyZVxuICAgIC8vLyBrZXB0IGZyb20gdGhlIG9yaWdpbmFsIHBhcnNlci5cbiAgICBjb25maWd1cmUoY29uZmlnKSB7XG4gICAgICAgIC8vIEhpZGVvdXMgcmVmbGVjdGlvbi1iYXNlZCBrbHVkZ2UgdG8gbWFrZSBpdCBlYXN5IHRvIGNyZWF0ZSBhXG4gICAgICAgIC8vIHNsaWdodGx5IG1vZGlmaWVkIGNvcHkgb2YgYSBwYXJzZXIuXG4gICAgICAgIGxldCBjb3B5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFBhcnNlci5wcm90b3R5cGUpLCB0aGlzKTtcbiAgICAgICAgaWYgKGNvbmZpZy5wcm9wcylcbiAgICAgICAgICAgIGNvcHkubm9kZVNldCA9IHRoaXMubm9kZVNldC5leHRlbmQoLi4uY29uZmlnLnByb3BzKTtcbiAgICAgICAgaWYgKGNvbmZpZy50b3ApIHtcbiAgICAgICAgICAgIGxldCBpbmZvID0gdGhpcy50b3BSdWxlc1tjb25maWcudG9wXTtcbiAgICAgICAgICAgIGlmICghaW5mbylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCB0b3AgcnVsZSBuYW1lICR7Y29uZmlnLnRvcH1gKTtcbiAgICAgICAgICAgIGNvcHkudG9wID0gaW5mbztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLnRva2VuaXplcnMpXG4gICAgICAgICAgICBjb3B5LnRva2VuaXplcnMgPSB0aGlzLnRva2VuaXplcnMubWFwKHQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBmb3VuZCA9IGNvbmZpZy50b2tlbml6ZXJzLmZpbmQociA9PiByLmZyb20gPT0gdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kID8gZm91bmQudG8gOiB0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb25maWcuZGlhbGVjdClcbiAgICAgICAgICAgIGNvcHkuZGlhbGVjdCA9IHRoaXMucGFyc2VEaWFsZWN0KGNvbmZpZy5kaWFsZWN0KTtcbiAgICAgICAgaWYgKGNvbmZpZy5uZXN0ZWQpXG4gICAgICAgICAgICBjb3B5Lm5lc3RlZCA9IHRoaXMubmVzdGVkLm1hcChvYmogPT4ge1xuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZy5uZXN0ZWQsIG9iai5uYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBuYW1lOiBvYmoubmFtZSwgdmFsdWU6IGNvbmZpZy5uZXN0ZWRbb2JqLm5hbWVdLCBlbmQ6IG9iai5lbmQsIHBsYWNlaG9sZGVyOiBvYmoucGxhY2Vob2xkZXIgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAoY29uZmlnLnN0cmljdCAhPSBudWxsKVxuICAgICAgICAgICAgY29weS5zdHJpY3QgPSBjb25maWcuc3RyaWN0O1xuICAgICAgICBpZiAoY29uZmlnLmJ1ZmZlckxlbmd0aCAhPSBudWxsKVxuICAgICAgICAgICAgY29weS5idWZmZXJMZW5ndGggPSBjb25maWcuYnVmZmVyTGVuZ3RoO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gICAgLy8vIFJldHVybnMgdGhlIG5hbWUgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gdGVybS4gVGhpcyB3aWxsIG9ubHlcbiAgICAvLy8gd29yayBmb3IgYWxsIHRlcm1zIHdoZW4gdGhlIHBhcnNlciB3YXMgZ2VuZXJhdGVkIHdpdGggdGhlXG4gICAgLy8vIGAtLW5hbWVzYCBvcHRpb24uIEJ5IGRlZmF1bHQsIG9ubHkgdGhlIG5hbWVzIG9mIHRhZ2dlZCB0ZXJtcyBhcmVcbiAgICAvLy8gc3RvcmVkLlxuICAgIGdldE5hbWUodGVybSkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXJtTmFtZXMgPyB0aGlzLnRlcm1OYW1lc1t0ZXJtXSA6IFN0cmluZyh0ZXJtIDw9IHRoaXMubWF4Tm9kZSAmJiB0aGlzLm5vZGVTZXQudHlwZXNbdGVybV0ubmFtZSB8fCB0ZXJtKTtcbiAgICB9XG4gICAgLy8vIFRoZSBlb2YgdGVybSBpZCBpcyBhbHdheXMgYWxsb2NhdGVkIGRpcmVjdGx5IGFmdGVyIHRoZSBub2RlXG4gICAgLy8vIHR5cGVzLiBAaW50ZXJuYWxcbiAgICBnZXQgZW9mVGVybSgpIHsgcmV0dXJuIHRoaXMubWF4Tm9kZSArIDE7IH1cbiAgICAvLy8gVGVsbHMgeW91IHdoZXRoZXIgdGhpcyBncmFtbWFyIGhhcyBhbnkgbmVzdGVkIGdyYW1tYXJzLlxuICAgIGdldCBoYXNOZXN0ZWQoKSB7IHJldHVybiB0aGlzLm5lc3RlZC5sZW5ndGggPiAwOyB9XG4gICAgLy8vIFRoZSB0eXBlIG9mIHRvcCBub2RlIHByb2R1Y2VkIGJ5IHRoZSBwYXJzZXIuXG4gICAgZ2V0IHRvcE5vZGUoKSB7IHJldHVybiB0aGlzLm5vZGVTZXQudHlwZXNbdGhpcy50b3BbMV1dOyB9XG4gICAgLy8vIEBpbnRlcm5hbFxuICAgIGR5bmFtaWNQcmVjZWRlbmNlKHRlcm0pIHtcbiAgICAgICAgbGV0IHByZWMgPSB0aGlzLmR5bmFtaWNQcmVjZWRlbmNlcztcbiAgICAgICAgcmV0dXJuIHByZWMgPT0gbnVsbCA/IDAgOiBwcmVjW3Rlcm1dIHx8IDA7XG4gICAgfVxuICAgIC8vLyBAaW50ZXJuYWxcbiAgICBwYXJzZURpYWxlY3QoZGlhbGVjdCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZWREaWFsZWN0ICYmIHRoaXMuY2FjaGVkRGlhbGVjdC5zb3VyY2UgPT0gZGlhbGVjdClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlZERpYWxlY3Q7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBPYmplY3Qua2V5cyh0aGlzLmRpYWxlY3RzKSwgZmxhZ3MgPSB2YWx1ZXMubWFwKCgpID0+IGZhbHNlKTtcbiAgICAgICAgaWYgKGRpYWxlY3QpXG4gICAgICAgICAgICBmb3IgKGxldCBwYXJ0IG9mIGRpYWxlY3Quc3BsaXQoXCIgXCIpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gdmFsdWVzLmluZGV4T2YocGFydCk7XG4gICAgICAgICAgICAgICAgaWYgKGlkID49IDApXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzW2lkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIGxldCBkaXNhYmxlZCA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKCFmbGFnc1tpXSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSB0aGlzLmRpYWxlY3RzW3ZhbHVlc1tpXV0sIGlkOyAoaWQgPSB0aGlzLmRhdGFbaisrXSkgIT0gNjU1MzUgLyogRW5kICovOylcbiAgICAgICAgICAgICAgICAgICAgKGRpc2FibGVkIHx8IChkaXNhYmxlZCA9IG5ldyBVaW50OEFycmF5KHRoaXMubWF4VGVybSArIDEpKSlbaWRdID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkRGlhbGVjdCA9IG5ldyBEaWFsZWN0KGRpYWxlY3QsIGZsYWdzLCBkaXNhYmxlZCk7XG4gICAgfVxuICAgIC8vLyAodXNlZCBieSB0aGUgb3V0cHV0IG9mIHRoZSBwYXJzZXIgZ2VuZXJhdG9yKSBAaW50ZXJuYWxcbiAgICBzdGF0aWMgZGVzZXJpYWxpemUoc3BlYykge1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlcihzcGVjKTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYWlyKGRhdGEsIG9mZikgeyByZXR1cm4gZGF0YVtvZmZdIHwgKGRhdGFbb2ZmICsgMV0gPDwgMTYpOyB9XG5mdW5jdGlvbiBmaW5kT2Zmc2V0KGRhdGEsIHN0YXJ0LCB0ZXJtKSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0LCBuZXh0OyAobmV4dCA9IGRhdGFbaV0pICE9IDY1NTM1IC8qIEVuZCAqLzsgaSsrKVxuICAgICAgICBpZiAobmV4dCA9PSB0ZXJtKVxuICAgICAgICAgICAgcmV0dXJuIGkgLSBzdGFydDtcbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBmaW5kRmluaXNoZWQoc3RhY2tzKSB7XG4gICAgbGV0IGJlc3QgPSBudWxsO1xuICAgIGZvciAobGV0IHN0YWNrIG9mIHN0YWNrcykge1xuICAgICAgICBpZiAoc3RhY2sucG9zID09IHN0YWNrLnAuaW5wdXQubGVuZ3RoICYmXG4gICAgICAgICAgICBzdGFjay5wLnBhcnNlci5zdGF0ZUZsYWcoc3RhY2suc3RhdGUsIDIgLyogQWNjZXB0aW5nICovKSAmJlxuICAgICAgICAgICAgKCFiZXN0IHx8IGJlc3Quc2NvcmUgPCBzdGFjay5zY29yZSkpXG4gICAgICAgICAgICBiZXN0ID0gc3RhY2s7XG4gICAgfVxuICAgIHJldHVybiBiZXN0O1xufVxuXG5leHBvcnRzLk5vZGVQcm9wID0gbGV6ZXJUcmVlLk5vZGVQcm9wO1xuZXhwb3J0cy5Ob2RlU2V0ID0gbGV6ZXJUcmVlLk5vZGVTZXQ7XG5leHBvcnRzLk5vZGVUeXBlID0gbGV6ZXJUcmVlLk5vZGVUeXBlO1xuZXhwb3J0cy5UcmVlID0gbGV6ZXJUcmVlLlRyZWU7XG5leHBvcnRzLlRyZWVDdXJzb3IgPSBsZXplclRyZWUuVHJlZUN1cnNvcjtcbmV4cG9ydHMuQ29udGV4dFRyYWNrZXIgPSBDb250ZXh0VHJhY2tlcjtcbmV4cG9ydHMuRXh0ZXJuYWxUb2tlbml6ZXIgPSBFeHRlcm5hbFRva2VuaXplcjtcbmV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuZXhwb3J0cy5TdGFjayA9IFN0YWNrO1xuZXhwb3J0cy5Ub2tlbiA9IFRva2VuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguY2pzLm1hcFxuIiwiLy8gaW1wb3J0IHsgVHlwZUNoZWNrRXJyb3IgfSBmcm9tIFwiLi90eXBlLWNoZWNrXCI7XG5cbi8vIGV4cG9ydCBlbnVtIFR5cGUge05VTSwgQk9PTCwgTk9ORSwgT0JKfTsgXG5leHBvcnQgdHlwZSBUeXBlID1cbiAgfCB7dGFnOiBcIm51bWJlclwifVxuICB8IHt0YWc6IFwiYm9vbFwifVxuICB8IHt0YWc6IFwibm9uZVwifVxuICB8IHt0YWc6IFwiY2xhc3NcIiwgbmFtZTogc3RyaW5nfVxuICB8IHt0YWc6IFwiZWl0aGVyXCIsIGxlZnQ6IFR5cGUsIHJpZ2h0OiBUeXBlIH1cblxuZXhwb3J0IHR5cGUgU291cmNlTG9jYXRpb24gPSB7IGxpbmU6IG51bWJlciB9XG5cbmV4cG9ydCB0eXBlIFBhcmFtZXRlcjxBPiA9IHsgbmFtZTogc3RyaW5nLCB0eXBlOiBUeXBlIH1cblxuZXhwb3J0IHR5cGUgUHJvZ3JhbTxBPiA9IHsgYT86IEEsIGZ1bnM6IEFycmF5PEZ1bkRlZjxBPj4sIGluaXRzOiBBcnJheTxWYXJJbml0PEE+PiwgY2xhc3NlczogQXJyYXk8Q2xhc3M8QT4+LCBzdG10czogQXJyYXk8U3RtdDxBPj4gfVxuXG5leHBvcnQgdHlwZSBDbGFzczxBPiA9IHsgYT86IEEsIG5hbWU6IHN0cmluZywgZmllbGRzOiBBcnJheTxWYXJJbml0PEE+PiwgbWV0aG9kczogQXJyYXk8RnVuRGVmPEE+Pn1cblxuZXhwb3J0IHR5cGUgVmFySW5pdDxBPiA9IHsgYT86IEEsIG5hbWU6IHN0cmluZywgdHlwZTogVHlwZSwgdmFsdWU6IExpdGVyYWwgfVxuXG5leHBvcnQgdHlwZSBGdW5EZWY8QT4gPSB7IGE/OiBBLCBuYW1lOiBzdHJpbmcsIHBhcmFtZXRlcnM6IEFycmF5PFBhcmFtZXRlcjxBPj4sIHJldDogVHlwZSwgaW5pdHM6IEFycmF5PFZhckluaXQ8QT4+LCBib2R5OiBBcnJheTxTdG10PEE+PiB9XG5cbmV4cG9ydCB0eXBlIFN0bXQ8QT4gPVxuICB8IHsgIGE/OiBBLCB0YWc6IFwiYXNzaWduXCIsIG5hbWU6IHN0cmluZywgdmFsdWU6IEV4cHI8QT4gfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwicmV0dXJuXCIsIHZhbHVlOiBFeHByPEE+IH1cbiAgfCB7ICBhPzogQSwgdGFnOiBcImV4cHJcIiwgZXhwcjogRXhwcjxBPiB9XG4gIHwgeyAgYT86IEEsIHRhZzogXCJwYXNzXCIgfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwiZmllbGQtYXNzaWduXCIsIG9iajogRXhwcjxBPiwgZmllbGQ6IHN0cmluZywgdmFsdWU6IEV4cHI8QT4gfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwiaW5kZXgtYXNzaWduXCIsIG9iajogRXhwcjxBPiwgaW5kZXg6IEV4cHI8QT4sIHZhbHVlOiBFeHByPEE+IH1cbiAgfCB7ICBhPzogQSwgdGFnOiBcImlmXCIsIGNvbmQ6IEV4cHI8QT4sIHRobjogQXJyYXk8U3RtdDxBPj4sIGVsczogQXJyYXk8U3RtdDxBPj4gfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwid2hpbGVcIiwgY29uZDogRXhwcjxBPiwgYm9keTogQXJyYXk8U3RtdDxBPj4gfVxuXG5leHBvcnQgdHlwZSBFeHByPEE+ID1cbiAgICB7ICBhPzogQSwgdGFnOiBcImxpdGVyYWxcIiwgdmFsdWU6IExpdGVyYWwgfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwiaWRcIiwgbmFtZTogc3RyaW5nIH1cbiAgfCB7ICBhPzogQSwgdGFnOiBcImJpbm9wXCIsIG9wOiBCaW5PcCwgbGVmdDogRXhwcjxBPiwgcmlnaHQ6IEV4cHI8QT59XG4gIHwgeyAgYT86IEEsIHRhZzogXCJ1bmlvcFwiLCBvcDogVW5pT3AsIGV4cHI6IEV4cHI8QT4gfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwiYnVpbHRpbjFcIiwgbmFtZTogc3RyaW5nLCBhcmc6IEV4cHI8QT4gfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwiYnVpbHRpbjJcIiwgbmFtZTogc3RyaW5nLCBsZWZ0OiBFeHByPEE+LCByaWdodDogRXhwcjxBPn1cbiAgfCB7ICBhPzogQSwgdGFnOiBcImNhbGxcIiwgbmFtZTogc3RyaW5nLCBhcmd1bWVudHM6IEFycmF5PEV4cHI8QT4+IH0gXG4gIHwgeyAgYT86IEEsIHRhZzogXCJsb29rdXBcIiwgb2JqOiBFeHByPEE+LCBmaWVsZDogc3RyaW5nIH1cbiAgfCB7ICBhPzogQSwgdGFnOiBcImluZGV4XCIsIG9iajogRXhwcjxBPiwgaW5kZXg6IEV4cHI8QT4gfVxuICB8IHsgIGE/OiBBLCB0YWc6IFwibWV0aG9kLWNhbGxcIiwgb2JqOiBFeHByPEE+LCBtZXRob2Q6IHN0cmluZywgYXJndW1lbnRzOiBBcnJheTxFeHByPEE+PiB9XG4gIHwgeyAgYT86IEEsIHRhZzogXCJjb25zdHJ1Y3RcIiwgbmFtZTogc3RyaW5nIH1cblxuZXhwb3J0IHR5cGUgTGl0ZXJhbCA9IFxuICAgIHsgdGFnOiBcIm51bVwiLCB2YWx1ZTogbnVtYmVyIH1cbiAgfCB7IHRhZzogXCJib29sXCIsIHZhbHVlOiBib29sZWFuIH1cbiAgfCB7IHRhZzogXCJub25lXCIgfVxuXG4vLyBUT0RPOiBzaG91bGQgd2Ugc3BsaXQgdXAgYXJpdGhtZXRpYyBvcHMgZnJvbSBib29sIG9wcz9cbmV4cG9ydCBlbnVtIEJpbk9wIHsgUGx1cywgTWludXMsIE11bCwgSURpdiwgTW9kLCBFcSwgTmVxLCBMdGUsIEd0ZSwgTHQsIEd0LCBJcywgQW5kLCBPcn07XG5cbmV4cG9ydCBlbnVtIFVuaU9wIHsgTmVnLCBOb3QgfTtcblxuZXhwb3J0IHR5cGUgVmFsdWUgPVxuICAgIExpdGVyYWxcbiAgfCB7IHRhZzogXCJvYmplY3RcIiwgbmFtZTogc3RyaW5nLCBhZGRyZXNzOiBudW1iZXJ9XG4iLCJpbXBvcnQgeyBQcm9ncmFtLCBTdG10LCBFeHByLCBWYWx1ZSwgQ2xhc3MsIFZhckluaXQsIEZ1bkRlZiB9IGZyb20gXCIuL2lyXCJcbmltcG9ydCB7IEJpbk9wLCBUeXBlLCBVbmlPcCwgU291cmNlTG9jYXRpb24gfSBmcm9tIFwiLi9hc3RcIlxuaW1wb3J0IHsgQk9PTCwgTk9ORSwgTlVNIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgR2xvYmFsRW52ID0ge1xuICBnbG9iYWxzOiBNYXA8c3RyaW5nLCBib29sZWFuPjtcbiAgY2xhc3NlczogTWFwPHN0cmluZywgTWFwPHN0cmluZywgW251bWJlciwgVmFsdWU8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT5dPj47ICBcbiAgbG9jYWxzOiBTZXQ8c3RyaW5nPjtcbiAgbGFiZWxzOiBBcnJheTxzdHJpbmc+O1xuICBvZmZzZXQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IGVtcHR5RW52IDogR2xvYmFsRW52ID0geyBcbiAgZ2xvYmFsczogbmV3IE1hcCgpLCBcbiAgY2xhc3NlczogbmV3IE1hcCgpLFxuICBsb2NhbHM6IG5ldyBTZXQoKSxcbiAgbGFiZWxzOiBbXSxcbiAgb2Zmc2V0OiAwIFxufTtcblxudHlwZSBDb21waWxlUmVzdWx0ID0ge1xuICBnbG9iYWxzOiBzdHJpbmdbXSxcbiAgZnVuY3Rpb25zOiBzdHJpbmcsXG4gIG1haW5Tb3VyY2U6IHN0cmluZyxcbiAgbmV3RW52OiBHbG9iYWxFbnZcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTG9jYWxzKGxvY2FsczogU2V0PHN0cmluZz4pIDogQXJyYXk8c3RyaW5nPiB7XG4gIGNvbnN0IGxvY2FsRGVmaW5lcyA6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgbG9jYWxzLmZvckVhY2godiA9PiB7XG4gICAgbG9jYWxEZWZpbmVzLnB1c2goYChsb2NhbCAkJHt2fSBpMzIpYCk7XG4gIH0pO1xuICByZXR1cm4gbG9jYWxEZWZpbmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZShhc3Q6IFByb2dyYW08W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4sIGVudjogR2xvYmFsRW52KSA6IENvbXBpbGVSZXN1bHQge1xuICBjb25zdCB3aXRoRGVmaW5lcyA9IGVudjtcblxuICBjb25zdCBkZWZpbmVkVmFycyA6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpOyAvL2dldExvY2Fscyhhc3QpO1xuICBkZWZpbmVkVmFycy5hZGQoXCIkbGFzdFwiKTtcbiAgZGVmaW5lZFZhcnMuYWRkKFwiJHNlbGVjdG9yXCIpO1xuICBkZWZpbmVkVmFycy5mb3JFYWNoKGVudi5sb2NhbHMuYWRkLCBlbnYubG9jYWxzKTtcbiAgY29uc3QgbG9jYWxEZWZpbmVzID0gbWFrZUxvY2FscyhkZWZpbmVkVmFycyk7XG4gIGNvbnN0IGdsb2JhbE5hbWVzID0gYXN0LmluaXRzLm1hcChpbml0ID0+IGluaXQubmFtZSk7XG4gIGNvbnNvbGUubG9nKGFzdC5pbml0cywgZ2xvYmFsTmFtZXMpO1xuICBjb25zdCBmdW5zIDogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICBhc3QuZnVucy5mb3JFYWNoKGYgPT4ge1xuICAgIGZ1bnMucHVzaChjb2RlR2VuRGVmKGYsIHdpdGhEZWZpbmVzKS5qb2luKFwiXFxuXCIpKTtcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgOiBBcnJheTxzdHJpbmc+ID0gYXN0LmNsYXNzZXMubWFwKGNscyA9PiBjb2RlR2VuQ2xhc3MoY2xzLCB3aXRoRGVmaW5lcykpLmZsYXQoKTtcbiAgY29uc3QgYWxsRnVucyA9IGZ1bnMuY29uY2F0KGNsYXNzZXMpLmpvaW4oXCJcXG5cXG5cIik7XG4gIC8vIGNvbnN0IHN0bXRzID0gYXN0LmZpbHRlcigoc3RtdCkgPT4gc3RtdC50YWcgIT09IFwiZnVuXCIpO1xuICBjb25zdCBpbml0cyA9IGFzdC5pbml0cy5tYXAoaW5pdCA9PiBjb2RlR2VuSW5pdChpbml0LCB3aXRoRGVmaW5lcykpLmZsYXQoKTtcbiAgd2l0aERlZmluZXMubGFiZWxzID0gYXN0LmJvZHkubWFwKGJsb2NrID0+IGJsb2NrLmxhYmVsKTtcbiAgdmFyIGJvZHlDb21tYW5kcyA9IFwiKGxvY2FsLnNldCAkJHNlbGVjdG9yIChpMzIuY29uc3QgMCkpXFxuXCJcbiAgYm9keUNvbW1hbmRzICs9IFwiKGxvb3AgJGxvb3BcXG5cIlxuXG4gIHZhciBibG9ja0NvbW1hbmRzID0gXCIobG9jYWwuZ2V0ICQkc2VsZWN0b3IpXFxuXCJcbiAgYmxvY2tDb21tYW5kcyArPSBgKGJyX3RhYmxlICR7YXN0LmJvZHkubWFwKGJsb2NrID0+IGJsb2NrLmxhYmVsKS5qb2luKFwiIFwiKX0pYDtcbiAgYXN0LmJvZHkuZm9yRWFjaChibG9jayA9PiB7XG4gICAgYmxvY2tDb21tYW5kcyA9IGAoYmxvY2sgJHtibG9jay5sYWJlbH1cbiAgICAgICAgICAgICAgJHtibG9ja0NvbW1hbmRzfSAgICBcbiAgICAgICAgICAgICkgOzsgZW5kICR7YmxvY2subGFiZWx9XG4gICAgICAgICAgICAke2Jsb2NrLnN0bXRzLm1hcChzdG10ID0+IGNvZGVHZW5TdG10KHN0bXQsIHdpdGhEZWZpbmVzKS5qb2luKCdcXG4nKSkuam9pbignXFxuJyl9XG4gICAgICAgICAgICBgXG4gIH0pXG4gIGJvZHlDb21tYW5kcyArPSBibG9ja0NvbW1hbmRzO1xuICBib2R5Q29tbWFuZHMgKz0gXCIpIDs7IGVuZCAkbG9vcFwiXG5cbiAgLy8gY29uc3QgY29tbWFuZEdyb3VwcyA9IGFzdC5zdG10cy5tYXAoKHN0bXQpID0+IGNvZGVHZW5TdG10KHN0bXQsIHdpdGhEZWZpbmVzKSk7XG4gIGNvbnN0IGFsbENvbW1hbmRzID0gWy4uLmxvY2FsRGVmaW5lcywgLi4uaW5pdHMsIGJvZHlDb21tYW5kc107XG4gIHdpdGhEZWZpbmVzLmxvY2Fscy5jbGVhcigpO1xuICByZXR1cm4ge1xuICAgIGdsb2JhbHM6IGdsb2JhbE5hbWVzLFxuICAgIGZ1bmN0aW9uczogYWxsRnVucyxcbiAgICBtYWluU291cmNlOiBhbGxDb21tYW5kcy5qb2luKFwiXFxuXCIpLFxuICAgIG5ld0Vudjogd2l0aERlZmluZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29kZUdlblN0bXQoc3RtdDogU3RtdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPiwgZW52OiBHbG9iYWxFbnYpOiBBcnJheTxzdHJpbmc+IHtcbiAgc3dpdGNoIChzdG10LnRhZykge1xuICAgIGNhc2UgXCJzdG9yZVwiOlxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uY29kZUdlblZhbHVlKHN0bXQuc3RhcnQsIGVudiksXG4gICAgICAgIC4uLmNvZGVHZW5WYWx1ZShzdG10Lm9mZnNldCwgZW52KSxcbiAgICAgICAgLi4uY29kZUdlblZhbHVlKHN0bXQudmFsdWUsIGVudiksXG4gICAgICAgIGBjYWxsICRzdG9yZWBcbiAgICAgIF1cbiAgICBjYXNlIFwiYXNzaWduXCI6XG4gICAgICB2YXIgdmFsU3RtdHMgPSBjb2RlR2VuRXhwcihzdG10LnZhbHVlLCBlbnYpO1xuICAgICAgaWYgKGVudi5sb2NhbHMuaGFzKHN0bXQubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbFN0bXRzLmNvbmNhdChbYChsb2NhbC5zZXQgJCR7c3RtdC5uYW1lfSlgXSk7IFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbFN0bXRzLmNvbmNhdChbYChnbG9iYWwuc2V0ICQke3N0bXQubmFtZX0pYF0pOyBcbiAgICAgIH1cblxuICAgIGNhc2UgXCJyZXR1cm5cIjpcbiAgICAgIHZhciB2YWxTdG10cyA9IGNvZGVHZW5WYWx1ZShzdG10LnZhbHVlLCBlbnYpO1xuICAgICAgdmFsU3RtdHMucHVzaChcInJldHVyblwiKTtcbiAgICAgIHJldHVybiB2YWxTdG10cztcblxuICAgIGNhc2UgXCJleHByXCI6XG4gICAgICB2YXIgZXhwclN0bXRzID0gY29kZUdlbkV4cHIoc3RtdC5leHByLCBlbnYpO1xuICAgICAgcmV0dXJuIGV4cHJTdG10cy5jb25jYXQoW2AobG9jYWwuc2V0ICQkbGFzdClgXSk7XG5cbiAgICBjYXNlIFwicGFzc1wiOlxuICAgICAgcmV0dXJuIFtdXG5cbiAgICBjYXNlIFwiaWZqbXBcIjpcbiAgICAgIGNvbnN0IHRobklkeCA9IGVudi5sYWJlbHMuZmluZEluZGV4KGUgPT4gZSA9PT0gc3RtdC50aG4pO1xuICAgICAgY29uc3QgZWxzSWR4ID0gZW52LmxhYmVscy5maW5kSW5kZXgoZSA9PiBlID09PSBzdG10LmVscyk7XG5cbiAgICAgIHJldHVybiBbLi4uY29kZUdlblZhbHVlKHN0bXQuY29uZCwgZW52KSwgXG4gICAgICAgIGAoaWYgXG4gICAgICAgICAgKHRoZW5cbiAgICAgICAgICAgIChsb2NhbC5zZXQgJCRzZWxlY3RvciAoaTMyLmNvbnN0ICR7dGhuSWR4fSkpXG4gICAgICAgICAgICAoYnIgJGxvb3ApXG4gICAgICAgICAgKSBcbiAgICAgICAgICAoZWxzZSBcbiAgICAgICAgICAgIChsb2NhbC5zZXQgJCRzZWxlY3RvciAoaTMyLmNvbnN0ICR7ZWxzSWR4fSkpXG4gICAgICAgICAgICAoYnIgJGxvb3ApXG4gICAgICAgICAgKVxuICAgICAgICAgKWBdXG5cbiAgICBjYXNlIFwiam1wXCI6XG4gICAgICBjb25zdCBsYmxJZHggPSBlbnYubGFiZWxzLmZpbmRJbmRleChlID0+IGUgPT09IHN0bXQubGJsKTtcbiAgICAgIHJldHVybiBbYChsb2NhbC5zZXQgJCRzZWxlY3RvciAoaTMyLmNvbnN0ICR7bGJsSWR4fSkpYCwgYChiciAkbG9vcClgXVxuXG4gIH1cbn1cblxuZnVuY3Rpb24gY29kZUdlbkV4cHIoZXhwcjogRXhwcjxbVHlwZSwgU291cmNlTG9jYXRpb25dPiwgZW52OiBHbG9iYWxFbnYpOiBBcnJheTxzdHJpbmc+IHtcbiAgc3dpdGNoIChleHByLnRhZykge1xuICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgcmV0dXJuIGNvZGVHZW5WYWx1ZShleHByLnZhbHVlLCBlbnYpXG5cbiAgICBjYXNlIFwiYmlub3BcIjpcbiAgICAgIGNvbnN0IGxoc1N0bXRzID0gY29kZUdlblZhbHVlKGV4cHIubGVmdCwgZW52KTtcbiAgICAgIGNvbnN0IHJoc1N0bXRzID0gY29kZUdlblZhbHVlKGV4cHIucmlnaHQsIGVudik7XG4gICAgICByZXR1cm4gWy4uLmxoc1N0bXRzLCAuLi5yaHNTdG10cywgY29kZUdlbkJpbk9wKGV4cHIub3ApXVxuXG4gICAgY2FzZSBcInVuaW9wXCI6XG4gICAgICBjb25zdCBleHByU3RtdHMgPSBjb2RlR2VuVmFsdWUoZXhwci5leHByLCBlbnYpO1xuICAgICAgc3dpdGNoKGV4cHIub3Ape1xuICAgICAgICBjYXNlIFVuaU9wLk5lZzpcbiAgICAgICAgICByZXR1cm4gW2AoaTMyLmNvbnN0IDApYCwgLi4uZXhwclN0bXRzLCBgKGkzMi5zdWIpYF07XG4gICAgICAgIGNhc2UgVW5pT3AuTm90OlxuICAgICAgICAgIHJldHVybiBbYChpMzIuY29uc3QgMClgLCAuLi5leHByU3RtdHMsIGAoaTMyLmVxKWBdO1xuICAgICAgfVxuXG4gICAgY2FzZSBcImJ1aWx0aW4xXCI6XG4gICAgICBjb25zdCBhcmdUeXAgPSBleHByLmFbMF07XG4gICAgICBjb25zdCBhcmdTdG10cyA9IGNvZGVHZW5WYWx1ZShleHByLmFyZywgZW52KTtcbiAgICAgIHZhciBjYWxsTmFtZSA9IGV4cHIubmFtZTtcbiAgICAgIGlmIChleHByLm5hbWUgPT09IFwicHJpbnRcIiAmJiBhcmdUeXAgPT09IE5VTSkge1xuICAgICAgICBjYWxsTmFtZSA9IFwicHJpbnRfbnVtXCI7XG4gICAgICB9IGVsc2UgaWYgKGV4cHIubmFtZSA9PT0gXCJwcmludFwiICYmIGFyZ1R5cCA9PT0gQk9PTCkge1xuICAgICAgICBjYWxsTmFtZSA9IFwicHJpbnRfYm9vbFwiO1xuICAgICAgfSBlbHNlIGlmIChleHByLm5hbWUgPT09IFwicHJpbnRcIiAmJiBhcmdUeXAgPT09IE5PTkUpIHtcbiAgICAgICAgY2FsbE5hbWUgPSBcInByaW50X25vbmVcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdTdG10cy5jb25jYXQoW2AoY2FsbCAkJHtjYWxsTmFtZX0pYF0pO1xuXG4gICAgY2FzZSBcImJ1aWx0aW4yXCI6XG4gICAgICBjb25zdCBsZWZ0U3RtdHMgPSBjb2RlR2VuVmFsdWUoZXhwci5sZWZ0LCBlbnYpO1xuICAgICAgY29uc3QgcmlnaHRTdG10cyA9IGNvZGVHZW5WYWx1ZShleHByLnJpZ2h0LCBlbnYpO1xuICAgICAgcmV0dXJuIFsuLi5sZWZ0U3RtdHMsIC4uLnJpZ2h0U3RtdHMsIGAoY2FsbCAkJHtleHByLm5hbWV9KWBdXG5cbiAgICBjYXNlIFwiY2FsbFwiOlxuICAgICAgdmFyIHZhbFN0bXRzID0gZXhwci5hcmd1bWVudHMubWFwKChhcmcpID0+IGNvZGVHZW5WYWx1ZShhcmcsIGVudikpLmZsYXQoKTtcbiAgICAgIHZhbFN0bXRzLnB1c2goYChjYWxsICQke2V4cHIubmFtZX0pYCk7XG4gICAgICByZXR1cm4gdmFsU3RtdHM7XG5cbiAgICBjYXNlIFwiYWxsb2NcIjpcbiAgICAgIHJldHVybiBbXG4gICAgICAgIC4uLmNvZGVHZW5WYWx1ZShleHByLmFtb3VudCwgZW52KSxcbiAgICAgICAgYGNhbGwgJGFsbG9jYFxuICAgICAgXTtcbiAgICBjYXNlIFwibG9hZFwiOlxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uY29kZUdlblZhbHVlKGV4cHIuc3RhcnQsIGVudiksXG4gICAgICAgIGBjYWxsICRhc3NlcnRfbm90X25vbmVgLFxuICAgICAgICAuLi5jb2RlR2VuVmFsdWUoZXhwci5vZmZzZXQsIGVudiksXG4gICAgICAgIGBjYWxsICRsb2FkYFxuICAgICAgXVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvZGVHZW5WYWx1ZSh2YWw6IFZhbHVlPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+LCBlbnY6IEdsb2JhbEVudik6IEFycmF5PHN0cmluZz4ge1xuICBzd2l0Y2ggKHZhbC50YWcpIHtcbiAgICBjYXNlIFwibnVtXCI6XG4gICAgICByZXR1cm4gW1wiKGkzMi5jb25zdCBcIiArIHZhbC52YWx1ZSArIFwiKVwiXTtcbiAgICBjYXNlIFwid2FzbWludFwiOlxuICAgICAgcmV0dXJuIFtcIihpMzIuY29uc3QgXCIgKyB2YWwudmFsdWUgKyBcIilcIl07XG4gICAgY2FzZSBcImJvb2xcIjpcbiAgICAgIHJldHVybiBbYChpMzIuY29uc3QgJHtOdW1iZXIodmFsLnZhbHVlKX0pYF07XG4gICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgIHJldHVybiBbYChpMzIuY29uc3QgMClgXTtcbiAgICBjYXNlIFwiaWRcIjpcbiAgICAgIGlmIChlbnYubG9jYWxzLmhhcyh2YWwubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIFtgKGxvY2FsLmdldCAkJHt2YWwubmFtZX0pYF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW2AoZ2xvYmFsLmdldCAkJHt2YWwubmFtZX0pYF07XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29kZUdlbkJpbk9wKG9wIDogQmluT3ApIDogc3RyaW5nIHtcbiAgc3dpdGNoKG9wKSB7XG4gICAgY2FzZSBCaW5PcC5QbHVzOlxuICAgICAgcmV0dXJuIFwiKGkzMi5hZGQpXCJcbiAgICBjYXNlIEJpbk9wLk1pbnVzOlxuICAgICAgcmV0dXJuIFwiKGkzMi5zdWIpXCJcbiAgICBjYXNlIEJpbk9wLk11bDpcbiAgICAgIHJldHVybiBcIihpMzIubXVsKVwiXG4gICAgY2FzZSBCaW5PcC5JRGl2OlxuICAgICAgcmV0dXJuIFwiKGkzMi5kaXZfcylcIlxuICAgIGNhc2UgQmluT3AuTW9kOlxuICAgICAgcmV0dXJuIFwiKGkzMi5yZW1fcylcIlxuICAgIGNhc2UgQmluT3AuRXE6XG4gICAgICByZXR1cm4gXCIoaTMyLmVxKVwiXG4gICAgY2FzZSBCaW5PcC5OZXE6XG4gICAgICByZXR1cm4gXCIoaTMyLm5lKVwiXG4gICAgY2FzZSBCaW5PcC5MdGU6XG4gICAgICByZXR1cm4gXCIoaTMyLmxlX3MpXCJcbiAgICBjYXNlIEJpbk9wLkd0ZTpcbiAgICAgIHJldHVybiBcIihpMzIuZ2VfcylcIlxuICAgIGNhc2UgQmluT3AuTHQ6XG4gICAgICByZXR1cm4gXCIoaTMyLmx0X3MpXCJcbiAgICBjYXNlIEJpbk9wLkd0OlxuICAgICAgcmV0dXJuIFwiKGkzMi5ndF9zKVwiXG4gICAgY2FzZSBCaW5PcC5JczpcbiAgICAgIHJldHVybiBcIihpMzIuZXEpXCI7XG4gICAgY2FzZSBCaW5PcC5BbmQ6XG4gICAgICByZXR1cm4gXCIoaTMyLmFuZClcIlxuICAgIGNhc2UgQmluT3AuT3I6XG4gICAgICByZXR1cm4gXCIoaTMyLm9yKVwiXG4gIH1cbn1cblxuZnVuY3Rpb24gY29kZUdlbkluaXQoaW5pdCA6IFZhckluaXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4sIGVudiA6IEdsb2JhbEVudikgOiBBcnJheTxzdHJpbmc+IHtcbiAgY29uc3QgdmFsdWUgPSBjb2RlR2VuVmFsdWUoaW5pdC52YWx1ZSwgZW52KTtcbiAgaWYgKGVudi5sb2NhbHMuaGFzKGluaXQubmFtZSkpIHtcbiAgICByZXR1cm4gWy4uLnZhbHVlLCBgKGxvY2FsLnNldCAkJHtpbml0Lm5hbWV9KWBdOyBcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gWy4uLnZhbHVlLCBgKGdsb2JhbC5zZXQgJCR7aW5pdC5uYW1lfSlgXTsgXG4gIH1cbn1cblxuZnVuY3Rpb24gY29kZUdlbkRlZihkZWYgOiBGdW5EZWY8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4sIGVudiA6IEdsb2JhbEVudikgOiBBcnJheTxzdHJpbmc+IHtcbiAgdmFyIGRlZmluZWRWYXJzIDogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gIGRlZi5pbml0cy5mb3JFYWNoKHYgPT4gZGVmaW5lZFZhcnMuYWRkKHYubmFtZSkpO1xuICBkZWZpbmVkVmFycy5hZGQoXCIkbGFzdFwiKTtcbiAgZGVmaW5lZFZhcnMuYWRkKFwiJHNlbGVjdG9yXCIpO1xuICAvLyBkZWYucGFyYW1ldGVycy5mb3JFYWNoKHAgPT4gZGVmaW5lZFZhcnMuZGVsZXRlKHAubmFtZSkpO1xuICBkZWZpbmVkVmFycy5mb3JFYWNoKGVudi5sb2NhbHMuYWRkLCBlbnYubG9jYWxzKTtcbiAgZGVmLnBhcmFtZXRlcnMuZm9yRWFjaChwID0+IGVudi5sb2NhbHMuYWRkKHAubmFtZSkpO1xuICBlbnYubGFiZWxzID0gZGVmLmJvZHkubWFwKGJsb2NrID0+IGJsb2NrLmxhYmVsKTtcbiAgY29uc3QgbG9jYWxEZWZpbmVzID0gbWFrZUxvY2FscyhkZWZpbmVkVmFycyk7XG4gIGNvbnN0IGxvY2FscyA9IGxvY2FsRGVmaW5lcy5qb2luKFwiXFxuXCIpO1xuICBjb25zdCBpbml0cyA9IGRlZi5pbml0cy5tYXAoaW5pdCA9PiBjb2RlR2VuSW5pdChpbml0LCBlbnYpKS5mbGF0KCkuam9pbihcIlxcblwiKTtcbiAgdmFyIHBhcmFtcyA9IGRlZi5wYXJhbWV0ZXJzLm1hcChwID0+IGAocGFyYW0gJCR7cC5uYW1lfSBpMzIpYCkuam9pbihcIiBcIik7XG4gIHZhciBib2R5Q29tbWFuZHMgPSBcIihsb2NhbC5zZXQgJCRzZWxlY3RvciAoaTMyLmNvbnN0IDApKVxcblwiXG4gIGJvZHlDb21tYW5kcyArPSBcIihsb29wICRsb29wXFxuXCJcblxuICB2YXIgYmxvY2tDb21tYW5kcyA9IFwiKGxvY2FsLmdldCAkJHNlbGVjdG9yKVxcblwiXG4gIGJsb2NrQ29tbWFuZHMgKz0gYChicl90YWJsZSAke2RlZi5ib2R5Lm1hcChibG9jayA9PiBibG9jay5sYWJlbCkuam9pbihcIiBcIil9KWA7XG4gIGRlZi5ib2R5LmZvckVhY2goYmxvY2sgPT4ge1xuICAgIGJsb2NrQ29tbWFuZHMgPSBgKGJsb2NrICR7YmxvY2subGFiZWx9XG4gICAgICAgICAgICAgICR7YmxvY2tDb21tYW5kc30gICAgXG4gICAgICAgICAgICApIDs7IGVuZCAke2Jsb2NrLmxhYmVsfVxuICAgICAgICAgICAgJHtibG9jay5zdG10cy5tYXAoc3RtdCA9PiBjb2RlR2VuU3RtdChzdG10LCBlbnYpLmpvaW4oJ1xcbicpKS5qb2luKCdcXG4nKX1cbiAgICAgICAgICAgIGBcbiAgfSlcbiAgYm9keUNvbW1hbmRzICs9IGJsb2NrQ29tbWFuZHM7XG4gIGJvZHlDb21tYW5kcyArPSBcIikgOzsgZW5kICRsb29wXCJcbiAgZW52LmxvY2Fscy5jbGVhcigpO1xuICByZXR1cm4gW2AoZnVuYyAkJHtkZWYubmFtZX0gJHtwYXJhbXN9IChyZXN1bHQgaTMyKVxuICAgICR7bG9jYWxzfVxuICAgICR7aW5pdHN9XG4gICAgJHtib2R5Q29tbWFuZHN9XG4gICAgKGkzMi5jb25zdCAwKVxuICAgIChyZXR1cm4pKWBdO1xufVxuXG5mdW5jdGlvbiBjb2RlR2VuQ2xhc3MoY2xzIDogQ2xhc3M8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4sIGVudiA6IEdsb2JhbEVudikgOiBBcnJheTxzdHJpbmc+IHtcbiAgY29uc3QgbWV0aG9kcyA9IFsuLi5jbHMubWV0aG9kc107XG4gIG1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4gbWV0aG9kLm5hbWUgPSBgJHtjbHMubmFtZX0kJHttZXRob2QubmFtZX1gKTtcbiAgY29uc3QgcmVzdWx0ID0gbWV0aG9kcy5tYXAobWV0aG9kID0+IGNvZGVHZW5EZWYobWV0aG9kLCBlbnYpKTtcbiAgcmV0dXJuIHJlc3VsdC5mbGF0KCk7XG4gIH1cbiIsIlxuZXhwb3J0IGNsYXNzIENvbXBpbGVUaW1lRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgX19wcm90b19fOiBFcnJvclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgY29uc3QgdHJ1ZVByb3RvID0gbmV3LnRhcmdldC5wcm90b3R5cGU7XG4gICAgIHN1cGVyKG1lc3NhZ2UpO1xuIFxuICAgICAvLyBBbHRlcm5hdGl2ZWx5IHVzZSBPYmplY3Quc2V0UHJvdG90eXBlT2YgaWYgeW91IGhhdmUgYW4gRVM2IGVudmlyb25tZW50LlxuICAgICB0aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcbiAgIH0gXG4gfVxuXG4vLyBJIOKdpO+4jyBUeXBlU2NyaXB0OiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1XG5leHBvcnQgY2xhc3MgVHlwZUNoZWNrRXJyb3IgZXh0ZW5kcyBDb21waWxlVGltZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgIHN1cGVyKFwiVFlQRSBFUlJPUjogXCIgKyBtZXNzYWdlKTtcbiAgIH0gXG4gfVxuXG4gZXhwb3J0IGNsYXNzIFJlZmVyZW5jZUVycm9yIGV4dGVuZHMgQ29tcGlsZVRpbWVFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICBzdXBlcihcIlJFRkVSRU5DRSBFUlJPUjogXCIgKyBtZXNzYWdlKTtcbiAgIH0gXG4gfVxuXG4gZXhwb3J0IGNsYXNzIFBhcnNlRXJyb3IgZXh0ZW5kcyBDb21waWxlVGltZUVycm9yIHtcbiAgICBfX3Byb3RvX186IENvbXBpbGVUaW1lRXJyb3IgXG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZywgbGluZT86IG51bWJlcikge1xuICAgICBjb25zdCB0cnVlUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgc3VwZXIoXCJQQVJTRSBFUlJPUjogXCIgKyBtZXNzYWdlICsgXCJhdCBsaW5lIFwiICsgbGluZS50b1N0cmluZygpKTtcbiAgICAgdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XG4gICB9IFxuIH1cblxuIGV4cG9ydCBjbGFzcyBSdW5UaW1lRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgX19wcm90b19fOiBFcnJvclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgY29uc3QgdHJ1ZVByb3RvID0gbmV3LnRhcmdldC5wcm90b3R5cGU7XG4gICAgIHN1cGVyKFwiUlVOVElNRSBFUlJPUjogXCIgKyBtZXNzYWdlKTtcbiBcbiAgICAgLy8gQWx0ZXJuYXRpdmVseSB1c2UgT2JqZWN0LnNldFByb3RvdHlwZU9mIGlmIHlvdSBoYXZlIGFuIEVTNiBlbnZpcm9ubWVudC5cbiAgICAgdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XG4gICB9IFxuIH1cblxuIiwiaW1wb3J0ICogYXMgQVNUIGZyb20gJy4vYXN0JztcbmltcG9ydCAqIGFzIElSIGZyb20gJy4vaXInO1xuaW1wb3J0IHsgVHlwZSwgU291cmNlTG9jYXRpb24gfSBmcm9tICcuL2FzdCc7XG5pbXBvcnQgeyBHbG9iYWxFbnYgfSBmcm9tICcuL2NvbXBpbGVyJztcblxuY29uc3QgbmFtZUNvdW50ZXJzIDogTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdlbmVyYXRlTmFtZShiYXNlIDogc3RyaW5nKSA6IHN0cmluZyB7XG4gIGlmKG5hbWVDb3VudGVycy5oYXMoYmFzZSkpIHtcbiAgICB2YXIgY3VyID0gbmFtZUNvdW50ZXJzLmdldChiYXNlKTtcbiAgICBuYW1lQ291bnRlcnMuc2V0KGJhc2UsIGN1ciArIDEpO1xuICAgIHJldHVybiBiYXNlICsgKGN1ciArIDEpO1xuICB9XG4gIGVsc2Uge1xuICAgIG5hbWVDb3VudGVycy5zZXQoYmFzZSwgMSk7XG4gICAgcmV0dXJuIGJhc2UgKyAxO1xuICB9XG59XG5cbi8vIGZ1bmN0aW9uIGxibChhOiBUeXBlLCBiYXNlOiBzdHJpbmcpIDogW3N0cmluZywgSVIuU3RtdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPl0ge1xuLy8gICBjb25zdCBuYW1lID0gZ2VuZXJhdGVOYW1lKGJhc2UpO1xuLy8gICByZXR1cm4gW25hbWUsIHt0YWc6IFwibGFiZWxcIiwgYTogYSwgbmFtZTogbmFtZX1dO1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gbG93ZXJQcm9ncmFtKHAgOiBBU1QuUHJvZ3JhbTxbVHlwZSwgU291cmNlTG9jYXRpb25dPiwgZW52IDogR2xvYmFsRW52KSA6IElSLlByb2dyYW08W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4ge1xuICAgIHZhciBibG9ja3MgOiBBcnJheTxJUi5CYXNpY0Jsb2NrPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiA9IFtdO1xuICAgIHZhciBmaXJzdEJsb2NrIDogSVIuQmFzaWNCbG9jazxbVHlwZSwgU291cmNlTG9jYXRpb25dPiA9IHsgIGE6IHAuYSwgbGFiZWw6IGdlbmVyYXRlTmFtZShcIiRzdGFydFByb2dcIiksIHN0bXRzOiBbXSB9XG4gICAgYmxvY2tzLnB1c2goZmlyc3RCbG9jayk7XG4gICAgdmFyIGluaXRzID0gZmxhdHRlblN0bXRzKHAuc3RtdHMsIGJsb2NrcywgZW52KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhOiBwLmEsXG4gICAgICAgIGZ1bnM6IGxvd2VyRnVuRGVmcyhwLmZ1bnMsIGVudiksXG4gICAgICAgIGluaXRzOiBbLi4uaW5pdHMsIC4uLmxvd2VyVmFySW5pdHMocC5pbml0cywgZW52KV0sXG4gICAgICAgIGNsYXNzZXM6IGxvd2VyQ2xhc3NlcyhwLmNsYXNzZXMsIGVudiksXG4gICAgICAgIGJvZHk6IGJsb2Nrc1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbG93ZXJGdW5EZWZzKGZzIDogQXJyYXk8QVNULkZ1bkRlZjxbVHlwZSwgU291cmNlTG9jYXRpb25dPj4sIGVudiA6IEdsb2JhbEVudikgOiBBcnJheTxJUi5GdW5EZWY8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+IHtcbiAgICByZXR1cm4gZnMubWFwKGYgPT4gbG93ZXJGdW5EZWYoZiwgZW52KSkuZmxhdCgpO1xufVxuXG5mdW5jdGlvbiBsb3dlckZ1bkRlZihmIDogQVNULkZ1bkRlZjxbVHlwZSwgU291cmNlTG9jYXRpb25dPiwgZW52IDogR2xvYmFsRW52KSA6IElSLkZ1bkRlZjxbVHlwZSwgU291cmNlTG9jYXRpb25dPiB7XG4gIHZhciBibG9ja3MgOiBBcnJheTxJUi5CYXNpY0Jsb2NrPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiA9IFtdO1xuICB2YXIgZmlyc3RCbG9jayA6IElSLkJhc2ljQmxvY2s8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4gPSB7ICBhOiBmLmEsIGxhYmVsOiBnZW5lcmF0ZU5hbWUoXCIkc3RhcnRGdW5cIiksIHN0bXRzOiBbXSB9XG4gIGJsb2Nrcy5wdXNoKGZpcnN0QmxvY2spO1xuICB2YXIgYm9keWluaXRzID0gZmxhdHRlblN0bXRzKGYuYm9keSwgYmxvY2tzLCBlbnYpO1xuICAgIHJldHVybiB7Li4uZiwgaW5pdHM6IFsuLi5ib2R5aW5pdHMsIC4uLmxvd2VyVmFySW5pdHMoZi5pbml0cywgZW52KV0sIGJvZHk6IGJsb2Nrc31cbn1cblxuZnVuY3Rpb24gbG93ZXJWYXJJbml0cyhpbml0czogQXJyYXk8QVNULlZhckluaXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+LCBlbnY6IEdsb2JhbEVudikgOiBBcnJheTxJUi5WYXJJbml0PFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiB7XG4gICAgcmV0dXJuIGluaXRzLm1hcChpID0+IGxvd2VyVmFySW5pdChpLCBlbnYpKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJWYXJJbml0KGluaXQ6IEFTVC5WYXJJbml0PFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+LCBlbnY6IEdsb2JhbEVudikgOiBJUi5WYXJJbml0PFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbml0LFxuICAgICAgICB2YWx1ZTogbGl0ZXJhbFRvVmFsKGluaXQudmFsdWUpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb3dlckNsYXNzZXMoY2xhc3NlczogQXJyYXk8QVNULkNsYXNzPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiwgZW52IDogR2xvYmFsRW52KSA6IEFycmF5PElSLkNsYXNzPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiB7XG4gICAgcmV0dXJuIGNsYXNzZXMubWFwKGMgPT4gbG93ZXJDbGFzcyhjLCBlbnYpKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJDbGFzcyhjbHM6IEFTVC5DbGFzczxbVHlwZSwgU291cmNlTG9jYXRpb25dPiwgZW52IDogR2xvYmFsRW52KSA6IElSLkNsYXNzPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jbHMsXG4gICAgICAgIGZpZWxkczogbG93ZXJWYXJJbml0cyhjbHMuZmllbGRzLCBlbnYpLFxuICAgICAgICBtZXRob2RzOiBsb3dlckZ1bkRlZnMoY2xzLm1ldGhvZHMsIGVudilcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxpdGVyYWxUb1ZhbChsaXQ6IEFTVC5MaXRlcmFsKSA6IElSLlZhbHVlPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+IHtcbiAgICBzd2l0Y2gobGl0LnRhZykge1xuICAgICAgICBjYXNlIFwibnVtXCI6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5saXQsIHZhbHVlOiBCaWdJbnQobGl0LnZhbHVlKSB9XG4gICAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgICAgICByZXR1cm4gbGl0XG4gICAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgICAgICByZXR1cm4gbGl0ICAgICAgICBcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5TdG10cyhzIDogQXJyYXk8QVNULlN0bXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+LCBibG9ja3M6IEFycmF5PElSLkJhc2ljQmxvY2s8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+LCBlbnYgOiBHbG9iYWxFbnYpIDogQXJyYXk8SVIuVmFySW5pdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPj4ge1xuICB2YXIgaW5pdHM6IEFycmF5PElSLlZhckluaXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+ID0gW107XG4gIHMuZm9yRWFjaChzdG10ID0+IHtcbiAgICBpbml0cy5wdXNoKC4uLmZsYXR0ZW5TdG10KHN0bXQsIGJsb2NrcywgZW52KSk7XG4gIH0pO1xuICByZXR1cm4gaW5pdHM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5TdG10KHMgOiBBU1QuU3RtdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPiwgYmxvY2tzOiBBcnJheTxJUi5CYXNpY0Jsb2NrPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiwgZW52IDogR2xvYmFsRW52KSA6IEFycmF5PElSLlZhckluaXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+IHtcbiAgc3dpdGNoKHMudGFnKSB7XG4gICAgY2FzZSBcImFzc2lnblwiOlxuICAgICAgdmFyIFt2YWxpbml0cywgdmFsc3RtdHMsIHZhbGVdID0gZmxhdHRlbkV4cHJUb0V4cHIocy52YWx1ZSwgZW52KTtcbiAgICAgIGJsb2Nrc1tibG9ja3MubGVuZ3RoIC0gMV0uc3RtdHMucHVzaCguLi52YWxzdG10cywgeyBhOiBzLmEsIHRhZzogXCJhc3NpZ25cIiwgbmFtZTogcy5uYW1lLCB2YWx1ZTogdmFsZX0pO1xuICAgICAgcmV0dXJuIHZhbGluaXRzXG4gICAgICAvLyByZXR1cm4gW3ZhbGluaXRzLCBbXG4gICAgICAvLyAgIC4uLnZhbHN0bXRzLFxuICAgICAgLy8gICB7IGE6IHMuYSwgdGFnOiBcImFzc2lnblwiLCBuYW1lOiBzLm5hbWUsIHZhbHVlOiB2YWxlfVxuICAgICAgLy8gXV07XG5cbiAgICBjYXNlIFwicmV0dXJuXCI6XG4gICAgdmFyIFt2YWxpbml0cywgdmFsc3RtdHMsIHZhbF0gPSBmbGF0dGVuRXhwclRvVmFsKHMudmFsdWUsIGVudik7XG4gICAgYmxvY2tzW2Jsb2Nrcy5sZW5ndGggLSAxXS5zdG10cy5wdXNoKFxuICAgICAgICAgLi4udmFsc3RtdHMsXG4gICAgICAgICB7dGFnOiBcInJldHVyblwiLCBhOiBzLmEsIHZhbHVlOiB2YWx9XG4gICAgKTtcbiAgICByZXR1cm4gdmFsaW5pdHM7XG4gICAgLy8gcmV0dXJuIFt2YWxpbml0cywgW1xuICAgIC8vICAgICAuLi52YWxzdG10cyxcbiAgICAvLyAgICAge3RhZzogXCJyZXR1cm5cIiwgYTogcy5hLCB2YWx1ZTogdmFsfVxuICAgIC8vIF1dO1xuICBcbiAgICBjYXNlIFwiZXhwclwiOlxuICAgICAgdmFyIFtpbml0cywgc3RtdHMsIGVdID0gZmxhdHRlbkV4cHJUb0V4cHIocy5leHByLCBlbnYpO1xuICAgICAgYmxvY2tzW2Jsb2Nrcy5sZW5ndGggLSAxXS5zdG10cy5wdXNoKFxuICAgICAgICAuLi5zdG10cywge3RhZzogXCJleHByXCIsIGE6IHMuYSwgZXhwcjogZSB9XG4gICAgICApO1xuICAgICAgcmV0dXJuIGluaXRzO1xuICAgIC8vICByZXR1cm4gW2luaXRzLCBbIC4uLnN0bXRzLCB7dGFnOiBcImV4cHJcIiwgYTogcy5hLCBleHByOiBlIH0gXV07XG5cbiAgICBjYXNlIFwicGFzc1wiOlxuICAgICAgcmV0dXJuIFtdO1xuXG4gICAgY2FzZSBcImZpZWxkLWFzc2lnblwiOiB7XG4gICAgICB2YXIgW29pbml0cywgb3N0bXRzLCBvdmFsXSA9IGZsYXR0ZW5FeHByVG9WYWwocy5vYmosIGVudik7XG4gICAgICB2YXIgW25pbml0cywgbnN0bXRzLCBudmFsXSA9IGZsYXR0ZW5FeHByVG9WYWwocy52YWx1ZSwgZW52KTtcbiAgICAgIGlmKHMub2JqLmFbMF0udGFnICE9PSBcImNsYXNzXCIpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ29tcGlsZXIncyBjdXJzZWQsIGdvIGhvbWUuXCIpOyB9XG4gICAgICBjb25zdCBjbGFzc2RhdGEgPSBlbnYuY2xhc3Nlcy5nZXQocy5vYmouYVswXS5uYW1lKTtcbiAgICAgIGNvbnN0IG9mZnNldCA6IElSLlZhbHVlPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+ID0geyB0YWc6IFwid2FzbWludFwiLCB2YWx1ZTogY2xhc3NkYXRhLmdldChzLmZpZWxkKVswXSB9O1xuICAgICAgcHVzaFN0bXRzVG9MYXN0QmxvY2soYmxvY2tzLFxuICAgICAgICAuLi5vc3RtdHMsIC4uLm5zdG10cywge1xuICAgICAgICAgIHRhZzogXCJzdG9yZVwiLFxuICAgICAgICAgIGE6IHMuYSxcbiAgICAgICAgICBzdGFydDogb3ZhbCxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICB2YWx1ZTogbnZhbFxuICAgICAgICB9KTtcbiAgICAgIHJldHVybiBbLi4ub2luaXRzLCAuLi5uaW5pdHNdO1xuICAgIH1cbiAgICAgIC8vIHJldHVybiBbWy4uLm9pbml0cywgLi4ubmluaXRzXSwgWy4uLm9zdG10cywgLi4ubnN0bXRzLCB7XG4gICAgICAvLyAgIHRhZzogXCJmaWVsZC1hc3NpZ25cIixcbiAgICAgIC8vICAgYTogcy5hLFxuICAgICAgLy8gICBvYmo6IG92YWwsXG4gICAgICAvLyAgIGZpZWxkOiBzLmZpZWxkLFxuICAgICAgLy8gICB2YWx1ZTogbnZhbFxuICAgICAgLy8gfV1dO1xuXG4gICAgY2FzZSBcImlmXCI6XG4gICAgICB2YXIgdGhlbkxibCA9IGdlbmVyYXRlTmFtZShcIiR0aGVuXCIpXG4gICAgICB2YXIgZWxzZUxibCA9IGdlbmVyYXRlTmFtZShcIiRlbHNlXCIpXG4gICAgICB2YXIgZW5kTGJsID0gZ2VuZXJhdGVOYW1lKFwiJGVuZFwiKVxuICAgICAgdmFyIGVuZGptcCA6IElSLlN0bXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4gPSB7IHRhZzogXCJqbXBcIiwgbGJsOiBlbmRMYmwgfTtcbiAgICAgIHZhciBbY2luaXRzLCBjc3RtdHMsIGNleHByXSA9IGZsYXR0ZW5FeHByVG9WYWwocy5jb25kLCBlbnYpO1xuICAgICAgdmFyIGNvbmRqbXAgOiBJUi5TdG10PFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+ID0geyB0YWc6IFwiaWZqbXBcIiwgY29uZDogY2V4cHIsIHRobjogdGhlbkxibCwgZWxzOiBlbHNlTGJsIH07XG4gICAgICBwdXNoU3RtdHNUb0xhc3RCbG9jayhibG9ja3MsIC4uLmNzdG10cywgY29uZGptcCk7XG4gICAgICBibG9ja3MucHVzaCh7ICBhOiBzLmEsIGxhYmVsOiB0aGVuTGJsLCBzdG10czogW10gfSlcbiAgICAgIHZhciB0aGVuaW5pdHMgPSBmbGF0dGVuU3RtdHMocy50aG4sIGJsb2NrcywgZW52KTtcbiAgICAgIHB1c2hTdG10c1RvTGFzdEJsb2NrKGJsb2NrcywgZW5kam1wKTtcbiAgICAgIGJsb2Nrcy5wdXNoKHsgIGE6IHMuYSwgbGFiZWw6IGVsc2VMYmwsIHN0bXRzOiBbXSB9KVxuICAgICAgdmFyIGVsc2Vpbml0cyA9IGZsYXR0ZW5TdG10cyhzLmVscywgYmxvY2tzLCBlbnYpO1xuICAgICAgcHVzaFN0bXRzVG9MYXN0QmxvY2soYmxvY2tzLCBlbmRqbXApO1xuICAgICAgYmxvY2tzLnB1c2goeyAgYTogcy5hLCBsYWJlbDogZW5kTGJsLCBzdG10czogW10gfSlcbiAgICAgIHJldHVybiBbLi4uY2luaXRzLCAuLi50aGVuaW5pdHMsIC4uLmVsc2Vpbml0c11cblxuICAgICAgLy8gcmV0dXJuIFtbLi4uY2luaXRzLCAuLi50aGVuaW5pdHMsIC4uLmVsc2Vpbml0c10sIFtcbiAgICAgIC8vICAgLi4uY3N0bXRzLCBcbiAgICAgIC8vICAgY29uZGptcCxcbiAgICAgIC8vICAgc3RhcnRsYmwsXG4gICAgICAvLyAgIC4uLnRoZW5zdG10cyxcbiAgICAgIC8vICAgZW5kam1wLFxuICAgICAgLy8gICBlbHNsYmwsXG4gICAgICAvLyAgIC4uLmVsc2VzdG10cyxcbiAgICAgIC8vICAgZW5kam1wLFxuICAgICAgLy8gICBlbmRsYmwsXG4gICAgICAvLyBdXTtcbiAgICBcbiAgICBjYXNlIFwid2hpbGVcIjpcbiAgICAgIHZhciB3aGlsZVN0YXJ0TGJsID0gZ2VuZXJhdGVOYW1lKFwiJHdoaWxlc3RhcnRcIik7XG4gICAgICB2YXIgd2hpbGVib2R5TGJsID0gZ2VuZXJhdGVOYW1lKFwiJHdoaWxlYm9keVwiKTtcbiAgICAgIHZhciB3aGlsZUVuZExibCA9IGdlbmVyYXRlTmFtZShcIiR3aGlsZWVuZFwiKTtcblxuICAgICAgcHVzaFN0bXRzVG9MYXN0QmxvY2soYmxvY2tzLCB7IHRhZzogXCJqbXBcIiwgbGJsOiB3aGlsZVN0YXJ0TGJsIH0pXG4gICAgICBibG9ja3MucHVzaCh7ICBhOiBzLmEsIGxhYmVsOiB3aGlsZVN0YXJ0TGJsLCBzdG10czogW10gfSlcbiAgICAgIHZhciBbY2luaXRzLCBjc3RtdHMsIGNleHByXSA9IGZsYXR0ZW5FeHByVG9WYWwocy5jb25kLCBlbnYpO1xuICAgICAgcHVzaFN0bXRzVG9MYXN0QmxvY2soYmxvY2tzLCAuLi5jc3RtdHMsIHsgdGFnOiBcImlmam1wXCIsIGNvbmQ6IGNleHByLCB0aG46IHdoaWxlYm9keUxibCwgZWxzOiB3aGlsZUVuZExibCB9KTtcblxuICAgICAgYmxvY2tzLnB1c2goeyAgYTogcy5hLCBsYWJlbDogd2hpbGVib2R5TGJsLCBzdG10czogW10gfSlcbiAgICAgIHZhciBib2R5aW5pdHMgPSBmbGF0dGVuU3RtdHMocy5ib2R5LCBibG9ja3MsIGVudik7XG4gICAgICBwdXNoU3RtdHNUb0xhc3RCbG9jayhibG9ja3MsIHsgdGFnOiBcImptcFwiLCBsYmw6IHdoaWxlU3RhcnRMYmwgfSk7XG5cbiAgICAgIGJsb2Nrcy5wdXNoKHsgIGE6IHMuYSwgbGFiZWw6IHdoaWxlRW5kTGJsLCBzdG10czogW10gfSlcblxuICAgICAgcmV0dXJuIFsuLi5jaW5pdHMsIC4uLmJvZHlpbml0c11cbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0dGVuRXhwclRvRXhwcihlIDogQVNULkV4cHI8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4sIGVudiA6IEdsb2JhbEVudikgOiBbQXJyYXk8SVIuVmFySW5pdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPj4sIEFycmF5PElSLlN0bXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+LCBJUi5FeHByPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+XSB7XG4gIHN3aXRjaChlLnRhZykge1xuICAgIGNhc2UgXCJ1bmlvcFwiOlxuICAgICAgdmFyIFtpbml0cywgc3RtdHMsIHZhbF0gPSBmbGF0dGVuRXhwclRvVmFsKGUuZXhwciwgZW52KTtcbiAgICAgIHJldHVybiBbaW5pdHMsIHN0bXRzLCB7XG4gICAgICAgIC4uLmUsXG4gICAgICAgIGV4cHI6IHZhbFxuICAgICAgfV07XG4gICAgY2FzZSBcImJpbm9wXCI6XG4gICAgICB2YXIgW2xpbml0cywgbHN0bXRzLCBsdmFsXSA9IGZsYXR0ZW5FeHByVG9WYWwoZS5sZWZ0LCBlbnYpO1xuICAgICAgdmFyIFtyaW5pdHMsIHJzdG10cywgcnZhbF0gPSBmbGF0dGVuRXhwclRvVmFsKGUucmlnaHQsIGVudik7XG4gICAgICByZXR1cm4gW1suLi5saW5pdHMsIC4uLnJpbml0c10sIFsuLi5sc3RtdHMsIC4uLnJzdG10c10sIHtcbiAgICAgICAgICAuLi5lLFxuICAgICAgICAgIGxlZnQ6IGx2YWwsXG4gICAgICAgICAgcmlnaHQ6IHJ2YWxcbiAgICAgICAgfV07XG4gICAgY2FzZSBcImJ1aWx0aW4xXCI6XG4gICAgICB2YXIgW2luaXRzLCBzdG10cywgdmFsXSA9IGZsYXR0ZW5FeHByVG9WYWwoZS5hcmcsIGVudik7XG4gICAgICByZXR1cm4gW2luaXRzLCBzdG10cywge3RhZzogXCJidWlsdGluMVwiLCBhOiBlLmEsIG5hbWU6IGUubmFtZSwgYXJnOiB2YWx9XTtcbiAgICBjYXNlIFwiYnVpbHRpbjJcIjpcbiAgICAgIHZhciBbbGluaXRzLCBsc3RtdHMsIGx2YWxdID0gZmxhdHRlbkV4cHJUb1ZhbChlLmxlZnQsIGVudik7XG4gICAgICB2YXIgW3Jpbml0cywgcnN0bXRzLCBydmFsXSA9IGZsYXR0ZW5FeHByVG9WYWwoZS5yaWdodCwgZW52KTtcbiAgICAgIHJldHVybiBbWy4uLmxpbml0cywgLi4ucmluaXRzXSwgWy4uLmxzdG10cywgLi4ucnN0bXRzXSwge1xuICAgICAgICAgIC4uLmUsXG4gICAgICAgICAgbGVmdDogbHZhbCxcbiAgICAgICAgICByaWdodDogcnZhbFxuICAgICAgICB9XTtcbiAgICBjYXNlIFwiY2FsbFwiOlxuICAgICAgY29uc3QgY2FsbHBhaXJzID0gZS5hcmd1bWVudHMubWFwKGEgPT4gZmxhdHRlbkV4cHJUb1ZhbChhLCBlbnYpKTtcbiAgICAgIGNvbnN0IGNhbGxpbml0cyA9IGNhbGxwYWlycy5tYXAoY3AgPT4gY3BbMF0pLmZsYXQoKTtcbiAgICAgIGNvbnN0IGNhbGxzdG10cyA9IGNhbGxwYWlycy5tYXAoY3AgPT4gY3BbMV0pLmZsYXQoKTtcbiAgICAgIGNvbnN0IGNhbGx2YWxzID0gY2FsbHBhaXJzLm1hcChjcCA9PiBjcFsyXSkuZmxhdCgpO1xuICAgICAgcmV0dXJuIFsgY2FsbGluaXRzLCBjYWxsc3RtdHMsXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5lLFxuICAgICAgICAgIGFyZ3VtZW50czogY2FsbHZhbHNcbiAgICAgICAgfVxuICAgICAgXTtcbiAgICBjYXNlIFwibWV0aG9kLWNhbGxcIjoge1xuICAgICAgY29uc3QgW29iamluaXRzLCBvYmpzdG10cywgb2JqdmFsXSA9IGZsYXR0ZW5FeHByVG9WYWwoZS5vYmosIGVudik7XG4gICAgICBjb25zdCBhcmdwYWlycyA9IGUuYXJndW1lbnRzLm1hcChhID0+IGZsYXR0ZW5FeHByVG9WYWwoYSwgZW52KSk7XG4gICAgICBjb25zdCBhcmdpbml0cyA9IGFyZ3BhaXJzLm1hcChjcCA9PiBjcFswXSkuZmxhdCgpO1xuICAgICAgY29uc3QgYXJnc3RtdHMgPSBhcmdwYWlycy5tYXAoY3AgPT4gY3BbMV0pLmZsYXQoKTtcbiAgICAgIGNvbnN0IGFyZ3ZhbHMgPSBhcmdwYWlycy5tYXAoY3AgPT4gY3BbMl0pLmZsYXQoKTtcbiAgICAgIHZhciBvYmpUeXAgPSBlLm9iai5hWzBdO1xuICAgICAgaWYob2JqVHlwLnRhZyAhPT0gXCJjbGFzc1wiKSB7IC8vIEkgZG9uJ3QgdGhpbmsgdGhpcyBlcnJvciBjYW4gaGFwcGVuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlcG9ydCB0aGlzIGFzIGEgYnVnIHRvIHRoZSBjb21waWxlciBkZXZlbG9wZXIsIHRoaXMgc2hvdWxkbid0IGhhcHBlbiBcIiArIG9ialR5cC50YWcpO1xuICAgICAgfVxuICAgICAgY29uc3QgY2xhc3NOYW1lID0gb2JqVHlwLm5hbWU7XG4gICAgICBjb25zdCBjaGVja09iaiA6IElSLlN0bXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4gPSB7IHRhZzogXCJleHByXCIsIGV4cHI6IHsgdGFnOiBcImNhbGxcIiwgbmFtZTogYGFzc2VydF9ub3Rfbm9uZWAsIGFyZ3VtZW50czogW29ianZhbF19fVxuICAgICAgY29uc3QgY2FsbE1ldGhvZCA6IElSLkV4cHI8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4gPSB7IHRhZzogXCJjYWxsXCIsIG5hbWU6IGAke2NsYXNzTmFtZX0kJHtlLm1ldGhvZH1gLCBhcmd1bWVudHM6IFtvYmp2YWwsIC4uLmFyZ3ZhbHNdIH1cbiAgICAgIHJldHVybiBbXG4gICAgICAgIFsuLi5vYmppbml0cywgLi4uYXJnaW5pdHNdLFxuICAgICAgICBbLi4ub2Jqc3RtdHMsIGNoZWNrT2JqLCAuLi5hcmdzdG10c10sXG4gICAgICAgIGNhbGxNZXRob2RcbiAgICAgIF07XG4gICAgfVxuICAgIGNhc2UgXCJsb29rdXBcIjoge1xuICAgICAgY29uc3QgW29pbml0cywgb3N0bXRzLCBvdmFsXSA9IGZsYXR0ZW5FeHByVG9WYWwoZS5vYmosIGVudik7XG4gICAgICBpZihlLm9iai5hWzBdLnRhZyAhPT0gXCJjbGFzc1wiKSB7IHRocm93IG5ldyBFcnJvcihcIkNvbXBpbGVyJ3MgY3Vyc2VkLCBnbyBob21lXCIpOyB9XG4gICAgICBjb25zdCBjbGFzc2RhdGEgPSBlbnYuY2xhc3Nlcy5nZXQoZS5vYmouYVswXS5uYW1lKTtcbiAgICAgIGNvbnN0IFtvZmZzZXQsIF9dID0gY2xhc3NkYXRhLmdldChlLmZpZWxkKTtcbiAgICAgIHJldHVybiBbb2luaXRzLCBvc3RtdHMsIHtcbiAgICAgICAgdGFnOiBcImxvYWRcIixcbiAgICAgICAgc3RhcnQ6IG92YWwsXG4gICAgICAgIG9mZnNldDogeyB0YWc6IFwid2FzbWludFwiLCB2YWx1ZTogb2Zmc2V0IH19XTtcbiAgICB9XG4gICAgY2FzZSBcImNvbnN0cnVjdFwiOlxuICAgICAgY29uc3QgY2xhc3NkYXRhID0gZW52LmNsYXNzZXMuZ2V0KGUubmFtZSk7XG4gICAgICBjb25zdCBmaWVsZHMgPSBbLi4uY2xhc3NkYXRhLmVudHJpZXMoKV07XG4gICAgICBjb25zdCBuZXdOYW1lID0gZ2VuZXJhdGVOYW1lKFwibmV3T2JqXCIpO1xuICAgICAgY29uc3QgYWxsb2MgOiBJUi5FeHByPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+ID0geyB0YWc6IFwiYWxsb2NcIiwgYW1vdW50OiB7IHRhZzogXCJ3YXNtaW50XCIsIHZhbHVlOiBmaWVsZHMubGVuZ3RoIH0gfTtcbiAgICAgIGNvbnN0IGFzc2lnbnMgOiBJUi5TdG10PFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+W10gPSBmaWVsZHMubWFwKGYgPT4ge1xuICAgICAgICBjb25zdCBbXywgW2luZGV4LCB2YWx1ZV1dID0gZjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0YWc6IFwic3RvcmVcIixcbiAgICAgICAgICBzdGFydDogeyB0YWc6IFwiaWRcIiwgbmFtZTogbmV3TmFtZSB9LFxuICAgICAgICAgIG9mZnNldDogeyB0YWc6IFwid2FzbWludFwiLCB2YWx1ZTogaW5kZXggfSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIFsgeyBuYW1lOiBuZXdOYW1lLCB0eXBlOiBlLmFbMF0sIHZhbHVlOiB7IHRhZzogXCJub25lXCIgfSB9XSxcbiAgICAgICAgWyB7IHRhZzogXCJhc3NpZ25cIiwgbmFtZTogbmV3TmFtZSwgdmFsdWU6IGFsbG9jIH0sIC4uLmFzc2lnbnMsXG4gICAgICAgICAgeyB0YWc6IFwiZXhwclwiLCBleHByOiB7IHRhZzogXCJjYWxsXCIsIG5hbWU6IGAke2UubmFtZX0kX19pbml0X19gLCBhcmd1bWVudHM6IFt7IGE6IGUuYSwgdGFnOiBcImlkXCIsIG5hbWU6IG5ld05hbWUgfV0gfSB9XG4gICAgICAgIF0sXG4gICAgICAgIHsgYTogZS5hLCB0YWc6IFwidmFsdWVcIiwgdmFsdWU6IHsgYTogZS5hLCB0YWc6IFwiaWRcIiwgbmFtZTogbmV3TmFtZSB9IH1cbiAgICAgIF07XG4gICAgY2FzZSBcImlkXCI6XG4gICAgICByZXR1cm4gW1tdLCBbXSwge3RhZzogXCJ2YWx1ZVwiLCB2YWx1ZTogeyAuLi5lIH19IF07XG4gICAgY2FzZSBcImxpdGVyYWxcIjpcbiAgICAgIHJldHVybiBbW10sIFtdLCB7dGFnOiBcInZhbHVlXCIsIHZhbHVlOiBsaXRlcmFsVG9WYWwoZS52YWx1ZSkgfSBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5FeHByVG9WYWwoZSA6IEFTVC5FeHByPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+LCBlbnYgOiBHbG9iYWxFbnYpIDogW0FycmF5PElSLlZhckluaXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+LCBBcnJheTxJUi5TdG10PFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiwgSVIuVmFsdWU8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT5dIHtcbiAgdmFyIFtiaW5pdHMsIGJzdG10cywgYmV4cHJdID0gZmxhdHRlbkV4cHJUb0V4cHIoZSwgZW52KTtcbiAgaWYoYmV4cHIudGFnID09PSBcInZhbHVlXCIpIHtcbiAgICByZXR1cm4gW2Jpbml0cywgYnN0bXRzLCBiZXhwci52YWx1ZV07XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIG5ld05hbWUgPSBnZW5lcmF0ZU5hbWUoXCJ2YWxuYW1lXCIpO1xuICAgIHZhciBzZXROZXdOYW1lIDogSVIuU3RtdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPiA9IHtcbiAgICAgIHRhZzogXCJhc3NpZ25cIixcbiAgICAgIGE6IGUuYSxcbiAgICAgIG5hbWU6IG5ld05hbWUsXG4gICAgICB2YWx1ZTogYmV4cHIgXG4gICAgfTtcbiAgICAvLyBUT0RPOiB3ZSBoYXZlIHRvIGFkZCBhIG5ldyB2YXIgaW5pdCBmb3IgdGhlIG5ldyB2YXJpYWJsZSB3ZSdyZSBjcmVhdGluZyBoZXJlLlxuICAgIC8vIGJ1dCB3aGF0IHNob3VsZCB0aGUgZGVmYXVsdCB2YWx1ZSBiZT9cbiAgICByZXR1cm4gW1xuICAgICAgWy4uLmJpbml0cywgeyBhOiBlLmEsIG5hbWU6IG5ld05hbWUsIHR5cGU6IGUuYVswXSwgdmFsdWU6IHsgdGFnOiBcIm5vbmVcIiB9IH1dLFxuICAgICAgWy4uLmJzdG10cywgc2V0TmV3TmFtZV0sICBcbiAgICAgIHt0YWc6IFwiaWRcIiwgbmFtZTogbmV3TmFtZSwgYTogZS5hfVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVzaFN0bXRzVG9MYXN0QmxvY2soYmxvY2tzOiBBcnJheTxJUi5CYXNpY0Jsb2NrPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+PiwgLi4uc3RtdHM6IEFycmF5PElSLlN0bXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4+KSB7XG4gIGJsb2Nrc1tibG9ja3MubGVuZ3RoIC0gMV0uc3RtdHMucHVzaCguLi5zdG10cyk7XG59IiwiaW1wb3J0IHtwYXJzZXJ9IGZyb20gXCJsZXplci1weXRob25cIjtcbmltcG9ydCB7IFRyZWVDdXJzb3J9IGZyb20gXCJsZXplci10cmVlXCI7XG5pbXBvcnQgeyBQcm9ncmFtLCBFeHByLCBTdG10LCBVbmlPcCwgQmluT3AsIFBhcmFtZXRlciwgVHlwZSwgRnVuRGVmLCBWYXJJbml0LCBDbGFzcywgTGl0ZXJhbCwgU291cmNlTG9jYXRpb24gfSBmcm9tIFwiLi9hc3RcIjtcbmltcG9ydCB7IE5VTSwgQk9PTCwgTk9ORSwgQ0xBU1MgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgc3RyaW5naWZ5VHJlZSB9IGZyb20gXCIuL3RyZWVwcmludGVyXCI7XG5pbXBvcnQgeyBQYXJzZUVycm9yfSBmcm9tIFwiLi9lcnJvcl9yZXBvcnRpbmdcIjtcblxuLy8gVG8gZ2V0IHRoZSBsaW5lIG51bWJlciBmcm9tIGxlemVyIHRyZWUgdG8gcmVwb3J0IGVycm9yc1xuZnVuY3Rpb24gZ2V0U291cmNlTG9jYXRpb24oYyA6IFRyZWVDdXJzb3IsIHMgOiBzdHJpbmcpIDogU291cmNlTG9jYXRpb24ge1xuICB2YXIgbGluZSA9IHMuc3Vic3RyaW5nKDAsIGMuZnJvbSkuc3BsaXQoXCJcXG5cIikubGVuZ3RoO1xuICByZXR1cm4geyBsaW5lIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlTGl0ZXJhbChjIDogVHJlZUN1cnNvciwgcyA6IHN0cmluZykgOiBMaXRlcmFsIHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0U291cmNlTG9jYXRpb24oYywgcyk7XG4gIHN3aXRjaChjLnR5cGUubmFtZSkge1xuICAgIGNhc2UgXCJOdW1iZXJcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhZzogXCJudW1cIixcbiAgICAgICAgdmFsdWU6IE51bWJlcihzLnN1YnN0cmluZyhjLmZyb20sIGMudG8pKVxuICAgICAgfVxuICAgIGNhc2UgXCJCb29sZWFuXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWc6IFwiYm9vbFwiLFxuICAgICAgICB2YWx1ZTogcy5zdWJzdHJpbmcoYy5mcm9tLCBjLnRvKSA9PT0gXCJUcnVlXCJcbiAgICAgIH1cbiAgICBjYXNlIFwiTm9uZVwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGFnOiBcIm5vbmVcIlxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcIk5vdCBsaXRlcmFsXCIsIGxvY2F0aW9uLmxpbmUpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlRXhwcihjIDogVHJlZUN1cnNvciwgcyA6IHN0cmluZykgOiBFeHByPFNvdXJjZUxvY2F0aW9uPiB7XG4gIHZhciBsb2NhdGlvbiA9IGdldFNvdXJjZUxvY2F0aW9uKGMsIHMpO1xuICBzd2l0Y2goYy50eXBlLm5hbWUpIHtcbiAgICBjYXNlIFwiTnVtYmVyXCI6XG4gICAgY2FzZSBcIkJvb2xlYW5cIjpcbiAgICBjYXNlIFwiTm9uZVwiOlxuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIGE6IGxvY2F0aW9uLFxuICAgICAgICB0YWc6IFwibGl0ZXJhbFwiLCBcbiAgICAgICAgdmFsdWU6IHRyYXZlcnNlTGl0ZXJhbChjLCBzKVxuICAgICAgfSAgICAgIFxuICAgIGNhc2UgXCJWYXJpYWJsZU5hbWVcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGE6IGxvY2F0aW9uLFxuICAgICAgICB0YWc6IFwiaWRcIixcbiAgICAgICAgbmFtZTogcy5zdWJzdHJpbmcoYy5mcm9tLCBjLnRvKVxuICAgICAgfVxuICAgIGNhc2UgXCJDYWxsRXhwcmVzc2lvblwiOlxuICAgICAgYy5maXJzdENoaWxkKCk7XG4gICAgICBjb25zdCBjYWxsRXhwciA9IHRyYXZlcnNlRXhwcihjLCBzKTtcbiAgICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gZ28gdG8gYXJnbGlzdFxuICAgICAgbGV0IGFyZ3MgPSB0cmF2ZXJzZUFyZ3VtZW50cyhjLCBzKTtcbiAgICAgIGMucGFyZW50KCk7IC8vIHBvcCBDYWxsRXhwcmVzc2lvblxuXG5cbiAgICAgIGlmIChjYWxsRXhwci50YWcgPT09IFwibG9va3VwXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhOiBsb2NhdGlvbixcbiAgICAgICAgICB0YWc6IFwibWV0aG9kLWNhbGxcIixcbiAgICAgICAgICBvYmo6IGNhbGxFeHByLm9iaixcbiAgICAgICAgICBtZXRob2Q6IGNhbGxFeHByLmZpZWxkLFxuICAgICAgICAgIGFyZ3VtZW50czogYXJnc1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNhbGxFeHByLnRhZyA9PT0gXCJpZFwiKSB7XG4gICAgICAgIGNvbnN0IGNhbGxOYW1lID0gY2FsbEV4cHIubmFtZTtcbiAgICAgICAgdmFyIGV4cHIgOiBFeHByPFNvdXJjZUxvY2F0aW9uPjtcbiAgICAgICAgaWYgKGNhbGxOYW1lID09PSBcInByaW50XCIgfHwgY2FsbE5hbWUgPT09IFwiYWJzXCIpIHtcbiAgICAgICAgICBleHByID0ge1xuICAgICAgICAgICAgYTogbG9jYXRpb24sXG4gICAgICAgICAgICB0YWc6IFwiYnVpbHRpbjFcIixcbiAgICAgICAgICAgIG5hbWU6IGNhbGxOYW1lLFxuICAgICAgICAgICAgYXJnOiBhcmdzWzBdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChjYWxsTmFtZSA9PT0gXCJtYXhcIiB8fCBjYWxsTmFtZSA9PT0gXCJtaW5cIiB8fCBjYWxsTmFtZSA9PT0gXCJwb3dcIikge1xuICAgICAgICAgIGV4cHIgPSB7XG4gICAgICAgICAgICBhOiBsb2NhdGlvbixcbiAgICAgICAgICAgIHRhZzogXCJidWlsdGluMlwiLFxuICAgICAgICAgICAgbmFtZTogY2FsbE5hbWUsXG4gICAgICAgICAgICBsZWZ0OiBhcmdzWzBdLFxuICAgICAgICAgICAgcmlnaHQ6IGFyZ3NbMV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZXhwciA9IHsgYTogbG9jYXRpb24sIHRhZzogXCJjYWxsXCIsIG5hbWU6IGNhbGxOYW1lLCBhcmd1bWVudHM6IGFyZ3N9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleHByOyAgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcIlVua25vd24gdGFyZ2V0IHdoaWxlIHBhcnNpbmcgYXNzaWdubWVudFwiLCBsb2NhdGlvbi5saW5lKTtcbiAgICAgIH1cblxuICAgIGNhc2UgXCJCaW5hcnlFeHByZXNzaW9uXCI6XG4gICAgICBjLmZpcnN0Q2hpbGQoKTsgLy8gZ28gdG8gbGhzIFxuICAgICAgY29uc3QgbGhzRXhwciA9IHRyYXZlcnNlRXhwcihjLCBzKTtcbiAgICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gZ28gdG8gb3BcbiAgICAgIHZhciBvcFN0ciA9IHMuc3Vic3RyaW5nKGMuZnJvbSwgYy50byk7XG4gICAgICB2YXIgb3A7XG4gICAgICBzd2l0Y2gob3BTdHIpIHtcbiAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICBvcCA9IEJpbk9wLlBsdXM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCItXCI6XG4gICAgICAgICAgb3AgPSBCaW5PcC5NaW51cztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIipcIjpcbiAgICAgICAgICBvcCA9IEJpbk9wLk11bDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIi8vXCI6XG4gICAgICAgICAgb3AgPSBCaW5PcC5JRGl2O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiJVwiOlxuICAgICAgICAgIG9wID0gQmluT3AuTW9kO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCI9PVwiOlxuICAgICAgICAgIG9wID0gQmluT3AuRXE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIhPVwiOlxuICAgICAgICAgIG9wID0gQmluT3AuTmVxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiPD1cIjpcbiAgICAgICAgICBvcCA9IEJpbk9wLkx0ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIj49XCI6XG4gICAgICAgICAgb3AgPSBCaW5PcC5HdGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI8XCI6XG4gICAgICAgICAgb3AgPSBCaW5PcC5MdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIj5cIjpcbiAgICAgICAgICBvcCA9IEJpbk9wLkd0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaXNcIjpcbiAgICAgICAgICBvcCA9IEJpbk9wLklzO1xuICAgICAgICAgIGJyZWFrOyBcbiAgICAgICAgY2FzZSBcImFuZFwiOlxuICAgICAgICAgIG9wID0gQmluT3AuQW5kO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwib3JcIjpcbiAgICAgICAgICBvcCA9IEJpbk9wLk9yO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFwiQ291bGQgbm90IHBhcnNlIG9wIGF0IFwiICsgYy5mcm9tICsgXCIgXCIgKyBjLnRvICsgXCI6IFwiICsgcy5zdWJzdHJpbmcoYy5mcm9tLCBjLnRvKSwgbG9jYXRpb24ubGluZSlcbiAgICAgIH1cbiAgICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gZ28gdG8gcmhzXG4gICAgICBjb25zdCByaHNFeHByID0gdHJhdmVyc2VFeHByKGMsIHMpO1xuICAgICAgYy5wYXJlbnQoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGE6IGxvY2F0aW9uLFxuICAgICAgICB0YWc6IFwiYmlub3BcIixcbiAgICAgICAgb3A6IG9wLFxuICAgICAgICBsZWZ0OiBsaHNFeHByLFxuICAgICAgICByaWdodDogcmhzRXhwclxuICAgICAgfVxuICAgIGNhc2UgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOlxuICAgICAgYy5maXJzdENoaWxkKCk7IC8vIEZvY3VzIG9uIChcbiAgICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXMgb24gaW5zaWRlXG4gICAgICB2YXIgZXhwciA9IHRyYXZlcnNlRXhwcihjLCBzKTtcbiAgICAgIGMucGFyZW50KCk7XG4gICAgICByZXR1cm4gZXhwcjtcbiAgICBjYXNlIFwiVW5hcnlFeHByZXNzaW9uXCI6XG4gICAgICBjLmZpcnN0Q2hpbGQoKTsgLy8gRm9jdXMgb24gb3BcbiAgICAgIHZhciBvcFN0ciA9IHMuc3Vic3RyaW5nKGMuZnJvbSwgYy50byk7XG4gICAgICB2YXIgb3A7XG4gICAgICBzd2l0Y2gob3BTdHIpIHtcbiAgICAgICAgY2FzZSBcIi1cIjpcbiAgICAgICAgICBvcCA9IFVuaU9wLk5lZztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm5vdFwiOlxuICAgICAgICAgIG9wID0gVW5pT3AuTm90O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFwiQ291bGQgbm90IHBhcnNlIG9wIGF0IFwiICsgYy5mcm9tICsgXCIgXCIgKyBjLnRvICsgXCI6IFwiICsgcy5zdWJzdHJpbmcoYy5mcm9tLCBjLnRvKSwgbG9jYXRpb24ubGluZSlcbiAgICAgIH1cbiAgICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gZ28gdG8gZXhwclxuICAgICAgdmFyIGV4cHIgPSB0cmF2ZXJzZUV4cHIoYywgcyk7XG4gICAgICBjLnBhcmVudCgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbG9jYXRpb24sXG4gICAgICAgIHRhZzogXCJ1bmlvcFwiLFxuICAgICAgICBvcDogb3AsXG4gICAgICAgIGV4cHI6IGV4cHJcbiAgICAgIH1cbiAgICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgYy5maXJzdENoaWxkKCk7IC8vIEZvY3VzIG9uIG9iamVjdFxuICAgICAgdmFyIG9iakV4cHIgPSB0cmF2ZXJzZUV4cHIoYywgcyk7XG4gICAgICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzIG9uIC5cbiAgICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXMgb24gcHJvcGVydHlcbiAgICAgIHZhciBwcm9wTmFtZSA9IHMuc3Vic3RyaW5nKGMuZnJvbSwgYy50byk7XG4gICAgICBjLnBhcmVudCgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbG9jYXRpb24sXG4gICAgICAgIHRhZzogXCJsb29rdXBcIixcbiAgICAgICAgb2JqOiBvYmpFeHByLFxuICAgICAgICBmaWVsZDogcHJvcE5hbWVcbiAgICAgIH1cbiAgICBjYXNlIFwic2VsZlwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbG9jYXRpb24sXG4gICAgICAgIHRhZzogXCJpZFwiLFxuICAgICAgICBuYW1lOiBcInNlbGZcIlxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoXCJDb3VsZCBub3QgcGFyc2UgZXhwciBhdCBcIiArIGMuZnJvbSArIFwiIFwiICsgYy50byArIFwiOiBcIiArIHMuc3Vic3RyaW5nKGMuZnJvbSwgYy50byksIGxvY2F0aW9uLmxpbmUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZUFyZ3VtZW50cyhjIDogVHJlZUN1cnNvciwgcyA6IHN0cmluZykgOiBBcnJheTxFeHByPFNvdXJjZUxvY2F0aW9uPj4ge1xuICBjLmZpcnN0Q2hpbGQoKTsgIC8vIEZvY3VzZXMgb24gb3BlbiBwYXJlblxuICBjb25zdCBhcmdzID0gW107XG4gIGMubmV4dFNpYmxpbmcoKTtcbiAgd2hpbGUoYy50eXBlLm5hbWUgIT09IFwiKVwiKSB7XG4gICAgbGV0IGV4cHIgPSB0cmF2ZXJzZUV4cHIoYywgcyk7XG4gICAgYXJncy5wdXNoKGV4cHIpO1xuICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXNlcyBvbiBlaXRoZXIgXCIsXCIgb3IgXCIpXCJcbiAgICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzZXMgb24gYSBWYXJpYWJsZU5hbWVcbiAgfSBcbiAgYy5wYXJlbnQoKTsgICAgICAgLy8gUG9wIHRvIEFyZ0xpc3RcbiAgcmV0dXJuIGFyZ3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZVN0bXQoYyA6IFRyZWVDdXJzb3IsIHMgOiBzdHJpbmcpIDogU3RtdDxTb3VyY2VMb2NhdGlvbj4ge1xuICB2YXIgbG9jYXRpb24gPSBnZXRTb3VyY2VMb2NhdGlvbihjLCBzKTtcbiAgc3dpdGNoKGMubm9kZS50eXBlLm5hbWUpIHtcbiAgICBjYXNlIFwiUmV0dXJuU3RhdGVtZW50XCI6XG4gICAgICBjLmZpcnN0Q2hpbGQoKTsgIC8vIEZvY3VzIHJldHVybiBrZXl3b3JkXG4gICAgICBcbiAgICAgIHZhciB2YWx1ZSA6IEV4cHI8U291cmNlTG9jYXRpb24+O1xuICAgICAgaWYgKGMubmV4dFNpYmxpbmcoKSkgLy8gRm9jdXMgZXhwcmVzc2lvblxuICAgICAgICB2YWx1ZSA9IHRyYXZlcnNlRXhwcihjLCBzKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdmFsdWUgPSB7IGE6IGxvY2F0aW9uLCB0YWc6IFwibGl0ZXJhbFwiLCB2YWx1ZTogeyB0YWc6IFwibm9uZVwiIH0gfTtcbiAgICAgIGMucGFyZW50KCk7XG4gICAgICByZXR1cm4geyBhOiBsb2NhdGlvbiwgdGFnOiBcInJldHVyblwiLCB2YWx1ZSB9O1xuICAgIGNhc2UgXCJBc3NpZ25TdGF0ZW1lbnRcIjpcbiAgICAgIGMuZmlyc3RDaGlsZCgpOyAvLyBnbyB0byBuYW1lXG4gICAgICBjb25zdCB0YXJnZXQgPSB0cmF2ZXJzZUV4cHIoYywgcyk7XG4gICAgICBjLm5leHRTaWJsaW5nKCk7IC8vIGdvIHRvIGVxdWFsc1xuICAgICAgYy5uZXh0U2libGluZygpOyAvLyBnbyB0byB2YWx1ZVxuICAgICAgdmFyIHZhbHVlID0gdHJhdmVyc2VFeHByKGMsIHMpO1xuICAgICAgYy5wYXJlbnQoKTtcblxuICAgICAgaWYgKHRhcmdldC50YWcgPT09IFwibG9va3VwXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhOiBsb2NhdGlvbixcbiAgICAgICAgICB0YWc6IFwiZmllbGQtYXNzaWduXCIsXG4gICAgICAgICAgb2JqOiB0YXJnZXQub2JqLFxuICAgICAgICAgIGZpZWxkOiB0YXJnZXQuZmllbGQsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LnRhZyA9PT0gXCJpZFwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYTogbG9jYXRpb24sXG4gICAgICAgICAgdGFnOiBcImFzc2lnblwiLFxuICAgICAgICAgIG5hbWU6IHRhcmdldC5uYW1lLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9ICBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFwiVW5rbm93biB0YXJnZXQgd2hpbGUgcGFyc2luZyBhc3NpZ25tZW50XCIsIGxvY2F0aW9uLmxpbmUpO1xuICAgICAgfVxuICAgIGNhc2UgXCJFeHByZXNzaW9uU3RhdGVtZW50XCI6XG4gICAgICBjLmZpcnN0Q2hpbGQoKTtcbiAgICAgIGNvbnN0IGV4cHIgPSB0cmF2ZXJzZUV4cHIoYywgcyk7XG4gICAgICBjLnBhcmVudCgpOyAvLyBwb3AgZ29pbmcgaW50byBzdG10XG4gICAgICByZXR1cm4geyBhOiBsb2NhdGlvbiwgdGFnOiBcImV4cHJcIiwgZXhwcjogZXhwciB9XG4gICAgLy8gY2FzZSBcIkZ1bmN0aW9uRGVmaW5pdGlvblwiOlxuICAgIC8vICAgYy5maXJzdENoaWxkKCk7ICAvLyBGb2N1cyBvbiBkZWZcbiAgICAvLyAgIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXMgb24gbmFtZSBvZiBmdW5jdGlvblxuICAgIC8vICAgdmFyIG5hbWUgPSBzLnN1YnN0cmluZyhjLmZyb20sIGMudG8pO1xuICAgIC8vICAgYy5uZXh0U2libGluZygpOyAvLyBGb2N1cyBvbiBQYXJhbUxpc3RcbiAgICAvLyAgIHZhciBwYXJhbWV0ZXJzID0gdHJhdmVyc2VQYXJhbWV0ZXJzKGMsIHMpXG4gICAgLy8gICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzIG9uIEJvZHkgb3IgVHlwZURlZlxuICAgIC8vICAgbGV0IHJldCA6IFR5cGUgPSBOT05FO1xuICAgIC8vICAgaWYoYy50eXBlLm5hbWUgPT09IFwiVHlwZURlZlwiKSB7XG4gICAgLy8gICAgIGMuZmlyc3RDaGlsZCgpO1xuICAgIC8vICAgICByZXQgPSB0cmF2ZXJzZVR5cGUoYywgcyk7XG4gICAgLy8gICAgIGMucGFyZW50KCk7XG4gICAgLy8gICB9XG4gICAgLy8gICBjLmZpcnN0Q2hpbGQoKTsgIC8vIEZvY3VzIG9uIDpcbiAgICAvLyAgIHZhciBib2R5ID0gW107XG4gICAgLy8gICB3aGlsZShjLm5leHRTaWJsaW5nKCkpIHtcbiAgICAvLyAgICAgYm9keS5wdXNoKHRyYXZlcnNlU3RtdChjLCBzKSk7XG4gICAgLy8gICB9XG4gICAgICAvLyBjb25zb2xlLmxvZyhcIkJlZm9yZSBwb3AgdG8gYm9keTogXCIsIGMudHlwZS5uYW1lKTtcbiAgICAvLyAgIGMucGFyZW50KCk7ICAgICAgLy8gUG9wIHRvIEJvZHlcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiQmVmb3JlIHBvcCB0byBkZWY6IFwiLCBjLnR5cGUubmFtZSk7XG4gICAgLy8gICBjLnBhcmVudCgpOyAgICAgIC8vIFBvcCB0byBGdW5jdGlvbkRlZmluaXRpb25cbiAgICAvLyAgIHJldHVybiB7XG4gICAgLy8gICAgIHRhZzogXCJmdW5cIixcbiAgICAvLyAgICAgbmFtZSwgcGFyYW1ldGVycywgYm9keSwgcmV0XG4gICAgLy8gICB9XG4gICAgY2FzZSBcIklmU3RhdGVtZW50XCI6XG4gICAgICBjLmZpcnN0Q2hpbGQoKTsgLy8gRm9jdXMgb24gaWZcbiAgICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXMgb24gY29uZFxuICAgICAgdmFyIGNvbmQgPSB0cmF2ZXJzZUV4cHIoYywgcyk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcIkNvbmQ6XCIsIGNvbmQpO1xuICAgICAgYy5uZXh0U2libGluZygpOyAvLyBGb2N1cyBvbiA6IHRoblxuICAgICAgYy5maXJzdENoaWxkKCk7IC8vIEZvY3VzIG9uIDpcbiAgICAgIHZhciB0aG4gPSBbXTtcbiAgICAgIHZhciBlbHMgPSBbXTtcbiAgICAgIHdoaWxlKGMubmV4dFNpYmxpbmcoKSkgeyAgLy8gRm9jdXMgb24gdGhuIHN0bXRzXG4gICAgICAgIHRobi5wdXNoKHRyYXZlcnNlU3RtdChjLHMpKTtcbiAgICAgIH1cbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiVGhuOlwiLCB0aG4pO1xuICAgICAgYy5wYXJlbnQoKTtcbiAgICAgIFxuICAgICAgaWYgKGMubmV4dFNpYmxpbmcoKSkgeyAgLy8gRm9jdXMgb24gZWxzZVxuICAgICAgICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzIG9uIDogZWxzXG4gICAgICAgIGMuZmlyc3RDaGlsZCgpOyAvLyBGb2N1cyBvbiA6XG4gICAgICAgIHdoaWxlKGMubmV4dFNpYmxpbmcoKSkgeyAvLyBGb2N1cyBvbiBlbHMgc3RtdHNcbiAgICAgICAgICBlbHMucHVzaCh0cmF2ZXJzZVN0bXQoYywgcykpO1xuICAgICAgICB9XG4gICAgICAgIGMucGFyZW50KCk7ICBcbiAgICAgIH1cbiAgICAgIGMucGFyZW50KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBsb2NhdGlvbixcbiAgICAgICAgdGFnOiBcImlmXCIsXG4gICAgICAgIGNvbmQ6IGNvbmQsXG4gICAgICAgIHRobjogdGhuLFxuICAgICAgICBlbHM6IGVsc1xuICAgICAgfVxuICAgIGNhc2UgXCJXaGlsZVN0YXRlbWVudFwiOlxuICAgICAgYy5maXJzdENoaWxkKCk7IC8vIEZvY3VzIG9uIHdoaWxlXG4gICAgICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzIG9uIGNvbmRpdGlvblxuICAgICAgdmFyIGNvbmQgPSB0cmF2ZXJzZUV4cHIoYywgcyk7XG4gICAgICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzIG9uIGJvZHlcblxuICAgICAgdmFyIGJvZHkgPSBbXTtcbiAgICAgIGMuZmlyc3RDaGlsZCgpOyAvLyBGb2N1cyBvbiA6XG4gICAgICB3aGlsZShjLm5leHRTaWJsaW5nKCkpIHtcbiAgICAgICAgYm9keS5wdXNoKHRyYXZlcnNlU3RtdChjLCBzKSk7XG4gICAgICB9XG4gICAgICBjLnBhcmVudCgpOyBcbiAgICAgIGMucGFyZW50KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBsb2NhdGlvbixcbiAgICAgICAgdGFnOiBcIndoaWxlXCIsXG4gICAgICAgIGNvbmQsXG4gICAgICAgIGJvZHlcbiAgICAgIH1cbiAgICBjYXNlIFwiUGFzc1N0YXRlbWVudFwiOlxuICAgICAgcmV0dXJuIHsgYTogbG9jYXRpb24sIHRhZzogXCJwYXNzXCIgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihcIkNvdWxkIG5vdCBwYXJzZSBzdG10IGF0IFwiICsgYy5ub2RlLmZyb20gKyBcIiBcIiArIGMubm9kZS50byArIFwiOiBcIiArIHMuc3Vic3RyaW5nKGMuZnJvbSwgYy50byksIGxvY2F0aW9uLmxpbmUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZVR5cGUoYyA6IFRyZWVDdXJzb3IsIHMgOiBzdHJpbmcpIDogVHlwZSB7XG4gIC8vIEZvciBub3csIGFsd2F5cyBhIFZhcmlhYmxlTmFtZVxuICBsZXQgbmFtZSA9IHMuc3Vic3RyaW5nKGMuZnJvbSwgYy50byk7XG4gIHN3aXRjaChuYW1lKSB7XG4gICAgY2FzZSBcImludFwiOiByZXR1cm4gTlVNO1xuICAgIGNhc2UgXCJib29sXCI6IHJldHVybiBCT09MO1xuICAgIGRlZmF1bHQ6IHJldHVybiBDTEFTUyhuYW1lKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhdmVyc2VQYXJhbWV0ZXJzKGMgOiBUcmVlQ3Vyc29yLCBzIDogc3RyaW5nKSA6IEFycmF5PFBhcmFtZXRlcjxudWxsPj4ge1xuICB2YXIgbG9jYXRpb24gPSBnZXRTb3VyY2VMb2NhdGlvbihjLCBzKTtcbiAgYy5maXJzdENoaWxkKCk7ICAvLyBGb2N1c2VzIG9uIG9wZW4gcGFyZW5cbiAgY29uc3QgcGFyYW1ldGVycyA9IFtdO1xuICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzZXMgb24gYSBWYXJpYWJsZU5hbWVcbiAgd2hpbGUoYy50eXBlLm5hbWUgIT09IFwiKVwiKSB7XG4gICAgbGV0IG5hbWUgPSBzLnN1YnN0cmluZyhjLmZyb20sIGMudG8pO1xuICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXNlcyBvbiBcIlR5cGVEZWZcIiwgaG9wZWZ1bGx5LCBvciBcIixcIiBpZiBtaXN0YWtlXG4gICAgbGV0IG5leHRUYWdOYW1lID0gYy50eXBlLm5hbWU7IC8vIE5PVEUoam9lKTogYSBiaXQgb2YgYSBoYWNrIHNvIHRoZSBuZXh0IGxpbmUgZG9lc24ndCBpZi1zcGxpdFxuICAgIGlmKG5leHRUYWdOYW1lICE9PSBcIlR5cGVEZWZcIikgeyB0aHJvdyBuZXcgUGFyc2VFcnJvcihcIk1pc3NlZCB0eXBlIGFubm90YXRpb24gZm9yIHBhcmFtZXRlciBcIiArIG5hbWUsIGxvY2F0aW9uLmxpbmUpfTtcbiAgICBjLmZpcnN0Q2hpbGQoKTsgIC8vIEVudGVyIFR5cGVEZWZcbiAgICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzZXMgb24gdHlwZSBpdHNlbGZcbiAgICBsZXQgdHlwID0gdHJhdmVyc2VUeXBlKGMsIHMpO1xuICAgIGMucGFyZW50KCk7XG4gICAgYy5uZXh0U2libGluZygpOyAvLyBNb3ZlIG9uIHRvIGNvbW1hIG9yIFwiKVwiXG4gICAgcGFyYW1ldGVycy5wdXNoKHtuYW1lLCB0eXBlOiB0eXB9KTtcbiAgICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzZXMgb24gYSBWYXJpYWJsZU5hbWVcbiAgfVxuICBjLnBhcmVudCgpOyAgICAgICAvLyBQb3AgdG8gUGFyYW1MaXN0XG4gIHJldHVybiBwYXJhbWV0ZXJzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhdmVyc2VWYXJJbml0KGMgOiBUcmVlQ3Vyc29yLCBzIDogc3RyaW5nKSA6IFZhckluaXQ8U291cmNlTG9jYXRpb24+IHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0U291cmNlTG9jYXRpb24oYywgcyk7XG4gIGMuZmlyc3RDaGlsZCgpOyAvLyBnbyB0byBuYW1lXG4gIHZhciBuYW1lID0gcy5zdWJzdHJpbmcoYy5mcm9tLCBjLnRvKTtcbiAgYy5uZXh0U2libGluZygpOyAvLyBnbyB0byA6IHR5cGVcblxuICBpZihjLnR5cGUubmFtZSAhPT0gXCJUeXBlRGVmXCIpIHtcbiAgICBjLnBhcmVudCgpO1xuICAgIHRocm93IG5ldyBQYXJzZUVycm9yKFwiaW52YWxpZCB2YXJpYWJsZSBpbml0XCIsIGxvY2F0aW9uLmxpbmUpO1xuICB9XG4gIGMuZmlyc3RDaGlsZCgpOyAvLyBnbyB0byA6XG4gIGMubmV4dFNpYmxpbmcoKTsgLy8gZ28gdG8gdHlwZVxuICBjb25zdCB0eXBlID0gdHJhdmVyc2VUeXBlKGMsIHMpO1xuICBjLnBhcmVudCgpO1xuICBcbiAgYy5uZXh0U2libGluZygpOyAvLyBnbyB0byA9XG4gIGMubmV4dFNpYmxpbmcoKTsgLy8gZ28gdG8gdmFsdWVcbiAgdmFyIHZhbHVlID0gdHJhdmVyc2VMaXRlcmFsKGMsIHMpO1xuICBjLnBhcmVudCgpO1xuXG4gIHJldHVybiB7IGE6IGxvY2F0aW9uLCBuYW1lLCB0eXBlLCB2YWx1ZSB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZUZ1bkRlZihjIDogVHJlZUN1cnNvciwgcyA6IHN0cmluZykgOiBGdW5EZWY8U291cmNlTG9jYXRpb24+IHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0U291cmNlTG9jYXRpb24oYywgcyk7XG4gIGMuZmlyc3RDaGlsZCgpOyAgLy8gRm9jdXMgb24gZGVmXG4gIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXMgb24gbmFtZSBvZiBmdW5jdGlvblxuICB2YXIgbmFtZSA9IHMuc3Vic3RyaW5nKGMuZnJvbSwgYy50byk7XG4gIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXMgb24gUGFyYW1MaXN0XG4gIHZhciBwYXJhbWV0ZXJzID0gdHJhdmVyc2VQYXJhbWV0ZXJzKGMsIHMpXG4gIGMubmV4dFNpYmxpbmcoKTsgLy8gRm9jdXMgb24gQm9keSBvciBUeXBlRGVmXG4gIGxldCByZXQgOiBUeXBlID0gTk9ORTtcbiAgaWYoYy50eXBlLm5hbWUgPT09IFwiVHlwZURlZlwiKSB7XG4gICAgYy5maXJzdENoaWxkKCk7XG4gICAgcmV0ID0gdHJhdmVyc2VUeXBlKGMsIHMpO1xuICAgIGMucGFyZW50KCk7XG4gICAgYy5uZXh0U2libGluZygpO1xuICB9XG4gIGMuZmlyc3RDaGlsZCgpOyAgLy8gRm9jdXMgb24gOlxuICB2YXIgaW5pdHMgPSBbXTtcbiAgdmFyIGJvZHkgPSBbXTtcbiAgXG4gIHZhciBoYXNDaGlsZCA9IGMubmV4dFNpYmxpbmcoKTtcblxuICB3aGlsZShoYXNDaGlsZCkge1xuICAgIGlmIChpc1ZhckluaXQoYywgcykpIHtcbiAgICAgIGluaXRzLnB1c2godHJhdmVyc2VWYXJJbml0KGMsIHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGhhc0NoaWxkID0gYy5uZXh0U2libGluZygpO1xuICB9XG5cbiAgd2hpbGUoaGFzQ2hpbGQpIHtcbiAgICBib2R5LnB1c2godHJhdmVyc2VTdG10KGMsIHMpKTtcbiAgICBoYXNDaGlsZCA9IGMubmV4dFNpYmxpbmcoKTtcbiAgfSBcbiAgXG4gIC8vIGNvbnNvbGUubG9nKFwiQmVmb3JlIHBvcCB0byBib2R5OiBcIiwgYy50eXBlLm5hbWUpO1xuICBjLnBhcmVudCgpOyAgICAgIC8vIFBvcCB0byBCb2R5XG4gIC8vIGNvbnNvbGUubG9nKFwiQmVmb3JlIHBvcCB0byBkZWY6IFwiLCBjLnR5cGUubmFtZSk7XG4gIGMucGFyZW50KCk7ICAgICAgLy8gUG9wIHRvIEZ1bmN0aW9uRGVmaW5pdGlvblxuICByZXR1cm4geyBhOiBsb2NhdGlvbiwgbmFtZSwgcGFyYW1ldGVycywgcmV0LCBpbml0cywgYm9keSB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZUNsYXNzKGMgOiBUcmVlQ3Vyc29yLCBzIDogc3RyaW5nKSA6IENsYXNzPFNvdXJjZUxvY2F0aW9uPiB7XG4gIHZhciBsb2NhdGlvbiA9IGdldFNvdXJjZUxvY2F0aW9uKGMsIHMpO1xuICBjb25zdCBmaWVsZHMgOiBBcnJheTxWYXJJbml0PFNvdXJjZUxvY2F0aW9uPj4gPSBbXTtcbiAgY29uc3QgbWV0aG9kcyA6IEFycmF5PEZ1bkRlZjxTb3VyY2VMb2NhdGlvbj4+ID0gW107XG4gIGMuZmlyc3RDaGlsZCgpO1xuICBjLm5leHRTaWJsaW5nKCk7IC8vIEZvY3VzIG9uIGNsYXNzIG5hbWVcbiAgY29uc3QgY2xhc3NOYW1lID0gcy5zdWJzdHJpbmcoYy5mcm9tLCBjLnRvKTtcbiAgYy5uZXh0U2libGluZygpOyAvLyBGb2N1cyBvbiBhcmdsaXN0L3N1cGVyY2xhc3NcbiAgYy5uZXh0U2libGluZygpOyAvLyBGb2N1cyBvbiBib2R5XG4gIGMuZmlyc3RDaGlsZCgpOyAgLy8gRm9jdXMgY29sb25cbiAgd2hpbGUoYy5uZXh0U2libGluZygpKSB7IC8vIEZvY3VzZXMgZmlyc3QgZmllbGRcbiAgICBpZiAoaXNWYXJJbml0KGMsIHMpKSB7XG4gICAgICBmaWVsZHMucHVzaCh0cmF2ZXJzZVZhckluaXQoYywgcykpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5EZWYoYywgcykpIHtcbiAgICAgIG1ldGhvZHMucHVzaCh0cmF2ZXJzZUZ1bkRlZihjLCBzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKGBDb3VsZCBub3QgcGFyc2UgdGhlIGJvZHkgb2YgY2xhc3M6ICR7Y2xhc3NOYW1lfWAsIGxvY2F0aW9uLmxpbmUpO1xuICAgIH1cbiAgfSBcbiAgYy5wYXJlbnQoKTtcbiAgYy5wYXJlbnQoKTtcblxuICBpZiAoIW1ldGhvZHMuZmluZChtZXRob2QgPT4gbWV0aG9kLm5hbWUgPT09IFwiX19pbml0X19cIikpIHtcbiAgICBtZXRob2RzLnB1c2goeyBhOiBsb2NhdGlvbiwgbmFtZTogXCJfX2luaXRfX1wiLCBwYXJhbWV0ZXJzOiBbeyBuYW1lOiBcInNlbGZcIiwgdHlwZTogQ0xBU1MoY2xhc3NOYW1lKSB9XSwgcmV0OiBOT05FLCBpbml0czogW10sIGJvZHk6IFtdIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgYTogbG9jYXRpb24sXG4gICAgbmFtZTogY2xhc3NOYW1lLFxuICAgIGZpZWxkcyxcbiAgICBtZXRob2RzXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZURlZnMoYyA6IFRyZWVDdXJzb3IsIHMgOiBzdHJpbmcpIDogW0FycmF5PFZhckluaXQ8U291cmNlTG9jYXRpb24+PiwgQXJyYXk8RnVuRGVmPFNvdXJjZUxvY2F0aW9uPj4sIEFycmF5PENsYXNzPFNvdXJjZUxvY2F0aW9uPj5dIHtcbiAgY29uc3QgaW5pdHMgOiBBcnJheTxWYXJJbml0PFNvdXJjZUxvY2F0aW9uPj4gPSBbXTtcbiAgY29uc3QgZnVucyA6IEFycmF5PEZ1bkRlZjxTb3VyY2VMb2NhdGlvbj4+ID0gW107XG4gIGNvbnN0IGNsYXNzZXMgOiBBcnJheTxDbGFzczxTb3VyY2VMb2NhdGlvbj4+ID0gW107XG5cbiAgd2hpbGUodHJ1ZSkge1xuICAgIGlmIChpc1ZhckluaXQoYywgcykpIHtcbiAgICAgIGluaXRzLnB1c2godHJhdmVyc2VWYXJJbml0KGMsIHMpKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuRGVmKGMsIHMpKSB7XG4gICAgICBmdW5zLnB1c2godHJhdmVyc2VGdW5EZWYoYywgcykpO1xuICAgIH0gZWxzZSBpZiAoaXNDbGFzc0RlZihjLCBzKSkge1xuICAgICAgY2xhc3Nlcy5wdXNoKHRyYXZlcnNlQ2xhc3MoYywgcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW2luaXRzLCBmdW5zLCBjbGFzc2VzXTtcbiAgICB9XG4gICAgYy5uZXh0U2libGluZygpO1xuICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFySW5pdChjIDogVHJlZUN1cnNvciwgcyA6IHN0cmluZykgOiBCb29sZWFuIHtcbiAgaWYgKGMudHlwZS5uYW1lID09PSBcIkFzc2lnblN0YXRlbWVudFwiKSB7XG4gICAgYy5maXJzdENoaWxkKCk7IC8vIEZvY3VzIG9uIGxoc1xuICAgIGMubmV4dFNpYmxpbmcoKTsgLy8gZ28gdG8gOiB0eXBlXG5cbiAgICBjb25zdCBpc1ZhciA9IGMudHlwZS5uYW1lIGFzIGFueSA9PT0gXCJUeXBlRGVmXCI7XG4gICAgYy5wYXJlbnQoKTtcbiAgICByZXR1cm4gaXNWYXI7ICBcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuRGVmKGMgOiBUcmVlQ3Vyc29yLCBzIDogc3RyaW5nKSA6IEJvb2xlYW4ge1xuICByZXR1cm4gYy50eXBlLm5hbWUgPT09IFwiRnVuY3Rpb25EZWZpbml0aW9uXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NsYXNzRGVmKGMgOiBUcmVlQ3Vyc29yLCBzIDogc3RyaW5nKSA6IEJvb2xlYW4ge1xuICByZXR1cm4gYy50eXBlLm5hbWUgPT09IFwiQ2xhc3NEZWZpbml0aW9uXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmF2ZXJzZShjIDogVHJlZUN1cnNvciwgcyA6IHN0cmluZykgOiBQcm9ncmFtPFNvdXJjZUxvY2F0aW9uPiB7XG4gIHZhciBsb2NhdGlvbiA9IGdldFNvdXJjZUxvY2F0aW9uKGMsIHMpO1xuICBzd2l0Y2goYy5ub2RlLnR5cGUubmFtZSkge1xuICAgIGNhc2UgXCJTY3JpcHRcIjpcbiAgICAgIGNvbnN0IGluaXRzIDogQXJyYXk8VmFySW5pdDxTb3VyY2VMb2NhdGlvbj4+ID0gW107XG4gICAgICBjb25zdCBmdW5zIDogQXJyYXk8RnVuRGVmPFNvdXJjZUxvY2F0aW9uPj4gPSBbXTtcbiAgICAgIGNvbnN0IGNsYXNzZXMgOiBBcnJheTxDbGFzczxTb3VyY2VMb2NhdGlvbj4+ID0gW107XG4gICAgICBjb25zdCBzdG10cyA6IEFycmF5PFN0bXQ8U291cmNlTG9jYXRpb24+PiA9IFtdO1xuICAgICAgdmFyIGhhc0NoaWxkID0gYy5maXJzdENoaWxkKCk7XG5cbiAgICAgIHdoaWxlKGhhc0NoaWxkKSB7XG4gICAgICAgIGlmIChpc1ZhckluaXQoYywgcykpIHtcbiAgICAgICAgICBpbml0cy5wdXNoKHRyYXZlcnNlVmFySW5pdChjLCBzKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5EZWYoYywgcykpIHtcbiAgICAgICAgICBmdW5zLnB1c2godHJhdmVyc2VGdW5EZWYoYywgcykpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQ2xhc3NEZWYoYywgcykpIHtcbiAgICAgICAgICBjbGFzc2VzLnB1c2godHJhdmVyc2VDbGFzcyhjLCBzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaGFzQ2hpbGQgPSBjLm5leHRTaWJsaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlKGhhc0NoaWxkKSB7XG4gICAgICAgIHN0bXRzLnB1c2godHJhdmVyc2VTdG10KGMsIHMpKTtcbiAgICAgICAgaGFzQ2hpbGQgPSBjLm5leHRTaWJsaW5nKCk7XG4gICAgICB9IFxuICAgICAgYy5wYXJlbnQoKTtcbiAgICAgIHJldHVybiB7IGE6IGxvY2F0aW9uLCBmdW5zLCBpbml0cywgY2xhc3Nlcywgc3RtdHMgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoXCJDb3VsZCBub3QgcGFyc2UgcHJvZ3JhbSBhdCBcIiArIGMubm9kZS5mcm9tICsgXCIgXCIgKyBjLm5vZGUudG8sIGxvY2F0aW9uLmxpbmUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShzb3VyY2UgOiBzdHJpbmcpIDogUHJvZ3JhbTxTb3VyY2VMb2NhdGlvbj4ge1xuICBjb25zdCB0ID0gcGFyc2VyLnBhcnNlKHNvdXJjZSk7XG4gIGNvbnN0IHN0ciA9IHN0cmluZ2lmeVRyZWUodC5jdXJzb3IoKSwgc291cmNlLCAwKTtcbiAgcmV0dXJuIHRyYXZlcnNlKHQuY3Vyc29yKCksIHNvdXJjZSk7XG59XG4iLCJpbXBvcnQgeyBydW4sIENvbmZpZyB9IGZyb20gXCIuL3J1bm5lclwiO1xuLy8gaW1wb3J0IHsgR2xvYmFsRW52IH0gZnJvbSBcIi4vY29tcGlsZXJcIjtcbmltcG9ydCB7IEdsb2JhbEVudiB9IGZyb20gXCIuL2NvbXBpbGVyXCI7XG5pbXBvcnQgeyB0YywgZGVmYXVsdFR5cGVFbnYsIEdsb2JhbFR5cGVFbnYgfSBmcm9tIFwiLi90eXBlLWNoZWNrXCI7XG5pbXBvcnQgeyBWYWx1ZSwgVHlwZSB9IGZyb20gXCIuL2FzdFwiO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiLi9wYXJzZXJcIjtcblxuaW50ZXJmYWNlIFJFUEwge1xuICBydW4oc291cmNlIDogc3RyaW5nKSA6IFByb21pc2U8YW55Pjtcbn1cblxuZXhwb3J0IGNsYXNzIEJhc2ljUkVQTCB7XG4gIGN1cnJlbnRFbnY6IEdsb2JhbEVudlxuICBjdXJyZW50VHlwZUVudjogR2xvYmFsVHlwZUVudlxuICBmdW5jdGlvbnM6IHN0cmluZ1xuICBpbXBvcnRPYmplY3Q6IGFueVxuICBtZW1vcnk6IGFueVxuICBjb25zdHJ1Y3RvcihpbXBvcnRPYmplY3QgOiBhbnkpIHtcbiAgICB0aGlzLmltcG9ydE9iamVjdCA9IGltcG9ydE9iamVjdDtcbiAgICBpZighaW1wb3J0T2JqZWN0LmpzKSB7XG4gICAgICBjb25zdCBtZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtpbml0aWFsOjIwMDAsIG1heGltdW06MjAwMH0pO1xuICAgICAgY29uc3QgdmlldyA9IG5ldyBJbnQzMkFycmF5KG1lbW9yeS5idWZmZXIpO1xuICAgICAgdmlld1swXSA9IDQ7XG4gICAgICB0aGlzLmltcG9ydE9iamVjdC5qcyA9IHsgbWVtb3J5OiBtZW1vcnkgfTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50RW52ID0ge1xuICAgICAgZ2xvYmFsczogbmV3IE1hcCgpLFxuICAgICAgY2xhc3NlczogbmV3IE1hcCgpLFxuICAgICAgbG9jYWxzOiBuZXcgU2V0KCksXG4gICAgICBsYWJlbHM6IFtdLFxuICAgICAgb2Zmc2V0OiAxXG4gICAgfTtcbiAgICB0aGlzLmN1cnJlbnRUeXBlRW52ID0gZGVmYXVsdFR5cGVFbnY7XG4gICAgdGhpcy5mdW5jdGlvbnMgPSBcIlwiO1xuICB9XG4gIGFzeW5jIHJ1bihzb3VyY2UgOiBzdHJpbmcpIDogUHJvbWlzZTxWYWx1ZT4ge1xuICAgIGNvbnN0IGNvbmZpZyA6IENvbmZpZyA9IHtpbXBvcnRPYmplY3Q6IHRoaXMuaW1wb3J0T2JqZWN0LCBlbnY6IHRoaXMuY3VycmVudEVudiwgdHlwZUVudjogdGhpcy5jdXJyZW50VHlwZUVudiwgZnVuY3Rpb25zOiB0aGlzLmZ1bmN0aW9uc307XG4gICAgY29uc3QgW3Jlc3VsdCwgbmV3RW52LCBuZXdUeXBlRW52LCBuZXdGdW5jdGlvbnMsIGluc3RhbmNlXSA9IGF3YWl0IHJ1bihzb3VyY2UsIGNvbmZpZyk7XG4gICAgdGhpcy5jdXJyZW50RW52ID0gbmV3RW52O1xuICAgIHRoaXMuY3VycmVudFR5cGVFbnYgPSBuZXdUeXBlRW52O1xuICAgIHRoaXMuZnVuY3Rpb25zICs9IG5ld0Z1bmN0aW9ucztcbiAgICBjb25zdCBjdXJyZW50R2xvYmFscyA9IHRoaXMuaW1wb3J0T2JqZWN0LmVudiB8fCB7fTtcbiAgICBjb25zb2xlLmxvZyhpbnN0YW5jZSk7XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UuaW5zdGFuY2UuZXhwb3J0cykuZm9yRWFjaChrID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQ29uc2lkZXIga2V5IFwiLCBrKTtcbiAgICAgIGNvbnN0IG1heWJlR2xvYmFsID0gaW5zdGFuY2UuaW5zdGFuY2UuZXhwb3J0c1trXTtcbiAgICAgIGlmKG1heWJlR2xvYmFsIGluc3RhbmNlb2YgV2ViQXNzZW1ibHkuR2xvYmFsKSB7XG4gICAgICAgIGN1cnJlbnRHbG9iYWxzW2tdID0gbWF5YmVHbG9iYWw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5pbXBvcnRPYmplY3QuZW52ID0gY3VycmVudEdsb2JhbHM7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0Yyhzb3VyY2U6IHN0cmluZyk6IFR5cGUge1xuICAgIGNvbnN0IGNvbmZpZzogQ29uZmlnID0geyBpbXBvcnRPYmplY3Q6IHRoaXMuaW1wb3J0T2JqZWN0LCBlbnY6IHRoaXMuY3VycmVudEVudiwgdHlwZUVudjogdGhpcy5jdXJyZW50VHlwZUVudiwgZnVuY3Rpb25zOiB0aGlzLmZ1bmN0aW9ucyB9O1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHNvdXJjZSk7XG4gICAgY29uc3QgW3Jlc3VsdCwgX10gPSB0Yyh0aGlzLmN1cnJlbnRUeXBlRW52LCBwYXJzZWQpO1xuICAgIHJldHVybiByZXN1bHQuYVswXTtcbiAgfVxufSIsIi8vIFRoaXMgaXMgYSBtYXNodXAgb2YgdHV0b3JpYWxzIGZyb206XG4vL1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vQXNzZW1ibHlTY3JpcHQvd2FidC5qcy9cbi8vIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWJBc3NlbWJseS9Vc2luZ190aGVfSmF2YVNjcmlwdF9BUElcblxuaW1wb3J0IHdhYnQgZnJvbSAnd2FidCc7XG5pbXBvcnQgeyBjb21waWxlLCBHbG9iYWxFbnYgfSBmcm9tICcuL2NvbXBpbGVyJztcbmltcG9ydCB7cGFyc2V9IGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCB7ZW1wdHlMb2NhbFR5cGVFbnYsIEdsb2JhbFR5cGVFbnYsIHRjLCB0Y1N0bXR9IGZyb20gICcuL3R5cGUtY2hlY2snO1xuaW1wb3J0IHsgUHJvZ3JhbSwgVHlwZSwgVmFsdWUsIFNvdXJjZUxvY2F0aW9uIH0gZnJvbSAnLi9hc3QnO1xuaW1wb3J0IHsgUHlWYWx1ZSwgTk9ORSwgQk9PTCwgTlVNLCBDTEFTUyB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBsb3dlclByb2dyYW0gfSBmcm9tICcuL2xvd2VyJztcblxuZXhwb3J0IHR5cGUgQ29uZmlnID0ge1xuICBpbXBvcnRPYmplY3Q6IGFueTtcbiAgLy8gZW52OiBjb21waWxlci5HbG9iYWxFbnYsXG4gIGVudjogR2xvYmFsRW52LFxuICB0eXBlRW52OiBHbG9iYWxUeXBlRW52LFxuICBmdW5jdGlvbnM6IHN0cmluZyAgICAgICAgLy8gcHJlbHVkZSBmdW5jdGlvbnNcbn1cblxuLy8gTk9URShqb2UpOiBUaGlzIGlzIGEgaGFjayB0byBnZXQgdGhlIENMSSBSZXBsIHRvIHJ1bi4gV0FCVCByZWdpc3RlcnMgYSBnbG9iYWxcbi8vIHVuY2F1Z2h0IGV4biBoYW5kbGVyLCBhbmQgdGhpcyBpcyBub3QgYWxsb3dlZCB3aGVuIHJ1bm5pbmcgdGhlIFJFUExcbi8vIChodHRwczovL25vZGVqcy5vcmcvYXBpL3JlcGwuaHRtbCNyZXBsX2dsb2JhbF91bmNhdWdodF9leGNlcHRpb25zKS4gTm8gcmVhc29uXG4vLyBpcyBnaXZlbiBmb3IgdGhpcyBpbiB0aGUgZG9jcyBwYWdlLCBhbmQgSSBoYXZlbid0IHNwZW50IHRpbWUgb24gdGhlIGRvbWFpblxuLy8gbW9kdWxlIHRvIGZpZ3VyZSBvdXQgd2hhdCdzIGdvaW5nIG9uIGhlcmUuIEl0IGRvZXNuJ3Qgc2VlbSBjcml0aWNhbCBmb3IgV0FCVFxuLy8gdG8gaGF2ZSB0aGlzIHN1cHBvcnQsIHNvIHdlIHBhdGNoIGl0IGF3YXkuXG5pZih0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBjb25zdCBvbGRQcm9jZXNzT24gPSBwcm9jZXNzLm9uO1xuICBwcm9jZXNzLm9uID0gKC4uLmFyZ3MgOiBhbnkpIDogYW55ID0+IHtcbiAgICBpZihhcmdzWzBdID09PSBcInVuY2F1Z2h0RXhjZXB0aW9uXCIpIHsgcmV0dXJuOyB9XG4gICAgZWxzZSB7IHJldHVybiBvbGRQcm9jZXNzT24uYXBwbHkocHJvY2VzcywgYXJncyk7IH1cbiAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bldhdChzb3VyY2UgOiBzdHJpbmcsIGltcG9ydE9iamVjdCA6IGFueSkgOiBQcm9taXNlPGFueT4ge1xuICBjb25zdCB3YWJ0SW50ZXJmYWNlID0gYXdhaXQgd2FidCgpO1xuICBjb25zdCBteU1vZHVsZSA9IHdhYnRJbnRlcmZhY2UucGFyc2VXYXQoXCJ0ZXN0LndhdFwiLCBzb3VyY2UpO1xuICB2YXIgYXNCaW5hcnkgPSBteU1vZHVsZS50b0JpbmFyeSh7fSk7XG4gIHZhciB3YXNtTW9kdWxlID0gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYXNCaW5hcnkuYnVmZmVyLCBpbXBvcnRPYmplY3QpO1xuICBjb25zdCByZXN1bHQgPSAod2FzbU1vZHVsZS5pbnN0YW5jZS5leHBvcnRzLmV4cG9ydGVkX2Z1bmMgYXMgYW55KSgpO1xuICByZXR1cm4gW3Jlc3VsdCwgd2FzbU1vZHVsZV07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGF1Z21lbnRFbnYoZW52OiBHbG9iYWxFbnYsIHByb2c6IFByb2dyYW08W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4pIDogR2xvYmFsRW52IHtcbiAgY29uc3QgbmV3R2xvYmFscyA9IG5ldyBNYXAoZW52Lmdsb2JhbHMpO1xuICBjb25zdCBuZXdDbGFzc2VzID0gbmV3IE1hcChlbnYuY2xhc3Nlcyk7XG5cbiAgdmFyIG5ld09mZnNldCA9IGVudi5vZmZzZXQ7XG4gIHByb2cuaW5pdHMuZm9yRWFjaCgodikgPT4ge1xuICAgIG5ld0dsb2JhbHMuc2V0KHYubmFtZSwgdHJ1ZSk7XG4gIH0pO1xuICBwcm9nLmNsYXNzZXMuZm9yRWFjaChjbHMgPT4ge1xuICAgIGNvbnN0IGNsYXNzRmllbGRzID0gbmV3IE1hcCgpO1xuICAgIGNscy5maWVsZHMuZm9yRWFjaCgoZmllbGQsIGkpID0+IGNsYXNzRmllbGRzLnNldChmaWVsZC5uYW1lLCBbaSwgZmllbGQudmFsdWVdKSk7XG4gICAgbmV3Q2xhc3Nlcy5zZXQoY2xzLm5hbWUsIGNsYXNzRmllbGRzKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZ2xvYmFsczogbmV3R2xvYmFscyxcbiAgICBjbGFzc2VzOiBuZXdDbGFzc2VzLFxuICAgIGxvY2FsczogZW52LmxvY2FscyxcbiAgICBsYWJlbHM6IGVudi5sYWJlbHMsXG4gICAgb2Zmc2V0OiBuZXdPZmZzZXRcbiAgfVxufVxuXG5cbi8vIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW4oc291cmNlIDogc3RyaW5nLCBjb25maWc6IENvbmZpZykgOiBQcm9taXNlPFtWYWx1ZSwgY29tcGlsZXIuR2xvYmFsRW52LCBHbG9iYWxUeXBlRW52LCBzdHJpbmddPiB7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuKHNvdXJjZSA6IHN0cmluZywgY29uZmlnOiBDb25maWcpIDogUHJvbWlzZTxbVmFsdWUsIEdsb2JhbEVudiwgR2xvYmFsVHlwZUVudiwgc3RyaW5nLCBXZWJBc3NlbWJseS5XZWJBc3NlbWJseUluc3RhbnRpYXRlZFNvdXJjZV0+IHtcbiAgY29uc3QgcGFyc2VkID0gcGFyc2Uoc291cmNlKTtcbiAgY29uc3QgW3Rwcm9ncmFtLCB0ZW52XSA9IHRjKGNvbmZpZy50eXBlRW52LCBwYXJzZWQpO1xuICBjb25zdCBnbG9iYWxFbnYgPSBhdWdtZW50RW52KGNvbmZpZy5lbnYsIHRwcm9ncmFtKTtcbiAgY29uc3QgaXJwcm9ncmFtID0gbG93ZXJQcm9ncmFtKHRwcm9ncmFtLCBnbG9iYWxFbnYpO1xuICBjb25zdCBwcm9nVHlwID0gdHByb2dyYW0uYVswXTtcbiAgdmFyIHJldHVyblR5cGUgPSBcIlwiO1xuICB2YXIgcmV0dXJuRXhwciA9IFwiXCI7XG4gIC8vIGNvbnN0IGxhc3RFeHByID0gcGFyc2VkLnN0bXRzW3BhcnNlZC5zdG10cy5sZW5ndGggLSAxXVxuICAvLyBjb25zdCBsYXN0RXhwclR5cCA9IGxhc3RFeHByLmE7XG4gIC8vIGNvbnNvbGUubG9nKFwiTEFTVEVYUFJcIiwgbGFzdEV4cHIpO1xuICBpZihwcm9nVHlwICE9PSBOT05FKSB7XG4gICAgcmV0dXJuVHlwZSA9IFwiKHJlc3VsdCBpMzIpXCI7XG4gICAgcmV0dXJuRXhwciA9IFwiKGxvY2FsLmdldCAkJGxhc3QpXCJcbiAgfSBcbiAgbGV0IGdsb2JhbHNCZWZvcmUgPSBjb25maWcuZW52Lmdsb2JhbHM7XG4gIC8vIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZXIuY29tcGlsZSh0cHJvZ3JhbSwgY29uZmlnLmVudik7XG4gIGNvbnN0IGNvbXBpbGVkID0gY29tcGlsZShpcnByb2dyYW0sIGdsb2JhbEVudik7XG5cbiAgY29uc3QgZ2xvYmFsSW1wb3J0cyA9IFsuLi5nbG9iYWxzQmVmb3JlLmtleXMoKV0ubWFwKG5hbWUgPT5cbiAgICBgKGltcG9ydCBcImVudlwiIFwiJHtuYW1lfVwiIChnbG9iYWwgJCR7bmFtZX0gKG11dCBpMzIpKSlgXG4gICkuam9pbihcIlxcblwiKTtcbiAgY29uc3QgZ2xvYmFsRGVjbHMgPSBjb21waWxlZC5nbG9iYWxzLm1hcChuYW1lID0+XG4gICAgYChnbG9iYWwgJCR7bmFtZX0gKGV4cG9ydCBcIiR7bmFtZX1cIikgKG11dCBpMzIpIChpMzIuY29uc3QgMCkpYFxuICApLmpvaW4oXCJcXG5cIik7XG5cbiAgY29uc3QgaW1wb3J0T2JqZWN0ID0gY29uZmlnLmltcG9ydE9iamVjdDtcbiAgaWYoIWltcG9ydE9iamVjdC5qcykge1xuICAgIGNvbnN0IG1lbW9yeSA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe2luaXRpYWw6MjAwMCwgbWF4aW11bToyMDAwfSk7XG4gICAgaW1wb3J0T2JqZWN0LmpzID0geyBtZW1vcnk6IG1lbW9yeSB9O1xuICB9XG5cbiAgY29uc3Qgd2FzbVNvdXJjZSA9IGAobW9kdWxlXG4gICAgKGltcG9ydCBcImpzXCIgXCJtZW1vcnlcIiAobWVtb3J5IDEpKVxuICAgIChmdW5jICRhc3NlcnRfbm90X25vbmUgKGltcG9ydCBcImltcG9ydHNcIiBcImFzc2VydF9ub3Rfbm9uZVwiKSAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpXG4gICAgKGZ1bmMgJHByaW50X251bSAoaW1wb3J0IFwiaW1wb3J0c1wiIFwicHJpbnRfbnVtXCIpIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSlcbiAgICAoZnVuYyAkcHJpbnRfYm9vbCAoaW1wb3J0IFwiaW1wb3J0c1wiIFwicHJpbnRfYm9vbFwiKSAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpXG4gICAgKGZ1bmMgJHByaW50X25vbmUgKGltcG9ydCBcImltcG9ydHNcIiBcInByaW50X25vbmVcIikgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpKVxuICAgIChmdW5jICRhYnMgKGltcG9ydCBcImltcG9ydHNcIiBcImFic1wiKSAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpXG4gICAgKGZ1bmMgJG1pbiAoaW1wb3J0IFwiaW1wb3J0c1wiIFwibWluXCIpIChwYXJhbSBpMzIpIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSlcbiAgICAoZnVuYyAkbWF4IChpbXBvcnQgXCJpbXBvcnRzXCIgXCJtYXhcIikgKHBhcmFtIGkzMikgKHBhcmFtIGkzMikgKHJlc3VsdCBpMzIpKVxuICAgIChmdW5jICRwb3cgKGltcG9ydCBcImltcG9ydHNcIiBcInBvd1wiKSAocGFyYW0gaTMyKSAocGFyYW0gaTMyKSAocmVzdWx0IGkzMikpXG4gICAgKGZ1bmMgJGFsbG9jIChpbXBvcnQgXCJsaWJtZW1vcnlcIiBcImFsbG9jXCIpIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSlcbiAgICAoZnVuYyAkbG9hZCAoaW1wb3J0IFwibGlibWVtb3J5XCIgXCJsb2FkXCIpIChwYXJhbSBpMzIpIChwYXJhbSBpMzIpIChyZXN1bHQgaTMyKSlcbiAgICAoZnVuYyAkc3RvcmUgKGltcG9ydCBcImxpYm1lbW9yeVwiIFwic3RvcmVcIikgKHBhcmFtIGkzMikgKHBhcmFtIGkzMikgKHBhcmFtIGkzMikpXG4gICAgJHtnbG9iYWxJbXBvcnRzfVxuICAgICR7Z2xvYmFsRGVjbHN9XG4gICAgJHtjb25maWcuZnVuY3Rpb25zfVxuICAgICR7Y29tcGlsZWQuZnVuY3Rpb25zfVxuICAgIChmdW5jIChleHBvcnQgXCJleHBvcnRlZF9mdW5jXCIpICR7cmV0dXJuVHlwZX1cbiAgICAgICR7Y29tcGlsZWQubWFpblNvdXJjZX1cbiAgICAgICR7cmV0dXJuRXhwcn1cbiAgICApXG4gIClgO1xuICBjb25zb2xlLmxvZyh3YXNtU291cmNlKTtcbiAgY29uc3QgW3Jlc3VsdCwgaW5zdGFuY2VdID0gYXdhaXQgcnVuV2F0KHdhc21Tb3VyY2UsIGltcG9ydE9iamVjdCk7XG5cbiAgcmV0dXJuIFtQeVZhbHVlKHByb2dUeXAsIHJlc3VsdCksIGNvbXBpbGVkLm5ld0VudiwgdGVudiwgY29tcGlsZWQuZnVuY3Rpb25zLCBpbnN0YW5jZV07XG59XG4iLCJpbXBvcnQgeyBUcmVlQ3Vyc29yIH0gZnJvbSBcImxlemVyLXRyZWVcIiA7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlUcmVlKHQ6IFRyZWVDdXJzb3IsIHNvdXJjZTogc3RyaW5nLCBkOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHZhciBzcGFjZXMgPSBcIiBcIi5yZXBlYXQoZCoyKTtcbiAgICBzdHIgKz0gc3BhY2VzICsgdC50eXBlLm5hbWU7XG4gICAgaWYgKFtcIk51bWJlclwiLCBcIkNhbGxFeHByZXNzaW9uXCIsIFwiQmluYXJ5RXhwcmVzc2lvblwiLCBcIlVuYXJ5RXhwcmVzc2lvblwiLCBcIkFyaXRoT3BcIiwgXCJWYXJpYWJsZU5hbWVcIl0uaW5jbHVkZXModC50eXBlLm5hbWUpKSB7IFxuICAgICAgc3RyICs9IFwiIC0tPiBcIiArIHNvdXJjZS5zdWJzdHJpbmcodC5mcm9tLCB0LnRvKVxuICAgIH1cbiAgICBzdHIgKz0gXCJcXG5cIjtcbiAgICBpZiAodC5maXJzdENoaWxkKCkpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgc3RyICs9IHN0cmluZ2lmeVRyZWUodCwgc291cmNlLCBkKzEpO1xuICAgICAgfSB3aGlsZSh0Lm5leHRTaWJsaW5nKCkpO1xuICAgICAgdC5wYXJlbnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn0iLCJcbmltcG9ydCB7IHRhYmxlIH0gZnJvbSAnY29uc29sZSc7XG5pbXBvcnQgeyBTdG10LCBFeHByLCBUeXBlLCBVbmlPcCwgQmluT3AsIExpdGVyYWwsIFByb2dyYW0sIEZ1bkRlZiwgVmFySW5pdCwgQ2xhc3MsIFNvdXJjZUxvY2F0aW9uIH0gZnJvbSAnLi9hc3QnO1xuaW1wb3J0IHsgTlVNLCBCT09MLCBOT05FLCBDTEFTUyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZW1wdHlFbnYgfSBmcm9tICcuL2NvbXBpbGVyJztcbmltcG9ydCB7IFR5cGVDaGVja0Vycm9yIH0gZnJvbSAnLi9lcnJvcl9yZXBvcnRpbmcnXG5cbmV4cG9ydCB0eXBlIEdsb2JhbFR5cGVFbnYgPSB7XG4gIGdsb2JhbHM6IE1hcDxzdHJpbmcsIFR5cGU+LFxuICBmdW5jdGlvbnM6IE1hcDxzdHJpbmcsIFtBcnJheTxUeXBlPiwgVHlwZV0+LFxuICBjbGFzc2VzOiBNYXA8c3RyaW5nLCBbTWFwPHN0cmluZywgVHlwZT4sIE1hcDxzdHJpbmcsIFtBcnJheTxUeXBlPiwgVHlwZV0+XT5cbn1cblxuZXhwb3J0IHR5cGUgTG9jYWxUeXBlRW52ID0ge1xuICB2YXJzOiBNYXA8c3RyaW5nLCBUeXBlPixcbiAgZXhwZWN0ZWRSZXQ6IFR5cGUsXG4gIGFjdHVhbFJldDogVHlwZSxcbiAgdG9wTGV2ZWw6IEJvb2xlYW5cbn1cblxuY29uc3QgZGVmYXVsdEdsb2JhbEZ1bmN0aW9ucyA9IG5ldyBNYXAoKTtcbmRlZmF1bHRHbG9iYWxGdW5jdGlvbnMuc2V0KFwiYWJzXCIsIFtbTlVNXSwgTlVNXSk7XG5kZWZhdWx0R2xvYmFsRnVuY3Rpb25zLnNldChcIm1heFwiLCBbW05VTSwgTlVNXSwgTlVNXSk7XG5kZWZhdWx0R2xvYmFsRnVuY3Rpb25zLnNldChcIm1pblwiLCBbW05VTSwgTlVNXSwgTlVNXSk7XG5kZWZhdWx0R2xvYmFsRnVuY3Rpb25zLnNldChcInBvd1wiLCBbW05VTSwgTlVNXSwgTlVNXSk7XG5kZWZhdWx0R2xvYmFsRnVuY3Rpb25zLnNldChcInByaW50XCIsIFtbQ0xBU1MoXCJvYmplY3RcIildLCBOVU1dKTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUeXBlRW52ID0ge1xuICBnbG9iYWxzOiBuZXcgTWFwKCksXG4gIGZ1bmN0aW9uczogZGVmYXVsdEdsb2JhbEZ1bmN0aW9ucyxcbiAgY2xhc3NlczogbmV3IE1hcCgpLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5R2xvYmFsVHlwZUVudigpIDogR2xvYmFsVHlwZUVudiB7XG4gIHJldHVybiB7XG4gICAgZ2xvYmFsczogbmV3IE1hcCgpLFxuICAgIGZ1bmN0aW9uczogbmV3IE1hcCgpLFxuICAgIGNsYXNzZXM6IG5ldyBNYXAoKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW1wdHlMb2NhbFR5cGVFbnYoKSA6IExvY2FsVHlwZUVudiB7XG4gIHJldHVybiB7XG4gICAgdmFyczogbmV3IE1hcCgpLFxuICAgIGV4cGVjdGVkUmV0OiBOT05FLFxuICAgIGFjdHVhbFJldDogTk9ORSxcbiAgICB0b3BMZXZlbDogdHJ1ZVxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBUeXBlRXJyb3IgPSB7XG4gIG1lc3NhZ2U6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxUeXBlKHQxOiBUeXBlLCB0MjogVHlwZSkge1xuICByZXR1cm4gKFxuICAgIHQxID09PSB0MiB8fFxuICAgICh0MS50YWcgPT09IFwiY2xhc3NcIiAmJiB0Mi50YWcgPT09IFwiY2xhc3NcIiAmJiB0MS5uYW1lID09PSB0Mi5uYW1lKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb25lT3JDbGFzcyh0OiBUeXBlKSB7XG4gIHJldHVybiB0LnRhZyA9PT0gXCJub25lXCIgfHwgdC50YWcgPT09IFwiY2xhc3NcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3VidHlwZShlbnY6IEdsb2JhbFR5cGVFbnYsIHQxOiBUeXBlLCB0MjogVHlwZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gZXF1YWxUeXBlKHQxLCB0MikgfHwgdDEudGFnID09PSBcIm5vbmVcIiAmJiB0Mi50YWcgPT09IFwiY2xhc3NcIiBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXNzaWduYWJsZShlbnYgOiBHbG9iYWxUeXBlRW52LCB0MSA6IFR5cGUsIHQyIDogVHlwZSkgOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzU3VidHlwZShlbnYsIHQxLCB0Mik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luKGVudiA6IEdsb2JhbFR5cGVFbnYsIHQxIDogVHlwZSwgdDIgOiBUeXBlKSA6IFR5cGUge1xuICByZXR1cm4gTk9ORVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXVnbWVudFRFbnYoZW52IDogR2xvYmFsVHlwZUVudiwgcHJvZ3JhbSA6IFByb2dyYW08U291cmNlTG9jYXRpb24+KSA6IEdsb2JhbFR5cGVFbnYge1xuICBjb25zdCBuZXdHbG9icyA9IG5ldyBNYXAoZW52Lmdsb2JhbHMpO1xuICBjb25zdCBuZXdGdW5zID0gbmV3IE1hcChlbnYuZnVuY3Rpb25zKTtcbiAgY29uc3QgbmV3Q2xhc3NlcyA9IG5ldyBNYXAoZW52LmNsYXNzZXMpO1xuICBwcm9ncmFtLmluaXRzLmZvckVhY2goaW5pdCA9PiBuZXdHbG9icy5zZXQoaW5pdC5uYW1lLCBpbml0LnR5cGUpKTtcbiAgcHJvZ3JhbS5mdW5zLmZvckVhY2goZnVuID0+IG5ld0Z1bnMuc2V0KGZ1bi5uYW1lLCBbZnVuLnBhcmFtZXRlcnMubWFwKHAgPT4gcC50eXBlKSwgZnVuLnJldF0pKTtcbiAgcHJvZ3JhbS5jbGFzc2VzLmZvckVhY2goY2xzID0+IHtcbiAgICBjb25zdCBmaWVsZHMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgbWV0aG9kcyA9IG5ldyBNYXAoKTtcbiAgICBjbHMuZmllbGRzLmZvckVhY2goZmllbGQgPT4gZmllbGRzLnNldChmaWVsZC5uYW1lLCBmaWVsZC50eXBlKSk7XG4gICAgY2xzLm1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4gbWV0aG9kcy5zZXQobWV0aG9kLm5hbWUsIFttZXRob2QucGFyYW1ldGVycy5tYXAocCA9PiBwLnR5cGUpLCBtZXRob2QucmV0XSkpO1xuICAgIG5ld0NsYXNzZXMuc2V0KGNscy5uYW1lLCBbZmllbGRzLCBtZXRob2RzXSk7XG4gIH0pO1xuICByZXR1cm4geyBnbG9iYWxzOiBuZXdHbG9icywgZnVuY3Rpb25zOiBuZXdGdW5zLCBjbGFzc2VzOiBuZXdDbGFzc2VzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YyhlbnYgOiBHbG9iYWxUeXBlRW52LCBwcm9ncmFtIDogUHJvZ3JhbTxTb3VyY2VMb2NhdGlvbj4pIDogW1Byb2dyYW08W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4sIEdsb2JhbFR5cGVFbnZdIHtcbiAgY29uc3QgbG9jYWxzID0gZW1wdHlMb2NhbFR5cGVFbnYoKTtcbiAgY29uc3QgbmV3RW52ID0gYXVnbWVudFRFbnYoZW52LCBwcm9ncmFtKTtcbiAgY29uc3QgdEluaXRzID0gcHJvZ3JhbS5pbml0cy5tYXAoaW5pdCA9PiB0Y0luaXQoZW52LCBpbml0KSk7XG4gIGNvbnN0IHREZWZzID0gcHJvZ3JhbS5mdW5zLm1hcChmdW4gPT4gdGNEZWYobmV3RW52LCBmdW4pKTtcbiAgY29uc3QgdENsYXNzZXMgPSBwcm9ncmFtLmNsYXNzZXMubWFwKGNscyA9PiB0Y0NsYXNzKG5ld0VudiwgY2xzKSk7XG5cbiAgLy8gcHJvZ3JhbS5pbml0cy5mb3JFYWNoKGluaXQgPT4gZW52Lmdsb2JhbHMuc2V0KGluaXQubmFtZSwgdGNJbml0KGluaXQpKSk7XG4gIC8vIHByb2dyYW0uZnVucy5mb3JFYWNoKGZ1biA9PiBlbnYuZnVuY3Rpb25zLnNldChmdW4ubmFtZSwgW2Z1bi5wYXJhbWV0ZXJzLm1hcChwID0+IHAudHlwZSksIGZ1bi5yZXRdKSk7XG4gIC8vIHByb2dyYW0uZnVucy5mb3JFYWNoKGZ1biA9PiB0Y0RlZihlbnYsIGZ1bikpO1xuICAvLyBTdHJhdGVneSBoZXJlIGlzIHRvIGFsbG93IHRjQmxvY2sgdG8gcG9wdWxhdGUgdGhlIGxvY2FscywgdGhlbiBjb3B5IHRvIHRoZVxuICAvLyBnbG9iYWwgZW52IGFmdGVyd2FyZHMgKHRjQmxvY2sgY2hhbmdlcyBsb2NhbHMpXG4gIGNvbnN0IHRCb2R5ID0gdGNCbG9jayhuZXdFbnYsIGxvY2FscywgcHJvZ3JhbS5zdG10cyk7XG4gIHZhciBsYXN0VHlwIDogVHlwZSA9IE5PTkU7XG4gIGlmICh0Qm9keS5sZW5ndGgpe1xuICAgIGxhc3RUeXAgPSB0Qm9keVt0Qm9keS5sZW5ndGggLSAxXS5hWzBdO1xuICB9XG4gIC8vIFRPRE8oam9lKTogY2hlY2sgZm9yIGFzc2lnbm1lbnQgaW4gZXhpc3RpbmcgZW52IHZzLiBuZXcgZGVjbGFyYXRpb25cbiAgLy8gYW5kIGxvb2sgZm9yIGFzc2lnbm1lbnQgY29uc2lzdGVuY3lcbiAgZm9yIChsZXQgbmFtZSBvZiBsb2NhbHMudmFycy5rZXlzKCkpIHtcbiAgICBuZXdFbnYuZ2xvYmFscy5zZXQobmFtZSwgbG9jYWxzLnZhcnMuZ2V0KG5hbWUpKTtcbiAgfVxuICBjb25zdCBhcHJvZ3JhbTogUHJvZ3JhbTxbVHlwZSwgU291cmNlTG9jYXRpb25dPiA9IHthOiBbbGFzdFR5cCwgcHJvZ3JhbS5hXSwgaW5pdHM6IHRJbml0cywgZnVuczogdERlZnMsIGNsYXNzZXM6IHRDbGFzc2VzLCBzdG10czogdEJvZHl9O1xuICByZXR1cm4gW2Fwcm9ncmFtLCBuZXdFbnZdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGNJbml0KGVudjogR2xvYmFsVHlwZUVudiwgaW5pdCA6IFZhckluaXQ8U291cmNlTG9jYXRpb24+KSA6IFZhckluaXQ8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4ge1xuICBjb25zdCB2YWxUeXAgPSB0Y0xpdGVyYWwoaW5pdC52YWx1ZSk7XG4gIGlmIChpc0Fzc2lnbmFibGUoZW52LCB2YWxUeXAsIGluaXQudHlwZSkpIHtcbiAgICByZXR1cm4gey4uLmluaXQsIGE6IFtOT05FLCBpbml0LmFdfTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoXCJFeHBlY3RlZCB0eXBlIGBcIiArIGluaXQudHlwZSArIFwiYDsgZ290IHR5cGUgYFwiICsgdmFsVHlwICsgXCJgXCIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0Y0RlZihlbnYgOiBHbG9iYWxUeXBlRW52LCBmdW4gOiBGdW5EZWY8U291cmNlTG9jYXRpb24+KSA6IEZ1bkRlZjxbVHlwZSwgU291cmNlTG9jYXRpb25dPiB7XG4gIHZhciBsb2NhbHMgPSBlbXB0eUxvY2FsVHlwZUVudigpO1xuICBsb2NhbHMuZXhwZWN0ZWRSZXQgPSBmdW4ucmV0O1xuICBsb2NhbHMudG9wTGV2ZWwgPSBmYWxzZTtcbiAgZnVuLnBhcmFtZXRlcnMuZm9yRWFjaChwID0+IGxvY2Fscy52YXJzLnNldChwLm5hbWUsIHAudHlwZSkpO1xuICB2YXIgdGNpbml0czogVmFySW5pdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPltdID0gW107XG4gIGZ1bi5pbml0cy5mb3JFYWNoKGluaXQgPT4ge1xuICAgIGNvbnN0IHRjaW5pdCA9IHRjSW5pdChlbnYsIGluaXQpO1xuICAgIHRjaW5pdHMucHVzaCh0Y2luaXQpO1xuICAgIGxvY2Fscy52YXJzLnNldChpbml0Lm5hbWUsIHRjaW5pdC50eXBlKTtcbiAgfSk7XG4gIFxuICBjb25zdCB0Qm9keSA9IHRjQmxvY2soZW52LCBsb2NhbHMsIGZ1bi5ib2R5KTtcbiAgaWYgKCFpc0Fzc2lnbmFibGUoZW52LCBsb2NhbHMuYWN0dWFsUmV0LCBsb2NhbHMuZXhwZWN0ZWRSZXQpKVxuICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihgZXhwZWN0ZWQgcmV0dXJuIHR5cGUgb2YgYmxvY2s6ICR7SlNPTi5zdHJpbmdpZnkobG9jYWxzLmV4cGVjdGVkUmV0KX0gZG9lcyBub3QgbWF0Y2ggYWN0dWFsIHJldHVybiB0eXBlOiAke0pTT04uc3RyaW5naWZ5KGxvY2Fscy5hY3R1YWxSZXQpfWApXG4gIHJldHVybiB7Li4uZnVuLCBhOltOT05FLCBmdW4uYV0sIGJvZHk6IHRCb2R5LCBpbml0czogdGNpbml0c307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0Y0NsYXNzKGVudjogR2xvYmFsVHlwZUVudiwgY2xzIDogQ2xhc3M8U291cmNlTG9jYXRpb24+KSA6IENsYXNzPFtUeXBlLCBTb3VyY2VMb2NhdGlvbl0+IHtcbiAgY29uc3QgdEZpZWxkcyA9IGNscy5maWVsZHMubWFwKGZpZWxkID0+IHRjSW5pdChlbnYsIGZpZWxkKSk7XG4gIGNvbnN0IHRNZXRob2RzID0gY2xzLm1ldGhvZHMubWFwKG1ldGhvZCA9PiB0Y0RlZihlbnYsIG1ldGhvZCkpO1xuICBjb25zdCBpbml0ID0gY2xzLm1ldGhvZHMuZmluZChtZXRob2QgPT4gbWV0aG9kLm5hbWUgPT09IFwiX19pbml0X19cIikgLy8gd2UnbGwgYWx3YXlzIGZpbmQgX19pbml0X19cbiAgaWYgKGluaXQucGFyYW1ldGVycy5sZW5ndGggIT09IDEgfHwgXG4gICAgaW5pdC5wYXJhbWV0ZXJzWzBdLm5hbWUgIT09IFwic2VsZlwiIHx8XG4gICAgIWVxdWFsVHlwZShpbml0LnBhcmFtZXRlcnNbMF0udHlwZSwgQ0xBU1MoY2xzLm5hbWUpKSB8fFxuICAgIGluaXQucmV0ICE9PSBOT05FKVxuICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcIkNhbm5vdCBvdmVycmlkZSBfX2luaXRfXyB0eXBlIHNpZ25hdHVyZVwiKTtcbiAgcmV0dXJuIHthOiBbTk9ORSwgY2xzLmFdLCBuYW1lOiBjbHMubmFtZSwgZmllbGRzOiB0RmllbGRzLCBtZXRob2RzOiB0TWV0aG9kc307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0Y0Jsb2NrKGVudiA6IEdsb2JhbFR5cGVFbnYsIGxvY2FscyA6IExvY2FsVHlwZUVudiwgc3RtdHMgOiBBcnJheTxTdG10PFNvdXJjZUxvY2F0aW9uPj4pIDogQXJyYXk8U3RtdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPj4ge1xuICB2YXIgdFN0bXRzID0gc3RtdHMubWFwKHN0bXQgPT4gdGNTdG10KGVudiwgbG9jYWxzLCBzdG10KSk7XG4gIHJldHVybiB0U3RtdHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0Y1N0bXQoZW52IDogR2xvYmFsVHlwZUVudiwgbG9jYWxzIDogTG9jYWxUeXBlRW52LCBzdG10IDogU3RtdDxTb3VyY2VMb2NhdGlvbj4pIDogU3RtdDxbVHlwZSwgU291cmNlTG9jYXRpb25dPiB7XG4gIHN3aXRjaChzdG10LnRhZykge1xuICAgIGNhc2UgXCJhc3NpZ25cIjpcbiAgICAgIGNvbnN0IHRWYWxFeHByID0gdGNFeHByKGVudiwgbG9jYWxzLCBzdG10LnZhbHVlKTtcbiAgICAgIHZhciBuYW1lVHlwO1xuICAgICAgaWYgKGxvY2Fscy52YXJzLmhhcyhzdG10Lm5hbWUpKSB7XG4gICAgICAgIG5hbWVUeXAgPSBsb2NhbHMudmFycy5nZXQoc3RtdC5uYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoZW52Lmdsb2JhbHMuaGFzKHN0bXQubmFtZSkpIHtcbiAgICAgICAgbmFtZVR5cCA9IGVudi5nbG9iYWxzLmdldChzdG10Lm5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiVW5ib3VuZCBpZDogXCIgKyBzdG10Lm5hbWUpO1xuICAgICAgfVxuICAgICAgaWYoIWlzQXNzaWduYWJsZShlbnYsIHRWYWxFeHByLmFbMF0sIG5hbWVUeXApKSBcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiTm9uLWFzc2lnbmFibGUgdHlwZXNcIik7XG4gICAgICByZXR1cm4ge2E6IFtOT05FLCBzdG10LmFdLCB0YWc6IHN0bXQudGFnLCBuYW1lOiBzdG10Lm5hbWUsIHZhbHVlOiB0VmFsRXhwcn07XG4gICAgY2FzZSBcImV4cHJcIjpcbiAgICAgIGNvbnN0IHRFeHByID0gdGNFeHByKGVudiwgbG9jYWxzLCBzdG10LmV4cHIpO1xuICAgICAgcmV0dXJuIHthOiB0RXhwci5hLCB0YWc6IHN0bXQudGFnLCBleHByOiB0RXhwcn07XG4gICAgY2FzZSBcImlmXCI6XG4gICAgICB2YXIgdENvbmQgPSB0Y0V4cHIoZW52LCBsb2NhbHMsIHN0bXQuY29uZCk7XG4gICAgICBjb25zdCB0VGhuID0gdGNCbG9jayhlbnYsIGxvY2Fscywgc3RtdC50aG4pO1xuICAgICAgY29uc3QgdGhuVHlwID0gbG9jYWxzLmFjdHVhbFJldDtcbiAgICAgIGxvY2Fscy5hY3R1YWxSZXQgPSBOT05FO1xuICAgICAgY29uc3QgdEVscyA9IHRjQmxvY2soZW52LCBsb2NhbHMsIHN0bXQuZWxzKTtcbiAgICAgIGNvbnN0IGVsc1R5cCA9IGxvY2Fscy5hY3R1YWxSZXQ7XG4gICAgICBpZiAodENvbmQuYVswXSAhPT0gQk9PTCkgXG4gICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcIkNvbmRpdGlvbiBFeHByZXNzaW9uIE11c3QgYmUgYSBib29sXCIpO1xuICAgICAgaWYgKHRoblR5cCAhPT0gZWxzVHlwKVxuICAgICAgICBsb2NhbHMuYWN0dWFsUmV0ID0geyB0YWc6IFwiZWl0aGVyXCIsIGxlZnQ6IHRoblR5cCwgcmlnaHQ6IGVsc1R5cCB9XG4gICAgICByZXR1cm4ge2E6IFt0aG5UeXAsIHN0bXQuYV0sIHRhZzogc3RtdC50YWcsIGNvbmQ6IHRDb25kLCB0aG46IHRUaG4sIGVsczogdEVsc307XG4gICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgaWYgKGxvY2Fscy50b3BMZXZlbClcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiY2Fubm90IHJldHVybiBvdXRzaWRlIG9mIGZ1bmN0aW9uc1wiKTtcbiAgICAgIGNvbnN0IHRSZXQgPSB0Y0V4cHIoZW52LCBsb2NhbHMsIHN0bXQudmFsdWUpO1xuICAgICAgaWYgKCFpc0Fzc2lnbmFibGUoZW52LCB0UmV0LmFbMF0sIGxvY2Fscy5leHBlY3RlZFJldCkpIFxuICAgICAgICB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoXCJleHBlY3RlZCByZXR1cm4gdHlwZSBgXCIgKyAobG9jYWxzLmV4cGVjdGVkUmV0IGFzIGFueSkudGFnICsgXCJgOyBnb3QgdHlwZSBgXCIgKyAodFJldC5hIGFzIGFueSkudGFnICsgXCJgXCIpO1xuICAgICAgbG9jYWxzLmFjdHVhbFJldCA9IHRSZXQuYVswXTtcbiAgICAgIHJldHVybiB7YTogdFJldC5hLCB0YWc6IHN0bXQudGFnLCB2YWx1ZTp0UmV0fTtcbiAgICBjYXNlIFwid2hpbGVcIjpcbiAgICAgIHZhciB0Q29uZCA9IHRjRXhwcihlbnYsIGxvY2Fscywgc3RtdC5jb25kKTtcbiAgICAgIGNvbnN0IHRCb2R5ID0gdGNCbG9jayhlbnYsIGxvY2Fscywgc3RtdC5ib2R5KTtcbiAgICAgIGlmICghZXF1YWxUeXBlKHRDb25kLmFbMF0sIEJPT0wpKSBcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiQ29uZGl0aW9uIEV4cHJlc3Npb24gTXVzdCBiZSBhIGJvb2xcIik7XG4gICAgICByZXR1cm4ge2E6IFtOT05FLCBzdG10LmFdLCB0YWc6c3RtdC50YWcsIGNvbmQ6IHRDb25kLCBib2R5OiB0Qm9keX07XG4gICAgY2FzZSBcInBhc3NcIjpcbiAgICAgIHJldHVybiB7YTogW05PTkUsIHN0bXQuYV0sIHRhZzogc3RtdC50YWd9O1xuICAgIGNhc2UgXCJmaWVsZC1hc3NpZ25cIjpcbiAgICAgIHZhciB0T2JqID0gdGNFeHByKGVudiwgbG9jYWxzLCBzdG10Lm9iaik7XG4gICAgICBjb25zdCB0VmFsID0gdGNFeHByKGVudiwgbG9jYWxzLCBzdG10LnZhbHVlKTtcbiAgICAgIGlmICh0T2JqLmFbMF0udGFnICE9PSBcImNsYXNzXCIpIFxuICAgICAgICB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoXCJmaWVsZCBhc3NpZ25tZW50cyByZXF1aXJlIGFuIG9iamVjdFwiKTtcbiAgICAgIGlmICghZW52LmNsYXNzZXMuaGFzKHRPYmouYVswXS5uYW1lKSkgXG4gICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcImZpZWxkIGFzc2lnbm1lbnQgb24gYW4gdW5rbm93biBjbGFzc1wiKTtcbiAgICAgIGNvbnN0IFtmaWVsZHMsIF9dID0gZW52LmNsYXNzZXMuZ2V0KHRPYmouYVswXS5uYW1lKTtcbiAgICAgIGlmICghZmllbGRzLmhhcyhzdG10LmZpZWxkKSkgXG4gICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihgY291bGQgbm90IGZpbmQgZmllbGQgJHtzdG10LmZpZWxkfSBpbiBjbGFzcyAke3RPYmouYVswXS5uYW1lfWApO1xuICAgICAgaWYgKCFpc0Fzc2lnbmFibGUoZW52LCB0VmFsLmFbMF0sIGZpZWxkcy5nZXQoc3RtdC5maWVsZCkpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoYGNvdWxkIG5vdCBhc3NpZ24gdmFsdWUgb2YgdHlwZTogJHt0VmFsLmF9OyBmaWVsZCAke3N0bXQuZmllbGR9IGV4cGVjdGVkIHR5cGU6ICR7ZmllbGRzLmdldChzdG10LmZpZWxkKX1gKTtcbiAgICAgIHJldHVybiB7Li4uc3RtdCwgYTogW05PTkUsIHN0bXQuYV0sIG9iajogdE9iaiwgdmFsdWU6IHRWYWx9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0Y0V4cHIoZW52IDogR2xvYmFsVHlwZUVudiwgbG9jYWxzIDogTG9jYWxUeXBlRW52LCBleHByIDogRXhwcjxTb3VyY2VMb2NhdGlvbj4pIDogRXhwcjxbVHlwZSwgU291cmNlTG9jYXRpb25dPiB7XG4gIHN3aXRjaChleHByLnRhZykge1xuICAgIGNhc2UgXCJsaXRlcmFsXCI6IFxuICAgICAgcmV0dXJuIHsuLi5leHByLCBhOiBbdGNMaXRlcmFsKGV4cHIudmFsdWUpLCBleHByLmFdfTtcbiAgICBjYXNlIFwiYmlub3BcIjpcbiAgICAgIGNvbnN0IHRMZWZ0ID0gdGNFeHByKGVudiwgbG9jYWxzLCBleHByLmxlZnQpO1xuICAgICAgY29uc3QgdFJpZ2h0ID0gdGNFeHByKGVudiwgbG9jYWxzLCBleHByLnJpZ2h0KTtcbiAgICAgIGNvbnN0IHRCaW4gPSB7Li4uZXhwciwgbGVmdDogdExlZnQsIHJpZ2h0OiB0UmlnaHR9O1xuICAgICAgc3dpdGNoKGV4cHIub3ApIHtcbiAgICAgICAgY2FzZSBCaW5PcC5QbHVzOlxuICAgICAgICBjYXNlIEJpbk9wLk1pbnVzOlxuICAgICAgICBjYXNlIEJpbk9wLk11bDpcbiAgICAgICAgY2FzZSBCaW5PcC5JRGl2OlxuICAgICAgICBjYXNlIEJpbk9wLk1vZDpcbiAgICAgICAgICBpZihlcXVhbFR5cGUodExlZnQuYVswXSwgTlVNKSAmJiBlcXVhbFR5cGUodFJpZ2h0LmFbMF0sIE5VTSkpIHsgcmV0dXJuIHsuLi50QmluLCBhOiBbTlVNLCBleHByLmFdfX1cbiAgICAgICAgICBlbHNlIHsgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiVHlwZSBtaXNtYXRjaCBmb3IgbnVtZXJpYyBvcFwiICsgZXhwci5vcCk7IH1cbiAgICAgICAgY2FzZSBCaW5PcC5FcTpcbiAgICAgICAgY2FzZSBCaW5PcC5OZXE6XG4gICAgICAgICAgaWYodExlZnQuYVswXS50YWcgPT09IFwiY2xhc3NcIiB8fCB0UmlnaHQuYVswXS50YWcgPT09IFwiY2xhc3NcIikgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiY2Fubm90IGFwcGx5IG9wZXJhdG9yICc9PScgb24gY2xhc3MgdHlwZXNcIilcbiAgICAgICAgICBpZihlcXVhbFR5cGUodExlZnQuYVswXSwgdFJpZ2h0LmFbMF0pKSB7IHJldHVybiB7Li4udEJpbiwgYTogW0JPT0wsIGV4cHIuYV19IDsgfVxuICAgICAgICAgIGVsc2UgeyB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoXCJUeXBlIG1pc21hdGNoIGZvciBvcFwiICsgZXhwci5vcCl9XG4gICAgICAgIGNhc2UgQmluT3AuTHRlOlxuICAgICAgICBjYXNlIEJpbk9wLkd0ZTpcbiAgICAgICAgY2FzZSBCaW5PcC5MdDpcbiAgICAgICAgY2FzZSBCaW5PcC5HdDpcbiAgICAgICAgICBpZihlcXVhbFR5cGUodExlZnQuYVswXSwgTlVNKSAmJiBlcXVhbFR5cGUodFJpZ2h0LmFbMF0sIE5VTSkpIHsgcmV0dXJuIHsuLi50QmluLCBhOiBbQk9PTCwgZXhwci5hXX0gOyB9XG4gICAgICAgICAgZWxzZSB7IHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcIlR5cGUgbWlzbWF0Y2ggZm9yIG9wXCIgKyBleHByLm9wKSB9XG4gICAgICAgIGNhc2UgQmluT3AuQW5kOlxuICAgICAgICBjYXNlIEJpbk9wLk9yOlxuICAgICAgICAgIGlmKGVxdWFsVHlwZSh0TGVmdC5hWzBdLCBCT09MKSAmJiBlcXVhbFR5cGUodFJpZ2h0LmFbMF0sIEJPT0wpKSB7IHJldHVybiB7Li4udEJpbiwgYTogW0JPT0wsIGV4cHIuYV19IDsgfVxuICAgICAgICAgIGVsc2UgeyB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoXCJUeXBlIG1pc21hdGNoIGZvciBib29sZWFuIG9wXCIgKyBleHByLm9wKTsgfVxuICAgICAgICBjYXNlIEJpbk9wLklzOlxuICAgICAgICAgIGlmKCFpc05vbmVPckNsYXNzKHRMZWZ0LmFbMF0pIHx8ICFpc05vbmVPckNsYXNzKHRSaWdodC5hWzBdKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcImlzIG9wZXJhbmRzIG11c3QgYmUgb2JqZWN0c1wiKTtcbiAgICAgICAgICByZXR1cm4gey4uLnRCaW4sIGE6IFtCT09MLCBleHByLmFdfTtcbiAgICAgIH1cbiAgICBjYXNlIFwidW5pb3BcIjpcbiAgICAgIGNvbnN0IHRFeHByID0gdGNFeHByKGVudiwgbG9jYWxzLCBleHByLmV4cHIpO1xuICAgICAgY29uc3QgdFVuaSA9IHsuLi5leHByLCBhOiB0RXhwci5hLCBleHByOiB0RXhwcn1cbiAgICAgIHN3aXRjaChleHByLm9wKSB7XG4gICAgICAgIGNhc2UgVW5pT3AuTmVnOlxuICAgICAgICAgIGlmKGVxdWFsVHlwZSh0RXhwci5hWzBdLCBOVU0pKSB7IHJldHVybiB0VW5pIH1cbiAgICAgICAgICBlbHNlIHsgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiVHlwZSBtaXNtYXRjaCBmb3Igb3BcIiArIGV4cHIub3ApO31cbiAgICAgICAgY2FzZSBVbmlPcC5Ob3Q6XG4gICAgICAgICAgaWYoZXF1YWxUeXBlKHRFeHByLmFbMF0sIEJPT0wpKSB7IHJldHVybiB0VW5pIH1cbiAgICAgICAgICBlbHNlIHsgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiVHlwZSBtaXNtYXRjaCBmb3Igb3BcIiArIGV4cHIub3ApO31cbiAgICAgIH1cbiAgICBjYXNlIFwiaWRcIjpcbiAgICAgIGlmIChsb2NhbHMudmFycy5oYXMoZXhwci5uYW1lKSkge1xuICAgICAgICByZXR1cm4gey4uLmV4cHIsIGE6IFtsb2NhbHMudmFycy5nZXQoZXhwci5uYW1lKSwgZXhwci5hXX07XG4gICAgICB9IGVsc2UgaWYgKGVudi5nbG9iYWxzLmhhcyhleHByLm5hbWUpKSB7XG4gICAgICAgIHJldHVybiB7Li4uZXhwciwgYTogW2Vudi5nbG9iYWxzLmdldChleHByLm5hbWUpLCBleHByLmFdfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcIlVuYm91bmQgaWQ6IFwiICsgZXhwci5uYW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIFwiYnVpbHRpbjFcIjpcbiAgICAgIGlmIChleHByLm5hbWUgPT09IFwicHJpbnRcIikge1xuICAgICAgICBjb25zdCB0QXJnID0gdGNFeHByKGVudiwgbG9jYWxzLCBleHByLmFyZyk7XG4gICAgICAgIHJldHVybiB7Li4uZXhwciwgYTogdEFyZy5hLCBhcmc6IHRBcmd9O1xuICAgICAgfSBlbHNlIGlmKGVudi5mdW5jdGlvbnMuaGFzKGV4cHIubmFtZSkpIHtcbiAgICAgICAgY29uc3QgW1tleHBlY3RlZEFyZ1R5cF0sIHJldFR5cF0gPSBlbnYuZnVuY3Rpb25zLmdldChleHByLm5hbWUpO1xuICAgICAgICBjb25zdCB0QXJnID0gdGNFeHByKGVudiwgbG9jYWxzLCBleHByLmFyZyk7XG4gICAgICAgIFxuICAgICAgICBpZihpc0Fzc2lnbmFibGUoZW52LCB0QXJnLmFbMF0sIGV4cGVjdGVkQXJnVHlwKSkge1xuICAgICAgICAgIHJldHVybiB7Li4uZXhwciwgYTogW3JldFR5cCwgZXhwci5hXSwgYXJnOiB0QXJnfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gY2FsbCB0eXBlIG1pc21hdGNoOiBcIiArIGV4cHIubmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmRlZmluZWQgZnVuY3Rpb246IFwiICsgZXhwci5uYW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIFwiYnVpbHRpbjJcIjpcbiAgICAgIGlmKGVudi5mdW5jdGlvbnMuaGFzKGV4cHIubmFtZSkpIHtcbiAgICAgICAgY29uc3QgW1tsZWZ0VHlwLCByaWdodFR5cF0sIHJldFR5cF0gPSBlbnYuZnVuY3Rpb25zLmdldChleHByLm5hbWUpO1xuICAgICAgICBjb25zdCB0TGVmdEFyZyA9IHRjRXhwcihlbnYsIGxvY2FscywgZXhwci5sZWZ0KTtcbiAgICAgICAgY29uc3QgdFJpZ2h0QXJnID0gdGNFeHByKGVudiwgbG9jYWxzLCBleHByLnJpZ2h0KTtcbiAgICAgICAgaWYoaXNBc3NpZ25hYmxlKGVudiwgbGVmdFR5cCwgdExlZnRBcmcuYVswXSkgJiYgaXNBc3NpZ25hYmxlKGVudiwgcmlnaHRUeXAsIHRSaWdodEFyZy5hWzBdKSkge1xuICAgICAgICAgIHJldHVybiB7Li4uZXhwciwgYTogW3JldFR5cCwgZXhwci5hXSwgbGVmdDogdExlZnRBcmcsIHJpZ2h0OiB0UmlnaHRBcmd9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBjYWxsIHR5cGUgbWlzbWF0Y2g6IFwiICsgZXhwci5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVuZGVmaW5lZCBmdW5jdGlvbjogXCIgKyBleHByLm5hbWUpO1xuICAgICAgfVxuICAgIGNhc2UgXCJjYWxsXCI6XG4gICAgICBpZihlbnYuY2xhc3Nlcy5oYXMoZXhwci5uYW1lKSkge1xuICAgICAgICAvLyBzdXJwcmlzZSBzdXJwcmlzZSB0aGlzIGlzIGFjdHVhbGx5IGEgY29uc3RydWN0b3JcbiAgICAgICAgY29uc3QgdENvbnN0cnVjdCA6IEV4cHI8W1R5cGUsIFNvdXJjZUxvY2F0aW9uXT4gPSB7IGE6IFtDTEFTUyhleHByLm5hbWUpLCBleHByLmFdLCB0YWc6IFwiY29uc3RydWN0XCIsIG5hbWU6IGV4cHIubmFtZSB9O1xuICAgICAgICBjb25zdCBbXywgbWV0aG9kc10gPSBlbnYuY2xhc3Nlcy5nZXQoZXhwci5uYW1lKTtcbiAgICAgICAgaWYgKG1ldGhvZHMuaGFzKFwiX19pbml0X19cIikpIHtcbiAgICAgICAgICBjb25zdCBbaW5pdEFyZ3MsIGluaXRSZXRdID0gbWV0aG9kcy5nZXQoXCJfX2luaXRfX1wiKTtcbiAgICAgICAgICBpZiAoZXhwci5hcmd1bWVudHMubGVuZ3RoICE9PSBpbml0QXJncy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiX19pbml0X18gZGlkbid0IHJlY2VpdmUgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cyBmcm9tIHRoZSBjb25zdHJ1Y3RvclwiKTtcbiAgICAgICAgICBpZiAoaW5pdFJldCAhPT0gTk9ORSkgXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoXCJfX2luaXRfXyAgbXVzdCBoYXZlIGEgdm9pZCByZXR1cm4gdHlwZVwiKTtcbiAgICAgICAgICByZXR1cm4gdENvbnN0cnVjdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdENvbnN0cnVjdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmKGVudi5mdW5jdGlvbnMuaGFzKGV4cHIubmFtZSkpIHtcbiAgICAgICAgY29uc3QgW2FyZ1R5cGVzLCByZXRUeXBlXSA9IGVudi5mdW5jdGlvbnMuZ2V0KGV4cHIubmFtZSk7XG4gICAgICAgIGNvbnN0IHRBcmdzID0gZXhwci5hcmd1bWVudHMubWFwKGFyZyA9PiB0Y0V4cHIoZW52LCBsb2NhbHMsIGFyZykpO1xuXG4gICAgICAgIGlmKGFyZ1R5cGVzLmxlbmd0aCA9PT0gZXhwci5hcmd1bWVudHMubGVuZ3RoICYmXG4gICAgICAgICAgIHRBcmdzLmV2ZXJ5KCh0QXJnLCBpKSA9PiB0QXJnLmFbMF0gPT09IGFyZ1R5cGVzW2ldKSkge1xuICAgICAgICAgICAgIHJldHVybiB7Li4uZXhwciwgYTogW3JldFR5cGUsIGV4cHIuYV0sIGFyZ3VtZW50czogdEFyZ3N9O1xuICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGNhbGwgdHlwZSBtaXNtYXRjaDogXCIgKyBleHByLm5hbWUpO1xuICAgICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5kZWZpbmVkIGZ1bmN0aW9uOiBcIiArIGV4cHIubmFtZSk7XG4gICAgICB9XG4gICAgY2FzZSBcImxvb2t1cFwiOlxuICAgICAgdmFyIHRPYmogPSB0Y0V4cHIoZW52LCBsb2NhbHMsIGV4cHIub2JqKTtcbiAgICAgIGlmICh0T2JqLmFbMF0udGFnID09PSBcImNsYXNzXCIpIHtcbiAgICAgICAgaWYgKGVudi5jbGFzc2VzLmhhcyh0T2JqLmFbMF0ubmFtZSkpIHtcbiAgICAgICAgICBjb25zdCBbZmllbGRzLCBfXSA9IGVudi5jbGFzc2VzLmdldCh0T2JqLmFbMF0ubmFtZSk7XG4gICAgICAgICAgaWYgKGZpZWxkcy5oYXMoZXhwci5maWVsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7Li4uZXhwciwgYTogW2ZpZWxkcy5nZXQoZXhwci5maWVsZCksIGV4cHIuYV0sIG9iajogdE9ian07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihgY291bGQgbm90IGZvdW5kIGZpZWxkICR7ZXhwci5maWVsZH0gaW4gY2xhc3MgJHt0T2JqLmFbMF0ubmFtZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKFwiZmllbGQgbG9va3VwIG9uIGFuIHVua25vd24gY2xhc3NcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcImZpZWxkIGxvb2t1cHMgcmVxdWlyZSBhbiBvYmplY3RcIik7XG4gICAgICB9XG4gICAgY2FzZSBcIm1ldGhvZC1jYWxsXCI6XG4gICAgICB2YXIgdE9iaiA9IHRjRXhwcihlbnYsIGxvY2FscywgZXhwci5vYmopO1xuICAgICAgdmFyIHRBcmdzID0gZXhwci5hcmd1bWVudHMubWFwKGFyZyA9PiB0Y0V4cHIoZW52LCBsb2NhbHMsIGFyZykpO1xuICAgICAgaWYgKHRPYmouYVswXS50YWcgPT09IFwiY2xhc3NcIikge1xuICAgICAgICBpZiAoZW52LmNsYXNzZXMuaGFzKHRPYmouYVswXS5uYW1lKSkge1xuICAgICAgICAgIGNvbnN0IFtfLCBtZXRob2RzXSA9IGVudi5jbGFzc2VzLmdldCh0T2JqLmFbMF0ubmFtZSk7XG4gICAgICAgICAgaWYgKG1ldGhvZHMuaGFzKGV4cHIubWV0aG9kKSkge1xuICAgICAgICAgICAgY29uc3QgW21ldGhvZEFyZ3MsIG1ldGhvZFJldF0gPSBtZXRob2RzLmdldChleHByLm1ldGhvZCk7XG4gICAgICAgICAgICBjb25zdCByZWFsQXJncyA9IFt0T2JqXS5jb25jYXQodEFyZ3MpO1xuICAgICAgICAgICAgaWYobWV0aG9kQXJncy5sZW5ndGggPT09IHJlYWxBcmdzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICBtZXRob2RBcmdzLmV2ZXJ5KChhcmdUeXAsIGkpID0+IGlzQXNzaWduYWJsZShlbnYsIHJlYWxBcmdzW2ldLmFbMF0sIGFyZ1R5cCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsuLi5leHByLCBhOiBbbWV0aG9kUmV0LCBleHByLmFdLCBvYmo6IHRPYmosIGFyZ3VtZW50czogdEFyZ3N9O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKGBNZXRob2QgY2FsbCB0eXBlIG1pc21hdGNoOiAke2V4cHIubWV0aG9kfSAtLS0gY2FsbEFyZ3M6ICR7SlNPTi5zdHJpbmdpZnkocmVhbEFyZ3MpfSwgbWV0aG9kQXJnczogJHtKU09OLnN0cmluZ2lmeShtZXRob2RBcmdzKX1gICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVDaGVja0Vycm9yKGBjb3VsZCBub3QgZm91bmQgbWV0aG9kICR7ZXhwci5tZXRob2R9IGluIGNsYXNzICR7dE9iai5hWzBdLm5hbWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcIm1ldGhvZCBjYWxsIG9uIGFuIHVua25vd24gY2xhc3NcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlQ2hlY2tFcnJvcihcIm1ldGhvZCBjYWxscyByZXF1aXJlIGFuIG9iamVjdFwiKTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgVHlwZUNoZWNrRXJyb3IoYHVuaW1wbGVtZW50ZWQgdHlwZSBjaGVja2luZyBmb3IgZXhwcjogJHtleHByfWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0Y0xpdGVyYWwobGl0ZXJhbCA6IExpdGVyYWwpIHtcbiAgICBzd2l0Y2gobGl0ZXJhbC50YWcpIHtcbiAgICAgICAgY2FzZSBcImJvb2xcIjogcmV0dXJuIEJPT0w7XG4gICAgICAgIGNhc2UgXCJudW1cIjogcmV0dXJuIE5VTTtcbiAgICAgICAgY2FzZSBcIm5vbmVcIjogcmV0dXJuIE5PTkU7XG4gICAgfVxufSIsImltcG9ydCB7IFZhbHVlLCBUeXBlIH0gZnJvbSBcIi4vYXN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBQeVZhbHVlKHR5cDogVHlwZSwgcmVzdWx0OiBudW1iZXIpOiBWYWx1ZSB7XG4gIHN3aXRjaCAodHlwLnRhZykge1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiBQeUludChyZXN1bHQpO1xuICAgIGNhc2UgXCJib29sXCI6XG4gICAgICByZXR1cm4gUHlCb29sKEJvb2xlYW4ocmVzdWx0KSk7XG4gICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICByZXR1cm4gUHlPYmoodHlwLm5hbWUsIHJlc3VsdCk7XG4gICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgIHJldHVybiBQeU5vbmUoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUHlJbnQobjogbnVtYmVyKTogVmFsdWUge1xuICByZXR1cm4geyB0YWc6IFwibnVtXCIsIHZhbHVlOiBuIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQeUJvb2woYjogYm9vbGVhbik6IFZhbHVlIHtcbiAgcmV0dXJuIHsgdGFnOiBcImJvb2xcIiwgdmFsdWU6IGIgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFB5T2JqKG5hbWU6IHN0cmluZywgYWRkcmVzczogbnVtYmVyKTogVmFsdWUge1xuICBpZiAoYWRkcmVzcyA9PT0gMCkgcmV0dXJuIFB5Tm9uZSgpO1xuICBlbHNlIHJldHVybiB7IHRhZzogXCJvYmplY3RcIiwgbmFtZSwgYWRkcmVzcyB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUHlOb25lKCk6IFZhbHVlIHtcbiAgcmV0dXJuIHsgdGFnOiBcIm5vbmVcIiB9O1xufVxuXG5leHBvcnQgY29uc3QgTlVNIDogVHlwZSA9IHt0YWc6IFwibnVtYmVyXCJ9O1xuZXhwb3J0IGNvbnN0IEJPT0wgOiBUeXBlID0ge3RhZzogXCJib29sXCJ9O1xuZXhwb3J0IGNvbnN0IE5PTkUgOiBUeXBlID0ge3RhZzogXCJub25lXCJ9O1xuZXhwb3J0IGZ1bmN0aW9uIENMQVNTKG5hbWUgOiBzdHJpbmcpIDogVHlwZSB7cmV0dXJuIHt0YWc6IFwiY2xhc3NcIiwgbmFtZX19O1xuIiwiaW1wb3J0IHtCYXNpY1JFUEx9IGZyb20gJy4vcmVwbCc7XG5pbXBvcnQgeyBUeXBlLCBWYWx1ZSB9IGZyb20gJy4vYXN0JztcbmltcG9ydCB7IGRlZmF1bHRUeXBlRW52IH0gZnJvbSAnLi90eXBlLWNoZWNrJztcbmltcG9ydCB7IE5VTSwgQk9PTCwgTk9ORSB9IGZyb20gJy4vdXRpbHMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkodHlwOiBUeXBlLCBhcmc6IGFueSkgOiBzdHJpbmcge1xuICBzd2l0Y2godHlwLnRhZykge1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiAoYXJnIGFzIG51bWJlcikudG9TdHJpbmcoKTtcbiAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgcmV0dXJuIChhcmcgYXMgYm9vbGVhbik/IFwiVHJ1ZVwiIDogXCJGYWxzZVwiO1xuICAgIGNhc2UgXCJub25lXCI6XG4gICAgICByZXR1cm4gXCJOb25lXCI7XG4gICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICByZXR1cm4gdHlwLm5hbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnQodHlwOiBUeXBlLCBhcmcgOiBudW1iZXIpIDogYW55IHtcbiAgY29uc29sZS5sb2coXCJMb2dnaW5nIGZyb20gV0FTTTogXCIsIGFyZyk7XG4gIGNvbnN0IGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmFwcGVuZENoaWxkKGVsdCk7XG4gIGVsdC5pbm5lclRleHQgPSBzdHJpbmdpZnkodHlwLCBhcmcpO1xuICByZXR1cm4gYXJnO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRfbm90X25vbmUoYXJnOiBhbnkpIDogYW55IHtcbiAgaWYgKGFyZyA9PT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSVU5USU1FIEVSUk9SOiBjYW5ub3QgcGVyZm9ybSBvcGVyYXRpb24gb24gbm9uZVwiKTtcbiAgcmV0dXJuIGFyZztcbn1cblxuZnVuY3Rpb24gd2ViU3RhcnQoKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGFzeW5jIGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21kbi93ZWJhc3NlbWJseS1leGFtcGxlcy9pc3N1ZXMvNVxuXG4gICAgY29uc3QgbWVtb3J5ID0gbmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDoxMCwgbWF4aW11bToxMDB9KTtcbiAgICBjb25zdCBtZW1vcnlNb2R1bGUgPSBhd2FpdCBmZXRjaCgnbWVtb3J5Lndhc20nKS50aGVuKHJlc3BvbnNlID0+IFxuICAgICAgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKVxuICAgICkudGhlbihieXRlcyA9PiBcbiAgICAgIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJ5dGVzLCB7IGpzOiB7IG1lbTogbWVtb3J5IH0gfSlcbiAgICApO1xuXG4gICAgdmFyIGltcG9ydE9iamVjdCA9IHtcbiAgICAgIGltcG9ydHM6IHtcbiAgICAgICAgYXNzZXJ0X25vdF9ub25lOiAoYXJnOiBhbnkpID0+IGFzc2VydF9ub3Rfbm9uZShhcmcpLFxuICAgICAgICBwcmludF9udW06IChhcmc6IG51bWJlcikgPT4gcHJpbnQoTlVNLCBhcmcpLFxuICAgICAgICBwcmludF9ib29sOiAoYXJnOiBudW1iZXIpID0+IHByaW50KEJPT0wsIGFyZyksXG4gICAgICAgIHByaW50X25vbmU6IChhcmc6IG51bWJlcikgPT4gcHJpbnQoTk9ORSwgYXJnKSxcbiAgICAgICAgYWJzOiBNYXRoLmFicyxcbiAgICAgICAgbWluOiBNYXRoLm1pbixcbiAgICAgICAgbWF4OiBNYXRoLm1heCxcbiAgICAgICAgcG93OiBNYXRoLnBvd1xuICAgICAgfSxcbiAgICAgIGxpYm1lbW9yeTogbWVtb3J5TW9kdWxlLmluc3RhbmNlLmV4cG9ydHMsXG4gICAgICBtZW1vcnlfdmFsdWVzOiBtZW1vcnksXG4gICAgICBqczoge21lbW9yeTogbWVtb3J5fVxuICAgIH07XG4gICAgdmFyIHJlcGwgPSBuZXcgQmFzaWNSRVBMKGltcG9ydE9iamVjdCk7XG5cbiAgICBmdW5jdGlvbiByZW5kZXJSZXN1bHQocmVzdWx0IDogVmFsdWUpIDogdm9pZCB7XG4gICAgICBpZihyZXN1bHQgPT09IHVuZGVmaW5lZCkgeyBjb25zb2xlLmxvZyhcInNraXBcIik7IHJldHVybjsgfVxuICAgICAgaWYgKHJlc3VsdC50YWcgPT09IFwibm9uZVwiKSByZXR1cm47XG4gICAgICBjb25zdCBlbHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXRcIikuYXBwZW5kQ2hpbGQoZWx0KTtcbiAgICAgIHN3aXRjaCAocmVzdWx0LnRhZykge1xuICAgICAgICBjYXNlIFwibnVtXCI6XG4gICAgICAgICAgZWx0LmlubmVyVGV4dCA9IFN0cmluZyhyZXN1bHQudmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICAgIGVsdC5pbm5lckhUTUwgPSAocmVzdWx0LnZhbHVlKSA/IFwiVHJ1ZVwiIDogXCJGYWxzZVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgZWx0LmlubmVySFRNTCA9IGA8JHtyZXN1bHQubmFtZX0gb2JqZWN0IGF0ICR7cmVzdWx0LmFkZHJlc3N9YFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IHJlbmRlciB2YWx1ZTogJHtyZXN1bHR9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyRXJyb3IocmVzdWx0IDogYW55KSA6IHZvaWQge1xuICAgICAgY29uc3QgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmFwcGVuZENoaWxkKGVsdCk7XG4gICAgICBlbHQuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJjb2xvcjogcmVkXCIpO1xuICAgICAgZWx0LmlubmVyVGV4dCA9IFN0cmluZyhyZXN1bHQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldHVwUmVwbCgpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0cHV0XCIpLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICBjb25zdCByZXBsQ29kZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5leHQtY29kZVwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICAgICAgcmVwbENvZGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCAoZSkgPT4ge1xuXG4gICAgICAgIGlmKGUuc2hpZnRLZXkgJiYgZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3Qgb3V0cHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICBjb25zdCBwcm9tcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICBwcm9tcHQuaW5uZXJUZXh0ID0gXCLCu1wiO1xuICAgICAgICAgIG91dHB1dC5hcHBlbmRDaGlsZChwcm9tcHQpO1xuICAgICAgICAgIGNvbnN0IGVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICAgICAgICAvLyBlbHQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICAgIGVsdC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgZWx0LmNsYXNzTmFtZSA9IFwicmVwbC1jb2RlXCI7XG4gICAgICAgICAgb3V0cHV0LmFwcGVuZENoaWxkKGVsdCk7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXRcIikuYXBwZW5kQ2hpbGQob3V0cHV0KTtcbiAgICAgICAgICBjb25zdCBzb3VyY2UgPSByZXBsQ29kZUVsZW1lbnQudmFsdWU7XG4gICAgICAgICAgZWx0LnZhbHVlID0gc291cmNlO1xuICAgICAgICAgIHJlcGxDb2RlRWxlbWVudC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgcmVwbC5ydW4oc291cmNlKS50aGVuKChyKSA9PiB7IHJlbmRlclJlc3VsdChyKTsgY29uc29sZS5sb2cgKFwicnVuIGZpbmlzaGVkXCIpIH0pXG4gICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4geyByZW5kZXJFcnJvcihlKTsgY29uc29sZS5sb2coXCJydW4gZmFpbGVkXCIsIGUpIH0pOztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRSZXBsKCkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXRcIikuaW5uZXJIVE1MID0gXCJcIjtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJ1blwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgcmVwbCA9IG5ldyBCYXNpY1JFUEwoaW1wb3J0T2JqZWN0KTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlci1jb2RlXCIpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgICByZXNldFJlcGwoKTtcbiAgICAgIHJlcGwucnVuKHNvdXJjZS52YWx1ZSkudGhlbigocikgPT4geyByZW5kZXJSZXN1bHQocik7IGNvbnNvbGUubG9nIChcInJ1biBmaW5pc2hlZFwiKSB9KVxuICAgICAgICAgIC5jYXRjaCgoZSkgPT4geyByZW5kZXJFcnJvcihlKTsgY29uc29sZS5sb2coXCJydW4gZmFpbGVkXCIsIGUpIH0pOztcbiAgICB9KTtcbiAgICBzZXR1cFJlcGwoKTtcbiAgfSk7XG59XG5cbndlYlN0YXJ0KCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHdhYnQ7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2OTcpO1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgdXNlZCAnZXhwb3J0cycgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuIl0sInNvdXJjZVJvb3QiOiIifQ==